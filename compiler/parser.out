Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL_
    IOS_SUFFIX
    SELECTOR
    WS
    NONATOMIC
    TRUE
    PROTOCOL_
    EXTERN_SUFFIX
    NIL
    YES
    PROPERTY
    DLLIMPORT
    NULL_RESETTABLE
    NS_ENUM
    SYNCHRONIZED
    READWRITE
    RESTRICT
    COMPLEX
    INOUT
    SETTER
    REQUIRED
    DYNAMIC
    DECLSPEC
    READONLY
    VOLATILE
    Class
    IB_DESIGNABLE
    NS_ASSUME_NONULL_BEGINE
    TRY
    GETTER
    OPTIONAL
    NULLABLE
    IB_OUTLET
    BYREF
    NONULL
    NS_ASSUME_NONULL_END
    NS_INLINE
    SYNTHESIZE
    ATOMIC
    STRONG
    NO
    IB_OUTLET_COLLECTION
    CATCH
    TVOS_PROHIBITED
    OUT
    IB_INSPECTABLE
    PACKAGE
    NULL_UNSPECIFIED
    WEAK
    IMP
    IMPORT
    SEL
    FALSE
    DLLEXPORT
    BOOL
    ENCODE
    INLINE
    CONST
    IMAGINERY
    NULL
    MAC_SUFFIX
    UNSAFE_UNRETAINED
    ONEWAY
    RETAIN
    ASSIGN
    NS_OPTIONS
    BYCOPY
    AT
    IN
    COPY
    ID
    SELF
    FINALLY
    AUTORELEASEPOOL
    SUPER
    THROW

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     external_declaration -> class_interface
Rule 6     external_declaration -> class_implementation
Rule 7     external_declaration -> category_interface
Rule 8     external_declaration -> category_implementation
Rule 9     external_declaration -> protocol_declaration
Rule 10    external_declaration -> class_declaration_list
Rule 11    function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 12    function_definition -> declaration_specifiers declarator compound_statement
Rule 13    function_definition -> declarator declaration_list compound_statement
Rule 14    function_definition -> declarator compound_statement
Rule 15    declaration -> declaration_specifiers SEMI
Rule 16    declaration -> type_declaration SEMI
Rule 17    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 18    class_interface -> INTERFACE class_name instance_variables interface_declaration_list END
Rule 19    class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END
Rule 20    class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END
Rule 21    class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END
Rule 22    class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END
Rule 23    class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END
Rule 24    category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END
Rule 25    category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END
Rule 26    category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END
Rule 27    protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END
Rule 28    protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END
Rule 29    class_declaration_list -> CLASS class_list
Rule 30    declaration_specifiers -> storage_class_specifier
Rule 31    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 32    declaration_specifiers -> type_specifier
Rule 33    declaration_specifiers -> type_specifier declaration_specifiers
Rule 34    declarator -> pointer direct_declarator
Rule 35    declarator -> direct_declarator
Rule 36    declaration_list -> declaration
Rule 37    declaration_list -> declaration_list declaration
Rule 38    compound_statement -> LBRACE RBRACE
Rule 39    compound_statement -> LBRACE statement_list RBRACE
Rule 40    compound_statement -> LBRACE declaration_list RBRACE
Rule 41    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 42    type_declaration -> TYPEDEF declaration_specifiers type_declarator
Rule 43    init_declarator_list -> init_declarator
Rule 44    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 45    class_name -> IDENTIFIER
Rule 46    superclass_name -> IDENTIFIER
Rule 47    instance_variables -> LBRACE struct_declaration_list RBRACE
Rule 48    instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE
Rule 49    instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE
Rule 50    instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE
Rule 51    interface_declaration_list -> declaration
Rule 52    interface_declaration_list -> method_declaration
Rule 53    interface_declaration_list -> interface_declaration_list declaration
Rule 54    interface_declaration_list -> interface_declaration_list method_declaration
Rule 55    protocol_reference_list -> LT protocol_list GT
Rule 56    implementation_definition_list -> function_definition
Rule 57    implementation_definition_list -> declaration
Rule 58    implementation_definition_list -> method_definition
Rule 59    implementation_definition_list -> implementation_definition_list function_definition
Rule 60    implementation_definition_list -> implementation_definition_list declaration
Rule 61    implementation_definition_list -> implementation_definition_list method_definition
Rule 62    category_name -> IDENTIFIER
Rule 63    protocol_name -> IDENTIFIER
Rule 64    class_list -> class_name
Rule 65    class_list -> class_list COMMA class_name
Rule 66    storage_class_specifier -> EXTERN
Rule 67    storage_class_specifier -> STATIC
Rule 68    storage_class_specifier -> AUTO
Rule 69    storage_class_specifier -> REGISTER
Rule 70    type_specifier -> VOID
Rule 71    type_specifier -> CHAR
Rule 72    type_specifier -> SHORT
Rule 73    type_specifier -> INT
Rule 74    type_specifier -> LONG
Rule 75    type_specifier -> FLOAT
Rule 76    type_specifier -> DOUBLE
Rule 77    type_specifier -> SIGNED
Rule 78    type_specifier -> UNSIGNED
Rule 79    type_specifier -> struct_or_union_specifier
Rule 80    type_specifier -> enum_specifier
Rule 81    type_specifier -> TYPE_NAME
Rule 82    pointer -> MUL
Rule 83    pointer -> MUL pointer
Rule 84    direct_declarator -> IDENTIFIER
Rule 85    direct_declarator -> LP declarator RP
Rule 86    direct_declarator -> direct_declarator LBRACK constant_expression RBRACK
Rule 87    direct_declarator -> direct_declarator LBRACK RBRACK
Rule 88    direct_declarator -> direct_declarator LP parameter_type_list RP
Rule 89    direct_declarator -> direct_declarator LP identifier_list RP
Rule 90    direct_declarator -> direct_declarator LP RP
Rule 91    statement_list -> statement
Rule 92    statement_list -> statement_list statement
Rule 93    type_declarator -> pointer type_direct_declarator
Rule 94    type_declarator -> type_direct_declarator
Rule 95    init_declarator -> declarator
Rule 96    init_declarator -> declarator ASSIGNMENT initializer
Rule 97    struct_declaration_list -> struct_declaration
Rule 98    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 99    visibility_specification -> PRIVATE
Rule 100   visibility_specification -> PUBLIC
Rule 101   visibility_specification -> PROTECTED
Rule 102   method_declaration -> class_method_declaration
Rule 103   method_declaration -> instance_method_declaration
Rule 104   protocol_list -> protocol_name
Rule 105   protocol_list -> protocol_list COMMA protocol_name
Rule 106   method_definition -> class_method_definition
Rule 107   method_definition -> instance_method_definition
Rule 108   struct_or_union -> STRUCT
Rule 109   struct_or_union -> UNION
Rule 110   struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
Rule 111   struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE
Rule 112   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 113   enum_specifier -> ENUM LBRACE enumerator_list RBRACE
Rule 114   enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE
Rule 115   enum_specifier -> ENUM IDENTIFIER
Rule 116   constant_expression -> conditional_expression
Rule 117   parameter_type_list -> parameter_list
Rule 118   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 119   identifier_list -> IDENTIFIER
Rule 120   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 121   statement -> labeled_statement
Rule 122   statement -> compound_statement
Rule 123   statement -> expression_statement
Rule 124   statement -> selection_statement
Rule 125   statement -> iteration_statement
Rule 126   statement -> jump_statement
Rule 127   type_direct_declarator -> IDENTIFIER
Rule 128   type_direct_declarator -> LP type_declarator RP
Rule 129   type_direct_declarator -> type_direct_declarator LBRACK constant_expression RBRACK
Rule 130   type_direct_declarator -> type_direct_declarator LBRACK RBRACK
Rule 131   type_direct_declarator -> type_direct_declarator LP parameter_type_list RP
Rule 132   type_direct_declarator -> type_direct_declarator LP identifier_list RP
Rule 133   type_direct_declarator -> type_direct_declarator LP RP
Rule 134   initializer -> assignment_expression
Rule 135   initializer -> LBRACE initializer_list RBRACE
Rule 136   initializer -> LBRACE initializer_list COMMA RBRACE
Rule 137   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 138   class_method_declaration -> ADD method_selector SEMI
Rule 139   class_method_declaration -> ADD method_type method_selector SEMI
Rule 140   instance_method_declaration -> SUB method_selector SEMI
Rule 141   instance_method_declaration -> SUB method_type method_selector SEMI
Rule 142   class_method_definition -> ADD method_selector compound_statement
Rule 143   class_method_definition -> ADD method_type method_selector compound_statement
Rule 144   class_method_definition -> ADD method_selector declaration_list compound_statement
Rule 145   class_method_definition -> ADD method_type method_selector declaration_list compound_statement
Rule 146   instance_method_definition -> SUB method_selector compound_statement
Rule 147   instance_method_definition -> SUB method_type method_selector compound_statement
Rule 148   instance_method_definition -> SUB method_selector declaration_list compound_statement
Rule 149   instance_method_definition -> SUB method_type method_selector declaration_list compound_statement
Rule 150   enumerator_list -> enumerator
Rule 151   enumerator_list -> enumerator_list COMMA enumerator
Rule 152   conditional_expression -> logical_or_expression
Rule 153   conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
Rule 154   parameter_list -> parameter_declaration
Rule 155   parameter_list -> parameter_list COMMA parameter_declaration
Rule 156   labeled_statement -> IDENTIFIER COLON statement
Rule 157   labeled_statement -> CASE constant_expression COLON statement
Rule 158   labeled_statement -> DEFAULT COLON statement
Rule 159   expression_statement -> SEMI
Rule 160   expression_statement -> expression SEMI
Rule 161   selection_statement -> IF LP expression RP statement
Rule 162   selection_statement -> IF LP expression RP statement ELSE statement
Rule 163   selection_statement -> SWITCH LP expression RP statement
Rule 164   iteration_statement -> WHILE LP expression RP statement
Rule 165   iteration_statement -> DO statement WHILE LP expression RP SEMI
Rule 166   iteration_statement -> FOR LP expression_statement expression_statement RP statement
Rule 167   iteration_statement -> FOR LP expression_statement expression_statement expression RP
Rule 168   jump_statement -> GOTO IDENTIFIER SEMI
Rule 169   jump_statement -> CONTINUE SEMI
Rule 170   jump_statement -> BREAK SEMI
Rule 171   jump_statement -> RETURN SEMI
Rule 172   jump_statement -> RETURN expression SEMI
Rule 173   assignment_expression -> conditional_expression
Rule 174   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 175   initializer_list -> initializer
Rule 176   initializer_list -> initializer_list COMMA initializer
Rule 177   specifier_qualifier_list -> type_specifier
Rule 178   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 179   struct_declarator_list -> struct_declarator
Rule 180   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 181   method_selector -> unary_selector
Rule 182   method_selector -> keyword_selector
Rule 183   method_selector -> keyword_selector COMMA ELLIPSIS
Rule 184   method_selector -> keyword_selector COMMA parameter_type_list
Rule 185   method_type -> LP type_name RP
Rule 186   type_name -> specifier_qualifier_list
Rule 187   type_name -> specifier_qualifier_list abstract_declarator
Rule 188   enumerator -> IDENTIFIER
Rule 189   enumerator -> IDENTIFIER ASSIGNMENT constant_expression
Rule 190   logical_or_expression -> logical_and_expression
Rule 191   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 192   expression -> assignment_expression
Rule 193   expression -> expression COMMA assignment_expression
Rule 194   parameter_declaration -> declaration_specifiers declarator
Rule 195   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 196   parameter_declaration -> declaration_specifiers
Rule 197   unary_expression -> postfix_expression
Rule 198   unary_expression -> INC unary_expression
Rule 199   unary_expression -> DEC unary_expression
Rule 200   unary_expression -> unary_operator cast_expression
Rule 201   unary_expression -> SIZEOF unary_expression
Rule 202   unary_expression -> SIZEOF LP type_name RP
Rule 203   assignment_operator -> ASSIGNMENT
Rule 204   assignment_operator -> MUL_ASSIGN
Rule 205   assignment_operator -> DIV_ASSIGN
Rule 206   assignment_operator -> MOD_ASSIGN
Rule 207   assignment_operator -> ADD_ASSIGN
Rule 208   assignment_operator -> SUB_ASSIGN
Rule 209   assignment_operator -> LSHIFT_ASSIGN
Rule 210   assignment_operator -> RSHIFT_ASSIGN
Rule 211   assignment_operator -> AND_ASSIGN
Rule 212   assignment_operator -> XOR_ASSIGN
Rule 213   assignment_operator -> OR_ASSIGN
Rule 214   struct_declarator -> declarator
Rule 215   struct_declarator -> COLON constant_expression
Rule 216   struct_declarator -> declarator COLON constant_expression
Rule 217   unary_selector -> selector
Rule 218   keyword_selector -> keyword_declarator
Rule 219   keyword_selector -> keyword_selector keyword_declarator
Rule 220   abstract_declarator -> pointer
Rule 221   abstract_declarator -> direct_abstract_declarator
Rule 222   abstract_declarator -> pointer direct_abstract_declarator
Rule 223   logical_and_expression -> inclusive_or_expression
Rule 224   logical_and_expression -> logical_and_expression AND inclusive_or_expression
Rule 225   postfix_expression -> primary_expression
Rule 226   postfix_expression -> postfix_expression LBRACK expression RBRACK
Rule 227   postfix_expression -> postfix_expression LP RP
Rule 228   postfix_expression -> postfix_expression LP argument_expression_list RP
Rule 229   postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 230   postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER
Rule 231   postfix_expression -> postfix_expression INC
Rule 232   postfix_expression -> postfix_expression DEC
Rule 233   unary_operator -> BITAND
Rule 234   unary_operator -> MUL
Rule 235   unary_operator -> ADD
Rule 236   unary_operator -> SUB
Rule 237   unary_operator -> TILDE
Rule 238   unary_operator -> BANG
Rule 239   cast_expression -> unary_expression
Rule 240   cast_expression -> LP type_name RP cast_expression
Rule 241   selector -> IDENTIFIER
Rule 242   keyword_declarator -> COLON IDENTIFIER
Rule 243   keyword_declarator -> COLON method_type IDENTIFIER
Rule 244   keyword_declarator -> selector COLON IDENTIFIER
Rule 245   keyword_declarator -> selector COLON method_type IDENTIFIER
Rule 246   direct_abstract_declarator -> LP abstract_declarator RP
Rule 247   direct_abstract_declarator -> LBRACK RBRACK
Rule 248   direct_abstract_declarator -> LBRACK constant_expression RBRACK
Rule 249   direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK
Rule 250   direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK
Rule 251   direct_abstract_declarator -> LP RP
Rule 252   direct_abstract_declarator -> LP parameter_type_list RP
Rule 253   direct_abstract_declarator -> direct_abstract_declarator LP RP
Rule 254   direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP
Rule 255   inclusive_or_expression -> exclusive_or_expression
Rule 256   inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression
Rule 257   primary_expression -> IDENTIFIER
Rule 258   primary_expression -> HEX_LITERAL
Rule 259   primary_expression -> OCTAL_LITERAL
Rule 260   primary_expression -> BINARY_LITERAL
Rule 261   primary_expression -> DECIMAL_LITERAL
Rule 262   primary_expression -> FLOATING_POINT_LITERAL
Rule 263   primary_expression -> C_STRING_LITERAL
Rule 264   primary_expression -> OBJC_STRING_LITERAL
Rule 265   primary_expression -> LP expression RP
Rule 266   argument_expression_list -> assignment_expression
Rule 267   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 268   exclusive_or_expression -> and_expression
Rule 269   exclusive_or_expression -> exclusive_or_expression BITXOR and_expression
Rule 270   and_expression -> equality_expression
Rule 271   and_expression -> and_expression BITAND equality_expression
Rule 272   equality_expression -> relational_expression
Rule 273   equality_expression -> equality_expression EQUAL relational_expression
Rule 274   equality_expression -> equality_expression NOTEQUAL relational_expression
Rule 275   relational_expression -> shift_expression
Rule 276   relational_expression -> relational_expression LT shift_expression
Rule 277   relational_expression -> relational_expression GT shift_expression
Rule 278   relational_expression -> relational_expression LE shift_expression
Rule 279   relational_expression -> relational_expression GE shift_expression
Rule 280   shift_expression -> additive_expression
Rule 281   shift_expression -> shift_expression LSHIFT additive_expression
Rule 282   shift_expression -> shift_expression RSHIFT additive_expression
Rule 283   additive_expression -> multiplicative_expression
Rule 284   additive_expression -> additive_expression ADD multiplicative_expression
Rule 285   additive_expression -> additive_expression SUB multiplicative_expression
Rule 286   multiplicative_expression -> cast_expression
Rule 287   multiplicative_expression -> multiplicative_expression MUL cast_expression
Rule 288   multiplicative_expression -> multiplicative_expression DIV cast_expression
Rule 289   multiplicative_expression -> multiplicative_expression MOD cast_expression

Terminals, with rules where they appear

(                    : 24 25 26
)                    : 24 25 26
ADD                  : 138 139 142 143 144 145 235 284
ADD_ASSIGN           : 207
AND                  : 224
AND_ASSIGN           : 211
ASSIGN               : 
ASSIGNMENT           : 96 189 203
AT                   : 
ATOMIC               : 
AUTO                 : 68
AUTORELEASEPOOL      : 
BANG                 : 238
BINARY_LITERAL       : 260
BITAND               : 233 271
BITOR                : 256
BITXOR               : 269
BOOL                 : 
BOOL_                : 
BREAK                : 170
BYCOPY               : 
BYREF                : 
CASE                 : 157
CATCH                : 
CHAR                 : 71
CLASS                : 29
COLON                : 19 21 23 153 156 157 158 215 216 242 243 244 245
COMMA                : 44 65 105 118 120 136 151 155 176 180 183 184 193 267
COMPLEX              : 
CONST                : 
CONTINUE             : 169
COPY                 : 
C_STRING_LITERAL     : 263
Class                : 
DEC                  : 199 232
DECIMAL_LITERAL      : 261
DECLSPEC             : 
DEFAULT              : 158
DIV                  : 288
DIV_ASSIGN           : 205
DLLEXPORT            : 
DLLIMPORT            : 
DO                   : 165
DOT                  : 229
DOUBLE               : 76
DYNAMIC              : 
ELLIPSIS             : 118 183
ELSE                 : 162
ENCODE               : 
END                  : 18 19 20 21 22 23 24 25 26 27 28
ENUM                 : 113 114 115
EQUAL                : 273
EXTERN               : 66
EXTERN_SUFFIX        : 
FALSE                : 
FINALLY              : 
FLOAT                : 75
FLOATING_POINT_LITERAL : 262
FOR                  : 166 167
GE                   : 279
GETTER               : 
GOTO                 : 168
GT                   : 55 277
HEX_LITERAL          : 258
IB_DESIGNABLE        : 
IB_INSPECTABLE       : 
IB_OUTLET            : 
IB_OUTLET_COLLECTION : 
ID                   : 
IDENTIFIER           : 45 46 62 63 84 110 112 114 115 119 120 127 156 168 188 189 229 230 241 242 243 244 245 257
IF                   : 161 162
IMAGINERY            : 
IMP                  : 
IMPLEMENTATION       : 22 23 26
IMPORT               : 
IN                   : 
INC                  : 198 231
INLINE               : 
INOUT                : 
INT                  : 73
INTERFACE            : 18 19 20 21 24 25
IOS_SUFFIX           : 
LBRACE               : 38 39 40 41 47 48 49 50 110 111 113 114 135 136
LBRACK               : 86 87 129 130 226 247 248 249 250
LE                   : 278
LONG                 : 74
LP                   : 85 88 89 90 128 131 132 133 161 162 163 164 165 166 167 185 202 227 228 240 246 251 252 253 254 265
LSHIFT               : 281
LSHIFT_ASSIGN        : 209
LT                   : 55 276
MAC_SUFFIX           : 
MOD                  : 289
MOD_ASSIGN           : 206
MUL                  : 82 83 234 287
MUL_ASSIGN           : 204
NIL                  : 
NO                   : 
NONATOMIC            : 
NONULL               : 
NOTEQUAL             : 274
NS_ASSUME_NONULL_BEGINE : 
NS_ASSUME_NONULL_END : 
NS_ENUM              : 
NS_INLINE            : 
NS_OPTIONS           : 
NULL                 : 
NULLABLE             : 
NULL_RESETTABLE      : 
NULL_UNSPECIFIED     : 
OBJC_STRING_LITERAL  : 264
OCTAL_LITERAL        : 259
ONEWAY               : 
OPTIONAL             : 
OR                   : 191
OR_ASSIGN            : 213
OUT                  : 
PACKAGE              : 
PRIVATE              : 99
PROPERTY             : 
PROTECTED            : 101
PROTOCOL             : 27 28
PROTOCOL_            : 
PUBLIC               : 100
QUESTION             : 153
RBRACE               : 38 39 40 41 47 48 49 50 110 111 113 114 135 136
RBRACK               : 86 87 129 130 226 247 248 249 250
READONLY             : 
READWRITE            : 
REGISTER             : 69
REQUIRED             : 
RESTRICT             : 
RETAIN               : 
RETURN               : 171 172
RP                   : 85 88 89 90 128 131 132 133 161 162 163 164 165 166 167 185 202 227 228 240 246 251 252 253 254 265
RSHIFT               : 282
RSHIFT_ASSIGN        : 210
SEL                  : 
SELECTOR             : 
SELF                 : 
SEMI                 : 15 16 17 137 138 139 140 141 159 160 165 168 169 170 171 172
SETTER               : 
SHORT                : 72
SIGNED               : 77
SIZEOF               : 201 202
STATIC               : 67
STRONG               : 
STRUCT               : 108
STRUCTACCESS         : 230
SUB                  : 140 141 146 147 148 149 236 285
SUB_ASSIGN           : 208
SUPER                : 
SWITCH               : 163
SYNCHRONIZED         : 
SYNTHESIZE           : 
THROW                : 
TILDE                : 237
TRUE                 : 
TRY                  : 
TVOS_PROHIBITED      : 
TYPEDEF              : 42
TYPE_NAME            : 81
UNION                : 109
UNSAFE_UNRETAINED    : 
UNSIGNED             : 78
VOID                 : 70
VOLATILE             : 
WEAK                 : 
WHILE                : 164 165
WS                   : 
XOR_ASSIGN           : 212
YES                  : 
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 187 195 246
additive_expression  : 280 281 282 284 285
and_expression       : 268 269 271
argument_expression_list : 228 267
assignment_expression : 134 174 192 193 266 267
assignment_operator  : 174
cast_expression      : 200 240 286 287 288 289
category_implementation : 8
category_interface   : 7
category_name        : 24 25 26
class_declaration_list : 10
class_implementation : 6
class_interface      : 5
class_list           : 29 65
class_method_declaration : 102
class_method_definition : 106
class_name           : 18 19 21 22 23 24 25 26 64 65
compound_statement   : 11 12 13 14 122 142 143 144 145 146 147 148 149
conditional_expression : 116 153 173
constant_expression  : 86 129 157 189 215 216 248 250
declaration          : 4 36 37 51 53 57 60
declaration_list     : 11 13 37 40 41 144 145 148 149
declaration_specifiers : 11 12 15 17 31 33 42 194 195 196
declarator           : 11 12 13 14 85 95 96 194 214 216
direct_abstract_declarator : 221 222 249 250 253 254
direct_declarator    : 34 35 86 87 88 89 90
enum_specifier       : 80
enumerator           : 150 151
enumerator_list      : 113 114 151
equality_expression  : 270 271 273 274
exclusive_or_expression : 255 256 269
expression           : 153 160 161 162 163 164 165 167 172 193 226 265
expression_statement : 123 166 166 167 167
external_declaration : 1 2
function_definition  : 3 56 59
identifier_list      : 89 120 132
implementation_definition_list : 22 23 26 59 60 61
inclusive_or_expression : 223 224 256
init_declarator      : 43 44
init_declarator_list : 17 44
initializer          : 96 175 176
initializer_list     : 135 136 176
instance_method_declaration : 103
instance_method_definition : 107
instance_variables   : 18 19 20 21 22 23 49 50
interface_declaration_list : 18 19 20 21 24 25 27 28 53 54
iteration_statement  : 125
jump_statement       : 126
keyword_declarator   : 218 219
keyword_selector     : 182 183 184 219
labeled_statement    : 121
logical_and_expression : 190 191 224
logical_or_expression : 152 153 191
method_declaration   : 52 54
method_definition    : 58 61
method_selector      : 138 139 140 141 142 143 144 145 146 147 148 149
method_type          : 139 141 143 145 147 149 243 245
multiplicative_expression : 283 284 285 287 288 289
parameter_declaration : 154 155
parameter_list       : 117 118 155
parameter_type_list  : 88 131 184 252 254
pointer              : 34 83 93 220 222
postfix_expression   : 197 226 227 228 229 230 231 232
primary_expression   : 225
protocol_declaration : 9
protocol_list        : 55 105
protocol_name        : 27 28 104 105
protocol_reference_list : 20 21 25 28
relational_expression : 272 273 274 276 277 278 279
selection_statement  : 124
selector             : 217 244 245
shift_expression     : 275 276 277 278 279 281 282
specifier_qualifier_list : 137 178 186 187
statement            : 91 92 156 157 158 161 162 162 163 164 165 166
statement_list       : 39 41 92
storage_class_specifier : 30 31
struct_declaration   : 97 98
struct_declaration_list : 47 48 49 50 98 110 111
struct_declarator    : 179 180
struct_declarator_list : 137 180
struct_or_union      : 110 111 112
struct_or_union_specifier : 79
superclass_name      : 19 21 23
translation_unit     : 2 0
type_declaration     : 16
type_declarator      : 42 128
type_direct_declarator : 93 94 129 130 131 132 133
type_name            : 185 202 240
type_specifier       : 32 33 177 178
unary_expression     : 174 198 199 201 239
unary_operator       : 200
unary_selector       : 181
visibility_specification : 48 50

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) external_declaration -> . class_interface
    (6) external_declaration -> . class_implementation
    (7) external_declaration -> . category_interface
    (8) external_declaration -> . category_implementation
    (9) external_declaration -> . protocol_declaration
    (10) external_declaration -> . class_declaration_list
    (11) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (12) function_definition -> . declaration_specifiers declarator compound_statement
    (13) function_definition -> . declarator declaration_list compound_statement
    (14) function_definition -> . declarator compound_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (18) class_interface -> . INTERFACE class_name instance_variables interface_declaration_list END
    (19) class_interface -> . INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END
    (20) class_interface -> . INTERFACE protocol_reference_list instance_variables interface_declaration_list END
    (21) class_interface -> . INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END
    (22) class_implementation -> . IMPLEMENTATION class_name instance_variables implementation_definition_list END
    (23) class_implementation -> . IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END
    (24) category_interface -> . INTERFACE class_name ( category_name ) interface_declaration_list END
    (25) category_interface -> . INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END
    (26) category_implementation -> . IMPLEMENTATION class_name ( category_name ) implementation_definition_list END
    (27) protocol_declaration -> . PROTOCOL protocol_name interface_declaration_list END
    (28) protocol_declaration -> . PROTOCOL protocol_name protocol_reference_list interface_declaration_list END
    (29) class_declaration_list -> . CLASS class_list
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    INTERFACE       shift and go to state 44
    IMPLEMENTATION  shift and go to state 20
    PROTOCOL        shift and go to state 5
    CLASS           shift and go to state 28
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    category_interface             shift and go to state 9
    type_specifier                 shift and go to state 11
    class_implementation           shift and go to state 14
    pointer                        shift and go to state 16
    class_interface                shift and go to state 17
    external_declaration           shift and go to state 18
    category_implementation        shift and go to state 21
    protocol_declaration           shift and go to state 25
    translation_unit               shift and go to state 29
    struct_or_union                shift and go to state 6
    direct_declarator              shift and go to state 34
    class_declaration_list         shift and go to state 36
    declaration_specifiers         shift and go to state 37
    declaration                    shift and go to state 38
    function_definition            shift and go to state 39
    enum_specifier                 shift and go to state 35
    declarator                     shift and go to state 43

state 1

    (30) declaration_specifiers -> storage_class_specifier .
    (31) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for REGISTER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for UNSIGNED resolved as shift
  ! shift/reduce conflict for TYPE_NAME resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for UNION resolved as shift
    SEMI            reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    MUL             reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    LP              reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    LBRACK          reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    RP              reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    LBRACE          reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         reduce using rule 30 (declaration_specifiers -> storage_class_specifier .)
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

  ! EXTERN          [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! STATIC          [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! AUTO            [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! REGISTER        [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! VOID            [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! CHAR            [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! SHORT           [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! INT             [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! LONG            [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! FLOAT           [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! DOUBLE          [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! SIGNED          [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! UNSIGNED        [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! TYPE_NAME       [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! ENUM            [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! STRUCT          [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]
  ! UNION           [ reduce using rule 30 (declaration_specifiers -> storage_class_specifier .) ]

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 46

state 2

    (72) type_specifier -> SHORT .

    EXTERN          reduce using rule 72 (type_specifier -> SHORT .)
    STATIC          reduce using rule 72 (type_specifier -> SHORT .)
    AUTO            reduce using rule 72 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 72 (type_specifier -> SHORT .)
    VOID            reduce using rule 72 (type_specifier -> SHORT .)
    CHAR            reduce using rule 72 (type_specifier -> SHORT .)
    SHORT           reduce using rule 72 (type_specifier -> SHORT .)
    INT             reduce using rule 72 (type_specifier -> SHORT .)
    LONG            reduce using rule 72 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 72 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 72 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 72 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 72 (type_specifier -> SHORT .)
    TYPE_NAME       reduce using rule 72 (type_specifier -> SHORT .)
    ENUM            reduce using rule 72 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 72 (type_specifier -> SHORT .)
    UNION           reduce using rule 72 (type_specifier -> SHORT .)
    SEMI            reduce using rule 72 (type_specifier -> SHORT .)
    MUL             reduce using rule 72 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 72 (type_specifier -> SHORT .)
    LP              reduce using rule 72 (type_specifier -> SHORT .)
    LBRACK          reduce using rule 72 (type_specifier -> SHORT .)
    RP              reduce using rule 72 (type_specifier -> SHORT .)
    COLON           reduce using rule 72 (type_specifier -> SHORT .)
    COMMA           reduce using rule 72 (type_specifier -> SHORT .)
    LBRACE          reduce using rule 72 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 72 (type_specifier -> SHORT .)


state 3

    (79) type_specifier -> struct_or_union_specifier .

    EXTERN          reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    TYPE_NAME       reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    MUL             reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    LP              reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    LBRACK          reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    RP              reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    LBRACE          reduce using rule 79 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 79 (type_specifier -> struct_or_union_specifier .)


state 4

    (70) type_specifier -> VOID .

    EXTERN          reduce using rule 70 (type_specifier -> VOID .)
    STATIC          reduce using rule 70 (type_specifier -> VOID .)
    AUTO            reduce using rule 70 (type_specifier -> VOID .)
    REGISTER        reduce using rule 70 (type_specifier -> VOID .)
    VOID            reduce using rule 70 (type_specifier -> VOID .)
    CHAR            reduce using rule 70 (type_specifier -> VOID .)
    SHORT           reduce using rule 70 (type_specifier -> VOID .)
    INT             reduce using rule 70 (type_specifier -> VOID .)
    LONG            reduce using rule 70 (type_specifier -> VOID .)
    FLOAT           reduce using rule 70 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 70 (type_specifier -> VOID .)
    SIGNED          reduce using rule 70 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 70 (type_specifier -> VOID .)
    TYPE_NAME       reduce using rule 70 (type_specifier -> VOID .)
    ENUM            reduce using rule 70 (type_specifier -> VOID .)
    STRUCT          reduce using rule 70 (type_specifier -> VOID .)
    UNION           reduce using rule 70 (type_specifier -> VOID .)
    SEMI            reduce using rule 70 (type_specifier -> VOID .)
    MUL             reduce using rule 70 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 70 (type_specifier -> VOID .)
    LP              reduce using rule 70 (type_specifier -> VOID .)
    LBRACK          reduce using rule 70 (type_specifier -> VOID .)
    RP              reduce using rule 70 (type_specifier -> VOID .)
    COLON           reduce using rule 70 (type_specifier -> VOID .)
    COMMA           reduce using rule 70 (type_specifier -> VOID .)
    LBRACE          reduce using rule 70 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 70 (type_specifier -> VOID .)


state 5

    (27) protocol_declaration -> PROTOCOL . protocol_name interface_declaration_list END
    (28) protocol_declaration -> PROTOCOL . protocol_name protocol_reference_list interface_declaration_list END
    (63) protocol_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 48

    protocol_name                  shift and go to state 47

state 6

    (110) struct_or_union_specifier -> struct_or_union . IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 49
    LBRACE          shift and go to state 50


state 7

    (71) type_specifier -> CHAR .

    EXTERN          reduce using rule 71 (type_specifier -> CHAR .)
    STATIC          reduce using rule 71 (type_specifier -> CHAR .)
    AUTO            reduce using rule 71 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 71 (type_specifier -> CHAR .)
    VOID            reduce using rule 71 (type_specifier -> CHAR .)
    CHAR            reduce using rule 71 (type_specifier -> CHAR .)
    SHORT           reduce using rule 71 (type_specifier -> CHAR .)
    INT             reduce using rule 71 (type_specifier -> CHAR .)
    LONG            reduce using rule 71 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 71 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 71 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 71 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 71 (type_specifier -> CHAR .)
    TYPE_NAME       reduce using rule 71 (type_specifier -> CHAR .)
    ENUM            reduce using rule 71 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 71 (type_specifier -> CHAR .)
    UNION           reduce using rule 71 (type_specifier -> CHAR .)
    SEMI            reduce using rule 71 (type_specifier -> CHAR .)
    MUL             reduce using rule 71 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 71 (type_specifier -> CHAR .)
    LP              reduce using rule 71 (type_specifier -> CHAR .)
    LBRACK          reduce using rule 71 (type_specifier -> CHAR .)
    RP              reduce using rule 71 (type_specifier -> CHAR .)
    COLON           reduce using rule 71 (type_specifier -> CHAR .)
    COMMA           reduce using rule 71 (type_specifier -> CHAR .)
    LBRACE          reduce using rule 71 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 71 (type_specifier -> CHAR .)


state 8

    (16) declaration -> type_declaration . SEMI

    SEMI            shift and go to state 51


state 9

    (7) external_declaration -> category_interface .

    INTERFACE       reduce using rule 7 (external_declaration -> category_interface .)
    IMPLEMENTATION  reduce using rule 7 (external_declaration -> category_interface .)
    PROTOCOL        reduce using rule 7 (external_declaration -> category_interface .)
    CLASS           reduce using rule 7 (external_declaration -> category_interface .)
    TYPEDEF         reduce using rule 7 (external_declaration -> category_interface .)
    EXTERN          reduce using rule 7 (external_declaration -> category_interface .)
    STATIC          reduce using rule 7 (external_declaration -> category_interface .)
    AUTO            reduce using rule 7 (external_declaration -> category_interface .)
    REGISTER        reduce using rule 7 (external_declaration -> category_interface .)
    VOID            reduce using rule 7 (external_declaration -> category_interface .)
    CHAR            reduce using rule 7 (external_declaration -> category_interface .)
    SHORT           reduce using rule 7 (external_declaration -> category_interface .)
    INT             reduce using rule 7 (external_declaration -> category_interface .)
    LONG            reduce using rule 7 (external_declaration -> category_interface .)
    FLOAT           reduce using rule 7 (external_declaration -> category_interface .)
    DOUBLE          reduce using rule 7 (external_declaration -> category_interface .)
    SIGNED          reduce using rule 7 (external_declaration -> category_interface .)
    UNSIGNED        reduce using rule 7 (external_declaration -> category_interface .)
    TYPE_NAME       reduce using rule 7 (external_declaration -> category_interface .)
    MUL             reduce using rule 7 (external_declaration -> category_interface .)
    IDENTIFIER      reduce using rule 7 (external_declaration -> category_interface .)
    LP              reduce using rule 7 (external_declaration -> category_interface .)
    ENUM            reduce using rule 7 (external_declaration -> category_interface .)
    STRUCT          reduce using rule 7 (external_declaration -> category_interface .)
    UNION           reduce using rule 7 (external_declaration -> category_interface .)
    $end            reduce using rule 7 (external_declaration -> category_interface .)


state 10

    (67) storage_class_specifier -> STATIC .

    EXTERN          reduce using rule 67 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 67 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 67 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 67 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 67 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 67 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 67 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 67 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 67 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 67 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 67 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 67 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 67 (storage_class_specifier -> STATIC .)
    TYPE_NAME       reduce using rule 67 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 67 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 67 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 67 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 67 (storage_class_specifier -> STATIC .)
    MUL             reduce using rule 67 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 67 (storage_class_specifier -> STATIC .)
    LP              reduce using rule 67 (storage_class_specifier -> STATIC .)
    LBRACK          reduce using rule 67 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 67 (storage_class_specifier -> STATIC .)
    LBRACE          reduce using rule 67 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 67 (storage_class_specifier -> STATIC .)
    RP              reduce using rule 67 (storage_class_specifier -> STATIC .)


state 11

    (32) declaration_specifiers -> type_specifier .
    (33) declaration_specifiers -> type_specifier . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for REGISTER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for UNSIGNED resolved as shift
  ! shift/reduce conflict for TYPE_NAME resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for UNION resolved as shift
    SEMI            reduce using rule 32 (declaration_specifiers -> type_specifier .)
    MUL             reduce using rule 32 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 32 (declaration_specifiers -> type_specifier .)
    LP              reduce using rule 32 (declaration_specifiers -> type_specifier .)
    LBRACK          reduce using rule 32 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 32 (declaration_specifiers -> type_specifier .)
    RP              reduce using rule 32 (declaration_specifiers -> type_specifier .)
    LBRACE          reduce using rule 32 (declaration_specifiers -> type_specifier .)
    TYPEDEF         reduce using rule 32 (declaration_specifiers -> type_specifier .)
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

  ! EXTERN          [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! STATIC          [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! AUTO            [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! REGISTER        [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! VOID            [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! CHAR            [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! SHORT           [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! INT             [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! LONG            [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! FLOAT           [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! DOUBLE          [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! SIGNED          [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! UNSIGNED        [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! TYPE_NAME       [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! ENUM            [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! STRUCT          [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]
  ! UNION           [ reduce using rule 32 (declaration_specifiers -> type_specifier .) ]

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 52

state 12

    (82) pointer -> MUL .
    (83) pointer -> MUL . pointer
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer

    IDENTIFIER      reduce using rule 82 (pointer -> MUL .)
    LP              reduce using rule 82 (pointer -> MUL .)
    LBRACK          reduce using rule 82 (pointer -> MUL .)
    RP              reduce using rule 82 (pointer -> MUL .)
    COMMA           reduce using rule 82 (pointer -> MUL .)
    SEMI            reduce using rule 82 (pointer -> MUL .)
    LBRACE          reduce using rule 82 (pointer -> MUL .)
    TYPEDEF         reduce using rule 82 (pointer -> MUL .)
    EXTERN          reduce using rule 82 (pointer -> MUL .)
    STATIC          reduce using rule 82 (pointer -> MUL .)
    AUTO            reduce using rule 82 (pointer -> MUL .)
    REGISTER        reduce using rule 82 (pointer -> MUL .)
    VOID            reduce using rule 82 (pointer -> MUL .)
    CHAR            reduce using rule 82 (pointer -> MUL .)
    SHORT           reduce using rule 82 (pointer -> MUL .)
    INT             reduce using rule 82 (pointer -> MUL .)
    LONG            reduce using rule 82 (pointer -> MUL .)
    FLOAT           reduce using rule 82 (pointer -> MUL .)
    DOUBLE          reduce using rule 82 (pointer -> MUL .)
    SIGNED          reduce using rule 82 (pointer -> MUL .)
    UNSIGNED        reduce using rule 82 (pointer -> MUL .)
    TYPE_NAME       reduce using rule 82 (pointer -> MUL .)
    ENUM            reduce using rule 82 (pointer -> MUL .)
    STRUCT          reduce using rule 82 (pointer -> MUL .)
    UNION           reduce using rule 82 (pointer -> MUL .)
    MUL             shift and go to state 12

    pointer                        shift and go to state 53

state 13

    (66) storage_class_specifier -> EXTERN .

    EXTERN          reduce using rule 66 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 66 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 66 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 66 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 66 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 66 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 66 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 66 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 66 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 66 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 66 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 66 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 66 (storage_class_specifier -> EXTERN .)
    TYPE_NAME       reduce using rule 66 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 66 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 66 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 66 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 66 (storage_class_specifier -> EXTERN .)
    MUL             reduce using rule 66 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 66 (storage_class_specifier -> EXTERN .)
    LP              reduce using rule 66 (storage_class_specifier -> EXTERN .)
    LBRACK          reduce using rule 66 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 66 (storage_class_specifier -> EXTERN .)
    LBRACE          reduce using rule 66 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 66 (storage_class_specifier -> EXTERN .)
    RP              reduce using rule 66 (storage_class_specifier -> EXTERN .)


state 14

    (6) external_declaration -> class_implementation .

    INTERFACE       reduce using rule 6 (external_declaration -> class_implementation .)
    IMPLEMENTATION  reduce using rule 6 (external_declaration -> class_implementation .)
    PROTOCOL        reduce using rule 6 (external_declaration -> class_implementation .)
    CLASS           reduce using rule 6 (external_declaration -> class_implementation .)
    TYPEDEF         reduce using rule 6 (external_declaration -> class_implementation .)
    EXTERN          reduce using rule 6 (external_declaration -> class_implementation .)
    STATIC          reduce using rule 6 (external_declaration -> class_implementation .)
    AUTO            reduce using rule 6 (external_declaration -> class_implementation .)
    REGISTER        reduce using rule 6 (external_declaration -> class_implementation .)
    VOID            reduce using rule 6 (external_declaration -> class_implementation .)
    CHAR            reduce using rule 6 (external_declaration -> class_implementation .)
    SHORT           reduce using rule 6 (external_declaration -> class_implementation .)
    INT             reduce using rule 6 (external_declaration -> class_implementation .)
    LONG            reduce using rule 6 (external_declaration -> class_implementation .)
    FLOAT           reduce using rule 6 (external_declaration -> class_implementation .)
    DOUBLE          reduce using rule 6 (external_declaration -> class_implementation .)
    SIGNED          reduce using rule 6 (external_declaration -> class_implementation .)
    UNSIGNED        reduce using rule 6 (external_declaration -> class_implementation .)
    TYPE_NAME       reduce using rule 6 (external_declaration -> class_implementation .)
    MUL             reduce using rule 6 (external_declaration -> class_implementation .)
    IDENTIFIER      reduce using rule 6 (external_declaration -> class_implementation .)
    LP              reduce using rule 6 (external_declaration -> class_implementation .)
    ENUM            reduce using rule 6 (external_declaration -> class_implementation .)
    STRUCT          reduce using rule 6 (external_declaration -> class_implementation .)
    UNION           reduce using rule 6 (external_declaration -> class_implementation .)
    $end            reduce using rule 6 (external_declaration -> class_implementation .)


state 15

    (81) type_specifier -> TYPE_NAME .

    EXTERN          reduce using rule 81 (type_specifier -> TYPE_NAME .)
    STATIC          reduce using rule 81 (type_specifier -> TYPE_NAME .)
    AUTO            reduce using rule 81 (type_specifier -> TYPE_NAME .)
    REGISTER        reduce using rule 81 (type_specifier -> TYPE_NAME .)
    VOID            reduce using rule 81 (type_specifier -> TYPE_NAME .)
    CHAR            reduce using rule 81 (type_specifier -> TYPE_NAME .)
    SHORT           reduce using rule 81 (type_specifier -> TYPE_NAME .)
    INT             reduce using rule 81 (type_specifier -> TYPE_NAME .)
    LONG            reduce using rule 81 (type_specifier -> TYPE_NAME .)
    FLOAT           reduce using rule 81 (type_specifier -> TYPE_NAME .)
    DOUBLE          reduce using rule 81 (type_specifier -> TYPE_NAME .)
    SIGNED          reduce using rule 81 (type_specifier -> TYPE_NAME .)
    UNSIGNED        reduce using rule 81 (type_specifier -> TYPE_NAME .)
    TYPE_NAME       reduce using rule 81 (type_specifier -> TYPE_NAME .)
    ENUM            reduce using rule 81 (type_specifier -> TYPE_NAME .)
    STRUCT          reduce using rule 81 (type_specifier -> TYPE_NAME .)
    UNION           reduce using rule 81 (type_specifier -> TYPE_NAME .)
    SEMI            reduce using rule 81 (type_specifier -> TYPE_NAME .)
    MUL             reduce using rule 81 (type_specifier -> TYPE_NAME .)
    IDENTIFIER      reduce using rule 81 (type_specifier -> TYPE_NAME .)
    LP              reduce using rule 81 (type_specifier -> TYPE_NAME .)
    LBRACK          reduce using rule 81 (type_specifier -> TYPE_NAME .)
    RP              reduce using rule 81 (type_specifier -> TYPE_NAME .)
    COLON           reduce using rule 81 (type_specifier -> TYPE_NAME .)
    COMMA           reduce using rule 81 (type_specifier -> TYPE_NAME .)
    LBRACE          reduce using rule 81 (type_specifier -> TYPE_NAME .)
    TYPEDEF         reduce using rule 81 (type_specifier -> TYPE_NAME .)


state 16

    (34) declarator -> pointer . direct_declarator
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP

    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24

    direct_declarator              shift and go to state 54

state 17

    (5) external_declaration -> class_interface .

    INTERFACE       reduce using rule 5 (external_declaration -> class_interface .)
    IMPLEMENTATION  reduce using rule 5 (external_declaration -> class_interface .)
    PROTOCOL        reduce using rule 5 (external_declaration -> class_interface .)
    CLASS           reduce using rule 5 (external_declaration -> class_interface .)
    TYPEDEF         reduce using rule 5 (external_declaration -> class_interface .)
    EXTERN          reduce using rule 5 (external_declaration -> class_interface .)
    STATIC          reduce using rule 5 (external_declaration -> class_interface .)
    AUTO            reduce using rule 5 (external_declaration -> class_interface .)
    REGISTER        reduce using rule 5 (external_declaration -> class_interface .)
    VOID            reduce using rule 5 (external_declaration -> class_interface .)
    CHAR            reduce using rule 5 (external_declaration -> class_interface .)
    SHORT           reduce using rule 5 (external_declaration -> class_interface .)
    INT             reduce using rule 5 (external_declaration -> class_interface .)
    LONG            reduce using rule 5 (external_declaration -> class_interface .)
    FLOAT           reduce using rule 5 (external_declaration -> class_interface .)
    DOUBLE          reduce using rule 5 (external_declaration -> class_interface .)
    SIGNED          reduce using rule 5 (external_declaration -> class_interface .)
    UNSIGNED        reduce using rule 5 (external_declaration -> class_interface .)
    TYPE_NAME       reduce using rule 5 (external_declaration -> class_interface .)
    MUL             reduce using rule 5 (external_declaration -> class_interface .)
    IDENTIFIER      reduce using rule 5 (external_declaration -> class_interface .)
    LP              reduce using rule 5 (external_declaration -> class_interface .)
    ENUM            reduce using rule 5 (external_declaration -> class_interface .)
    STRUCT          reduce using rule 5 (external_declaration -> class_interface .)
    UNION           reduce using rule 5 (external_declaration -> class_interface .)
    $end            reduce using rule 5 (external_declaration -> class_interface .)


state 18

    (1) translation_unit -> external_declaration .

    INTERFACE       reduce using rule 1 (translation_unit -> external_declaration .)
    IMPLEMENTATION  reduce using rule 1 (translation_unit -> external_declaration .)
    PROTOCOL        reduce using rule 1 (translation_unit -> external_declaration .)
    CLASS           reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    TYPE_NAME       reduce using rule 1 (translation_unit -> external_declaration .)
    MUL             reduce using rule 1 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 1 (translation_unit -> external_declaration .)
    LP              reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 19

    (108) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 108 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 108 (struct_or_union -> STRUCT .)


state 20

    (22) class_implementation -> IMPLEMENTATION . class_name instance_variables implementation_definition_list END
    (23) class_implementation -> IMPLEMENTATION . class_name COLON superclass_name instance_variables implementation_definition_list END
    (26) category_implementation -> IMPLEMENTATION . class_name ( category_name ) implementation_definition_list END
    (45) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 56

    class_name                     shift and go to state 55

state 21

    (8) external_declaration -> category_implementation .

    INTERFACE       reduce using rule 8 (external_declaration -> category_implementation .)
    IMPLEMENTATION  reduce using rule 8 (external_declaration -> category_implementation .)
    PROTOCOL        reduce using rule 8 (external_declaration -> category_implementation .)
    CLASS           reduce using rule 8 (external_declaration -> category_implementation .)
    TYPEDEF         reduce using rule 8 (external_declaration -> category_implementation .)
    EXTERN          reduce using rule 8 (external_declaration -> category_implementation .)
    STATIC          reduce using rule 8 (external_declaration -> category_implementation .)
    AUTO            reduce using rule 8 (external_declaration -> category_implementation .)
    REGISTER        reduce using rule 8 (external_declaration -> category_implementation .)
    VOID            reduce using rule 8 (external_declaration -> category_implementation .)
    CHAR            reduce using rule 8 (external_declaration -> category_implementation .)
    SHORT           reduce using rule 8 (external_declaration -> category_implementation .)
    INT             reduce using rule 8 (external_declaration -> category_implementation .)
    LONG            reduce using rule 8 (external_declaration -> category_implementation .)
    FLOAT           reduce using rule 8 (external_declaration -> category_implementation .)
    DOUBLE          reduce using rule 8 (external_declaration -> category_implementation .)
    SIGNED          reduce using rule 8 (external_declaration -> category_implementation .)
    UNSIGNED        reduce using rule 8 (external_declaration -> category_implementation .)
    TYPE_NAME       reduce using rule 8 (external_declaration -> category_implementation .)
    MUL             reduce using rule 8 (external_declaration -> category_implementation .)
    IDENTIFIER      reduce using rule 8 (external_declaration -> category_implementation .)
    LP              reduce using rule 8 (external_declaration -> category_implementation .)
    ENUM            reduce using rule 8 (external_declaration -> category_implementation .)
    STRUCT          reduce using rule 8 (external_declaration -> category_implementation .)
    UNION           reduce using rule 8 (external_declaration -> category_implementation .)
    $end            reduce using rule 8 (external_declaration -> category_implementation .)


state 22

    (69) storage_class_specifier -> REGISTER .

    EXTERN          reduce using rule 69 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 69 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 69 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 69 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 69 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 69 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 69 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 69 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 69 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 69 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 69 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 69 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 69 (storage_class_specifier -> REGISTER .)
    TYPE_NAME       reduce using rule 69 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 69 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 69 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 69 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 69 (storage_class_specifier -> REGISTER .)
    MUL             reduce using rule 69 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 69 (storage_class_specifier -> REGISTER .)
    LP              reduce using rule 69 (storage_class_specifier -> REGISTER .)
    LBRACK          reduce using rule 69 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 69 (storage_class_specifier -> REGISTER .)
    LBRACE          reduce using rule 69 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 69 (storage_class_specifier -> REGISTER .)
    RP              reduce using rule 69 (storage_class_specifier -> REGISTER .)


state 23

    (78) type_specifier -> UNSIGNED .

    EXTERN          reduce using rule 78 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 78 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 78 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 78 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 78 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 78 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 78 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 78 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 78 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 78 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 78 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 78 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 78 (type_specifier -> UNSIGNED .)
    TYPE_NAME       reduce using rule 78 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 78 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 78 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 78 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 78 (type_specifier -> UNSIGNED .)
    MUL             reduce using rule 78 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 78 (type_specifier -> UNSIGNED .)
    LP              reduce using rule 78 (type_specifier -> UNSIGNED .)
    LBRACK          reduce using rule 78 (type_specifier -> UNSIGNED .)
    RP              reduce using rule 78 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 78 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 78 (type_specifier -> UNSIGNED .)
    LBRACE          reduce using rule 78 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 78 (type_specifier -> UNSIGNED .)


state 24

    (85) direct_declarator -> LP . declarator RP
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP

    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24

    direct_declarator              shift and go to state 34
    declarator                     shift and go to state 57
    pointer                        shift and go to state 16

state 25

    (9) external_declaration -> protocol_declaration .

    INTERFACE       reduce using rule 9 (external_declaration -> protocol_declaration .)
    IMPLEMENTATION  reduce using rule 9 (external_declaration -> protocol_declaration .)
    PROTOCOL        reduce using rule 9 (external_declaration -> protocol_declaration .)
    CLASS           reduce using rule 9 (external_declaration -> protocol_declaration .)
    TYPEDEF         reduce using rule 9 (external_declaration -> protocol_declaration .)
    EXTERN          reduce using rule 9 (external_declaration -> protocol_declaration .)
    STATIC          reduce using rule 9 (external_declaration -> protocol_declaration .)
    AUTO            reduce using rule 9 (external_declaration -> protocol_declaration .)
    REGISTER        reduce using rule 9 (external_declaration -> protocol_declaration .)
    VOID            reduce using rule 9 (external_declaration -> protocol_declaration .)
    CHAR            reduce using rule 9 (external_declaration -> protocol_declaration .)
    SHORT           reduce using rule 9 (external_declaration -> protocol_declaration .)
    INT             reduce using rule 9 (external_declaration -> protocol_declaration .)
    LONG            reduce using rule 9 (external_declaration -> protocol_declaration .)
    FLOAT           reduce using rule 9 (external_declaration -> protocol_declaration .)
    DOUBLE          reduce using rule 9 (external_declaration -> protocol_declaration .)
    SIGNED          reduce using rule 9 (external_declaration -> protocol_declaration .)
    UNSIGNED        reduce using rule 9 (external_declaration -> protocol_declaration .)
    TYPE_NAME       reduce using rule 9 (external_declaration -> protocol_declaration .)
    MUL             reduce using rule 9 (external_declaration -> protocol_declaration .)
    IDENTIFIER      reduce using rule 9 (external_declaration -> protocol_declaration .)
    LP              reduce using rule 9 (external_declaration -> protocol_declaration .)
    ENUM            reduce using rule 9 (external_declaration -> protocol_declaration .)
    STRUCT          reduce using rule 9 (external_declaration -> protocol_declaration .)
    UNION           reduce using rule 9 (external_declaration -> protocol_declaration .)
    $end            reduce using rule 9 (external_declaration -> protocol_declaration .)


state 26

    (84) direct_declarator -> IDENTIFIER .

    LBRACK          reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    LP              reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    LBRACE          reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    TYPE_NAME       reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    RP              reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    SEMI            reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 84 (direct_declarator -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 84 (direct_declarator -> IDENTIFIER .)


state 27

    (109) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 109 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 109 (struct_or_union -> UNION .)


state 28

    (29) class_declaration_list -> CLASS . class_list
    (64) class_list -> . class_name
    (65) class_list -> . class_list COMMA class_name
    (45) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 56

    class_name                     shift and go to state 58
    class_list                     shift and go to state 59

state 29

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) external_declaration -> . class_interface
    (6) external_declaration -> . class_implementation
    (7) external_declaration -> . category_interface
    (8) external_declaration -> . category_implementation
    (9) external_declaration -> . protocol_declaration
    (10) external_declaration -> . class_declaration_list
    (11) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (12) function_definition -> . declaration_specifiers declarator compound_statement
    (13) function_definition -> . declarator declaration_list compound_statement
    (14) function_definition -> . declarator compound_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (18) class_interface -> . INTERFACE class_name instance_variables interface_declaration_list END
    (19) class_interface -> . INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END
    (20) class_interface -> . INTERFACE protocol_reference_list instance_variables interface_declaration_list END
    (21) class_interface -> . INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END
    (22) class_implementation -> . IMPLEMENTATION class_name instance_variables implementation_definition_list END
    (23) class_implementation -> . IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END
    (24) category_interface -> . INTERFACE class_name ( category_name ) interface_declaration_list END
    (25) category_interface -> . INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END
    (26) category_implementation -> . IMPLEMENTATION class_name ( category_name ) implementation_definition_list END
    (27) protocol_declaration -> . PROTOCOL protocol_name interface_declaration_list END
    (28) protocol_declaration -> . PROTOCOL protocol_name protocol_reference_list interface_declaration_list END
    (29) class_declaration_list -> . CLASS class_list
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    INTERFACE       shift and go to state 44
    IMPLEMENTATION  shift and go to state 20
    PROTOCOL        shift and go to state 5
    CLASS           shift and go to state 28
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    category_interface             shift and go to state 9
    type_specifier                 shift and go to state 11
    class_implementation           shift and go to state 14
    pointer                        shift and go to state 16
    class_interface                shift and go to state 17
    external_declaration           shift and go to state 60
    category_implementation        shift and go to state 21
    protocol_declaration           shift and go to state 25
    struct_or_union                shift and go to state 6
    direct_declarator              shift and go to state 34
    class_declaration_list         shift and go to state 36
    declaration_specifiers         shift and go to state 37
    declaration                    shift and go to state 38
    function_definition            shift and go to state 39
    enum_specifier                 shift and go to state 35
    declarator                     shift and go to state 43

state 30

    (42) type_declaration -> TYPEDEF . declaration_specifiers type_declarator
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 61

state 31

    (113) enum_specifier -> ENUM . LBRACE enumerator_list RBRACE
    (114) enum_specifier -> ENUM . IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> ENUM . IDENTIFIER

    LBRACE          shift and go to state 63
    IDENTIFIER      shift and go to state 62


state 32

    (76) type_specifier -> DOUBLE .

    EXTERN          reduce using rule 76 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 76 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 76 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 76 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 76 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 76 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 76 (type_specifier -> DOUBLE .)
    INT             reduce using rule 76 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 76 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 76 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 76 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 76 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 76 (type_specifier -> DOUBLE .)
    TYPE_NAME       reduce using rule 76 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 76 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 76 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 76 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 76 (type_specifier -> DOUBLE .)
    MUL             reduce using rule 76 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 76 (type_specifier -> DOUBLE .)
    LP              reduce using rule 76 (type_specifier -> DOUBLE .)
    LBRACK          reduce using rule 76 (type_specifier -> DOUBLE .)
    RP              reduce using rule 76 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 76 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 76 (type_specifier -> DOUBLE .)
    LBRACE          reduce using rule 76 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 76 (type_specifier -> DOUBLE .)


state 33

    (68) storage_class_specifier -> AUTO .

    EXTERN          reduce using rule 68 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 68 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 68 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 68 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 68 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 68 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 68 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 68 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 68 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 68 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 68 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 68 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 68 (storage_class_specifier -> AUTO .)
    TYPE_NAME       reduce using rule 68 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 68 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 68 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 68 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 68 (storage_class_specifier -> AUTO .)
    MUL             reduce using rule 68 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 68 (storage_class_specifier -> AUTO .)
    LP              reduce using rule 68 (storage_class_specifier -> AUTO .)
    LBRACK          reduce using rule 68 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 68 (storage_class_specifier -> AUTO .)
    LBRACE          reduce using rule 68 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 68 (storage_class_specifier -> AUTO .)
    RP              reduce using rule 68 (storage_class_specifier -> AUTO .)


state 34

    (35) declarator -> direct_declarator .
    (86) direct_declarator -> direct_declarator . LBRACK constant_expression RBRACK
    (87) direct_declarator -> direct_declarator . LBRACK RBRACK
    (88) direct_declarator -> direct_declarator . LP parameter_type_list RP
    (89) direct_declarator -> direct_declarator . LP identifier_list RP
    (90) direct_declarator -> direct_declarator . LP RP

    COMMA           reduce using rule 35 (declarator -> direct_declarator .)
    RP              reduce using rule 35 (declarator -> direct_declarator .)
    SEMI            reduce using rule 35 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 35 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 35 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 35 (declarator -> direct_declarator .)
    STATIC          reduce using rule 35 (declarator -> direct_declarator .)
    AUTO            reduce using rule 35 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 35 (declarator -> direct_declarator .)
    VOID            reduce using rule 35 (declarator -> direct_declarator .)
    CHAR            reduce using rule 35 (declarator -> direct_declarator .)
    SHORT           reduce using rule 35 (declarator -> direct_declarator .)
    INT             reduce using rule 35 (declarator -> direct_declarator .)
    LONG            reduce using rule 35 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 35 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 35 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 35 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 35 (declarator -> direct_declarator .)
    TYPE_NAME       reduce using rule 35 (declarator -> direct_declarator .)
    ENUM            reduce using rule 35 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 35 (declarator -> direct_declarator .)
    UNION           reduce using rule 35 (declarator -> direct_declarator .)
    COLON           reduce using rule 35 (declarator -> direct_declarator .)
    ASSIGNMENT      reduce using rule 35 (declarator -> direct_declarator .)
    LBRACK          shift and go to state 64
    LP              shift and go to state 65


state 35

    (80) type_specifier -> enum_specifier .

    EXTERN          reduce using rule 80 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 80 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 80 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 80 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 80 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 80 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 80 (type_specifier -> enum_specifier .)
    INT             reduce using rule 80 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 80 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 80 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 80 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 80 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 80 (type_specifier -> enum_specifier .)
    TYPE_NAME       reduce using rule 80 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 80 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 80 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 80 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 80 (type_specifier -> enum_specifier .)
    MUL             reduce using rule 80 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 80 (type_specifier -> enum_specifier .)
    LP              reduce using rule 80 (type_specifier -> enum_specifier .)
    LBRACK          reduce using rule 80 (type_specifier -> enum_specifier .)
    RP              reduce using rule 80 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 80 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 80 (type_specifier -> enum_specifier .)
    LBRACE          reduce using rule 80 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 80 (type_specifier -> enum_specifier .)


state 36

    (10) external_declaration -> class_declaration_list .

    INTERFACE       reduce using rule 10 (external_declaration -> class_declaration_list .)
    IMPLEMENTATION  reduce using rule 10 (external_declaration -> class_declaration_list .)
    PROTOCOL        reduce using rule 10 (external_declaration -> class_declaration_list .)
    CLASS           reduce using rule 10 (external_declaration -> class_declaration_list .)
    TYPEDEF         reduce using rule 10 (external_declaration -> class_declaration_list .)
    EXTERN          reduce using rule 10 (external_declaration -> class_declaration_list .)
    STATIC          reduce using rule 10 (external_declaration -> class_declaration_list .)
    AUTO            reduce using rule 10 (external_declaration -> class_declaration_list .)
    REGISTER        reduce using rule 10 (external_declaration -> class_declaration_list .)
    VOID            reduce using rule 10 (external_declaration -> class_declaration_list .)
    CHAR            reduce using rule 10 (external_declaration -> class_declaration_list .)
    SHORT           reduce using rule 10 (external_declaration -> class_declaration_list .)
    INT             reduce using rule 10 (external_declaration -> class_declaration_list .)
    LONG            reduce using rule 10 (external_declaration -> class_declaration_list .)
    FLOAT           reduce using rule 10 (external_declaration -> class_declaration_list .)
    DOUBLE          reduce using rule 10 (external_declaration -> class_declaration_list .)
    SIGNED          reduce using rule 10 (external_declaration -> class_declaration_list .)
    UNSIGNED        reduce using rule 10 (external_declaration -> class_declaration_list .)
    TYPE_NAME       reduce using rule 10 (external_declaration -> class_declaration_list .)
    MUL             reduce using rule 10 (external_declaration -> class_declaration_list .)
    IDENTIFIER      reduce using rule 10 (external_declaration -> class_declaration_list .)
    LP              reduce using rule 10 (external_declaration -> class_declaration_list .)
    ENUM            reduce using rule 10 (external_declaration -> class_declaration_list .)
    STRUCT          reduce using rule 10 (external_declaration -> class_declaration_list .)
    UNION           reduce using rule 10 (external_declaration -> class_declaration_list .)
    $end            reduce using rule 10 (external_declaration -> class_declaration_list .)


state 37

    (11) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (12) function_definition -> declaration_specifiers . declarator compound_statement
    (15) declaration -> declaration_specifiers . SEMI
    (17) declaration -> declaration_specifiers . init_declarator_list SEMI
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (43) init_declarator_list -> . init_declarator
    (44) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (95) init_declarator -> . declarator
    (96) init_declarator -> . declarator ASSIGNMENT initializer

    SEMI            shift and go to state 66
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24

    direct_declarator              shift and go to state 34
    init_declarator                shift and go to state 67
    init_declarator_list           shift and go to state 68
    declarator                     shift and go to state 69
    pointer                        shift and go to state 16

state 38

    (4) external_declaration -> declaration .

    INTERFACE       reduce using rule 4 (external_declaration -> declaration .)
    IMPLEMENTATION  reduce using rule 4 (external_declaration -> declaration .)
    PROTOCOL        reduce using rule 4 (external_declaration -> declaration .)
    CLASS           reduce using rule 4 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 4 (external_declaration -> declaration .)
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    AUTO            reduce using rule 4 (external_declaration -> declaration .)
    REGISTER        reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    SHORT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    LONG            reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (external_declaration -> declaration .)
    SIGNED          reduce using rule 4 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (external_declaration -> declaration .)
    TYPE_NAME       reduce using rule 4 (external_declaration -> declaration .)
    MUL             reduce using rule 4 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 4 (external_declaration -> declaration .)
    LP              reduce using rule 4 (external_declaration -> declaration .)
    ENUM            reduce using rule 4 (external_declaration -> declaration .)
    STRUCT          reduce using rule 4 (external_declaration -> declaration .)
    UNION           reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 39

    (3) external_declaration -> function_definition .

    INTERFACE       reduce using rule 3 (external_declaration -> function_definition .)
    IMPLEMENTATION  reduce using rule 3 (external_declaration -> function_definition .)
    PROTOCOL        reduce using rule 3 (external_declaration -> function_definition .)
    CLASS           reduce using rule 3 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 3 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (external_declaration -> function_definition .)
    STATIC          reduce using rule 3 (external_declaration -> function_definition .)
    AUTO            reduce using rule 3 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 3 (external_declaration -> function_definition .)
    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    SHORT           reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    LONG            reduce using rule 3 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (external_declaration -> function_definition .)
    TYPE_NAME       reduce using rule 3 (external_declaration -> function_definition .)
    MUL             reduce using rule 3 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 3 (external_declaration -> function_definition .)
    LP              reduce using rule 3 (external_declaration -> function_definition .)
    ENUM            reduce using rule 3 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 3 (external_declaration -> function_definition .)
    UNION           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 40

    (73) type_specifier -> INT .

    EXTERN          reduce using rule 73 (type_specifier -> INT .)
    STATIC          reduce using rule 73 (type_specifier -> INT .)
    AUTO            reduce using rule 73 (type_specifier -> INT .)
    REGISTER        reduce using rule 73 (type_specifier -> INT .)
    VOID            reduce using rule 73 (type_specifier -> INT .)
    CHAR            reduce using rule 73 (type_specifier -> INT .)
    SHORT           reduce using rule 73 (type_specifier -> INT .)
    INT             reduce using rule 73 (type_specifier -> INT .)
    LONG            reduce using rule 73 (type_specifier -> INT .)
    FLOAT           reduce using rule 73 (type_specifier -> INT .)
    DOUBLE          reduce using rule 73 (type_specifier -> INT .)
    SIGNED          reduce using rule 73 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 73 (type_specifier -> INT .)
    TYPE_NAME       reduce using rule 73 (type_specifier -> INT .)
    ENUM            reduce using rule 73 (type_specifier -> INT .)
    STRUCT          reduce using rule 73 (type_specifier -> INT .)
    UNION           reduce using rule 73 (type_specifier -> INT .)
    SEMI            reduce using rule 73 (type_specifier -> INT .)
    MUL             reduce using rule 73 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 73 (type_specifier -> INT .)
    LP              reduce using rule 73 (type_specifier -> INT .)
    LBRACK          reduce using rule 73 (type_specifier -> INT .)
    RP              reduce using rule 73 (type_specifier -> INT .)
    COLON           reduce using rule 73 (type_specifier -> INT .)
    COMMA           reduce using rule 73 (type_specifier -> INT .)
    LBRACE          reduce using rule 73 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 73 (type_specifier -> INT .)


state 41

    (75) type_specifier -> FLOAT .

    EXTERN          reduce using rule 75 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 75 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 75 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 75 (type_specifier -> FLOAT .)
    VOID            reduce using rule 75 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 75 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 75 (type_specifier -> FLOAT .)
    INT             reduce using rule 75 (type_specifier -> FLOAT .)
    LONG            reduce using rule 75 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 75 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 75 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 75 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 75 (type_specifier -> FLOAT .)
    TYPE_NAME       reduce using rule 75 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 75 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 75 (type_specifier -> FLOAT .)
    UNION           reduce using rule 75 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 75 (type_specifier -> FLOAT .)
    MUL             reduce using rule 75 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 75 (type_specifier -> FLOAT .)
    LP              reduce using rule 75 (type_specifier -> FLOAT .)
    LBRACK          reduce using rule 75 (type_specifier -> FLOAT .)
    RP              reduce using rule 75 (type_specifier -> FLOAT .)
    COLON           reduce using rule 75 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 75 (type_specifier -> FLOAT .)
    LBRACE          reduce using rule 75 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 75 (type_specifier -> FLOAT .)


state 42

    (77) type_specifier -> SIGNED .

    EXTERN          reduce using rule 77 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 77 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 77 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 77 (type_specifier -> SIGNED .)
    VOID            reduce using rule 77 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 77 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 77 (type_specifier -> SIGNED .)
    INT             reduce using rule 77 (type_specifier -> SIGNED .)
    LONG            reduce using rule 77 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 77 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 77 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 77 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 77 (type_specifier -> SIGNED .)
    TYPE_NAME       reduce using rule 77 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 77 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 77 (type_specifier -> SIGNED .)
    UNION           reduce using rule 77 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 77 (type_specifier -> SIGNED .)
    MUL             reduce using rule 77 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 77 (type_specifier -> SIGNED .)
    LP              reduce using rule 77 (type_specifier -> SIGNED .)
    LBRACK          reduce using rule 77 (type_specifier -> SIGNED .)
    RP              reduce using rule 77 (type_specifier -> SIGNED .)
    COLON           reduce using rule 77 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 77 (type_specifier -> SIGNED .)
    LBRACE          reduce using rule 77 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 77 (type_specifier -> SIGNED .)


state 43

    (13) function_definition -> declarator . declaration_list compound_statement
    (14) function_definition -> declarator . compound_statement
    (36) declaration_list -> . declaration
    (37) declaration_list -> . declaration_list declaration
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 70
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_list               shift and go to state 74
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 72

state 44

    (18) class_interface -> INTERFACE . class_name instance_variables interface_declaration_list END
    (19) class_interface -> INTERFACE . class_name COLON superclass_name instance_variables interface_declaration_list END
    (20) class_interface -> INTERFACE . protocol_reference_list instance_variables interface_declaration_list END
    (21) class_interface -> INTERFACE . class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END
    (24) category_interface -> INTERFACE . class_name ( category_name ) interface_declaration_list END
    (25) category_interface -> INTERFACE . class_name ( category_name ) protocol_reference_list interface_declaration_list END
    (45) class_name -> . IDENTIFIER
    (55) protocol_reference_list -> . LT protocol_list GT

    IDENTIFIER      shift and go to state 56
    LT              shift and go to state 77

    class_name                     shift and go to state 75
    protocol_reference_list        shift and go to state 76

state 45

    (74) type_specifier -> LONG .

    EXTERN          reduce using rule 74 (type_specifier -> LONG .)
    STATIC          reduce using rule 74 (type_specifier -> LONG .)
    AUTO            reduce using rule 74 (type_specifier -> LONG .)
    REGISTER        reduce using rule 74 (type_specifier -> LONG .)
    VOID            reduce using rule 74 (type_specifier -> LONG .)
    CHAR            reduce using rule 74 (type_specifier -> LONG .)
    SHORT           reduce using rule 74 (type_specifier -> LONG .)
    INT             reduce using rule 74 (type_specifier -> LONG .)
    LONG            reduce using rule 74 (type_specifier -> LONG .)
    FLOAT           reduce using rule 74 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 74 (type_specifier -> LONG .)
    SIGNED          reduce using rule 74 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 74 (type_specifier -> LONG .)
    TYPE_NAME       reduce using rule 74 (type_specifier -> LONG .)
    ENUM            reduce using rule 74 (type_specifier -> LONG .)
    STRUCT          reduce using rule 74 (type_specifier -> LONG .)
    UNION           reduce using rule 74 (type_specifier -> LONG .)
    SEMI            reduce using rule 74 (type_specifier -> LONG .)
    MUL             reduce using rule 74 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 74 (type_specifier -> LONG .)
    LP              reduce using rule 74 (type_specifier -> LONG .)
    LBRACK          reduce using rule 74 (type_specifier -> LONG .)
    RP              reduce using rule 74 (type_specifier -> LONG .)
    COLON           reduce using rule 74 (type_specifier -> LONG .)
    COMMA           reduce using rule 74 (type_specifier -> LONG .)
    LBRACE          reduce using rule 74 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 74 (type_specifier -> LONG .)


state 46

    (31) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMI            reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    MUL             reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LP              reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LBRACK          reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RP              reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LBRACE          reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TYPEDEF         reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    EXTERN          reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    STATIC          reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    AUTO            reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    REGISTER        reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    VOID            reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    CHAR            reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    SHORT           reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    INT             reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LONG            reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    FLOAT           reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    DOUBLE          reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    SIGNED          reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    UNSIGNED        reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TYPE_NAME       reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ENUM            reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    STRUCT          reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    UNION           reduce using rule 31 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 47

    (27) protocol_declaration -> PROTOCOL protocol_name . interface_declaration_list END
    (28) protocol_declaration -> PROTOCOL protocol_name . protocol_reference_list interface_declaration_list END
    (51) interface_declaration_list -> . declaration
    (52) interface_declaration_list -> . method_declaration
    (53) interface_declaration_list -> . interface_declaration_list declaration
    (54) interface_declaration_list -> . interface_declaration_list method_declaration
    (55) protocol_reference_list -> . LT protocol_list GT
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LT              shift and go to state 77
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    instance_method_declaration    shift and go to state 81
    enum_specifier                 shift and go to state 35
    interface_declaration_list     shift and go to state 85
    method_declaration             shift and go to state 79
    struct_or_union                shift and go to state 6
    protocol_reference_list        shift and go to state 80
    type_declaration               shift and go to state 8
    type_specifier                 shift and go to state 11
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 84

state 48

    (63) protocol_name -> IDENTIFIER .

    GT              reduce using rule 63 (protocol_name -> IDENTIFIER .)
    COMMA           reduce using rule 63 (protocol_name -> IDENTIFIER .)
    LT              reduce using rule 63 (protocol_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 63 (protocol_name -> IDENTIFIER .)
    ADD             reduce using rule 63 (protocol_name -> IDENTIFIER .)
    SUB             reduce using rule 63 (protocol_name -> IDENTIFIER .)
    EXTERN          reduce using rule 63 (protocol_name -> IDENTIFIER .)
    STATIC          reduce using rule 63 (protocol_name -> IDENTIFIER .)
    AUTO            reduce using rule 63 (protocol_name -> IDENTIFIER .)
    REGISTER        reduce using rule 63 (protocol_name -> IDENTIFIER .)
    VOID            reduce using rule 63 (protocol_name -> IDENTIFIER .)
    CHAR            reduce using rule 63 (protocol_name -> IDENTIFIER .)
    SHORT           reduce using rule 63 (protocol_name -> IDENTIFIER .)
    INT             reduce using rule 63 (protocol_name -> IDENTIFIER .)
    LONG            reduce using rule 63 (protocol_name -> IDENTIFIER .)
    FLOAT           reduce using rule 63 (protocol_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 63 (protocol_name -> IDENTIFIER .)
    SIGNED          reduce using rule 63 (protocol_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 63 (protocol_name -> IDENTIFIER .)
    TYPE_NAME       reduce using rule 63 (protocol_name -> IDENTIFIER .)
    ENUM            reduce using rule 63 (protocol_name -> IDENTIFIER .)
    STRUCT          reduce using rule 63 (protocol_name -> IDENTIFIER .)
    UNION           reduce using rule 63 (protocol_name -> IDENTIFIER .)


state 49

    (110) struct_or_union_specifier -> struct_or_union IDENTIFIER . LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> struct_or_union IDENTIFIER .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 86
    VOID            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TYPE_NAME       reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    MUL             reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LP              reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMI            reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LBRACK          reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TYPEDEF         reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RP              reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)

  ! LBRACE          [ reduce using rule 112 (struct_or_union_specifier -> struct_or_union IDENTIFIER .) ]


state 50

    (111) struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE
    (97) struct_declaration_list -> . struct_declaration
    (98) struct_declaration_list -> . struct_declaration_list struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    struct_declaration             shift and go to state 89
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 90
    struct_declaration_list        shift and go to state 87

state 51

    (16) declaration -> type_declaration SEMI .

    END             reduce using rule 16 (declaration -> type_declaration SEMI .)
    TYPEDEF         reduce using rule 16 (declaration -> type_declaration SEMI .)
    ADD             reduce using rule 16 (declaration -> type_declaration SEMI .)
    SUB             reduce using rule 16 (declaration -> type_declaration SEMI .)
    EXTERN          reduce using rule 16 (declaration -> type_declaration SEMI .)
    STATIC          reduce using rule 16 (declaration -> type_declaration SEMI .)
    AUTO            reduce using rule 16 (declaration -> type_declaration SEMI .)
    REGISTER        reduce using rule 16 (declaration -> type_declaration SEMI .)
    VOID            reduce using rule 16 (declaration -> type_declaration SEMI .)
    CHAR            reduce using rule 16 (declaration -> type_declaration SEMI .)
    SHORT           reduce using rule 16 (declaration -> type_declaration SEMI .)
    INT             reduce using rule 16 (declaration -> type_declaration SEMI .)
    LONG            reduce using rule 16 (declaration -> type_declaration SEMI .)
    FLOAT           reduce using rule 16 (declaration -> type_declaration SEMI .)
    DOUBLE          reduce using rule 16 (declaration -> type_declaration SEMI .)
    SIGNED          reduce using rule 16 (declaration -> type_declaration SEMI .)
    UNSIGNED        reduce using rule 16 (declaration -> type_declaration SEMI .)
    TYPE_NAME       reduce using rule 16 (declaration -> type_declaration SEMI .)
    ENUM            reduce using rule 16 (declaration -> type_declaration SEMI .)
    STRUCT          reduce using rule 16 (declaration -> type_declaration SEMI .)
    UNION           reduce using rule 16 (declaration -> type_declaration SEMI .)
    LBRACE          reduce using rule 16 (declaration -> type_declaration SEMI .)
    MUL             reduce using rule 16 (declaration -> type_declaration SEMI .)
    IDENTIFIER      reduce using rule 16 (declaration -> type_declaration SEMI .)
    LP              reduce using rule 16 (declaration -> type_declaration SEMI .)
    RBRACE          reduce using rule 16 (declaration -> type_declaration SEMI .)
    CASE            reduce using rule 16 (declaration -> type_declaration SEMI .)
    DEFAULT         reduce using rule 16 (declaration -> type_declaration SEMI .)
    SEMI            reduce using rule 16 (declaration -> type_declaration SEMI .)
    IF              reduce using rule 16 (declaration -> type_declaration SEMI .)
    SWITCH          reduce using rule 16 (declaration -> type_declaration SEMI .)
    WHILE           reduce using rule 16 (declaration -> type_declaration SEMI .)
    DO              reduce using rule 16 (declaration -> type_declaration SEMI .)
    FOR             reduce using rule 16 (declaration -> type_declaration SEMI .)
    GOTO            reduce using rule 16 (declaration -> type_declaration SEMI .)
    CONTINUE        reduce using rule 16 (declaration -> type_declaration SEMI .)
    BREAK           reduce using rule 16 (declaration -> type_declaration SEMI .)
    RETURN          reduce using rule 16 (declaration -> type_declaration SEMI .)
    INC             reduce using rule 16 (declaration -> type_declaration SEMI .)
    DEC             reduce using rule 16 (declaration -> type_declaration SEMI .)
    SIZEOF          reduce using rule 16 (declaration -> type_declaration SEMI .)
    BITAND          reduce using rule 16 (declaration -> type_declaration SEMI .)
    TILDE           reduce using rule 16 (declaration -> type_declaration SEMI .)
    BANG            reduce using rule 16 (declaration -> type_declaration SEMI .)
    HEX_LITERAL     reduce using rule 16 (declaration -> type_declaration SEMI .)
    OCTAL_LITERAL   reduce using rule 16 (declaration -> type_declaration SEMI .)
    BINARY_LITERAL  reduce using rule 16 (declaration -> type_declaration SEMI .)
    DECIMAL_LITERAL reduce using rule 16 (declaration -> type_declaration SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 16 (declaration -> type_declaration SEMI .)
    C_STRING_LITERAL reduce using rule 16 (declaration -> type_declaration SEMI .)
    OBJC_STRING_LITERAL reduce using rule 16 (declaration -> type_declaration SEMI .)
    INTERFACE       reduce using rule 16 (declaration -> type_declaration SEMI .)
    IMPLEMENTATION  reduce using rule 16 (declaration -> type_declaration SEMI .)
    PROTOCOL        reduce using rule 16 (declaration -> type_declaration SEMI .)
    CLASS           reduce using rule 16 (declaration -> type_declaration SEMI .)
    $end            reduce using rule 16 (declaration -> type_declaration SEMI .)


state 52

    (33) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    MUL             reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LP              reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACK          reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RP              reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACE          reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TYPEDEF         reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    EXTERN          reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    STATIC          reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    AUTO            reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    REGISTER        reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    VOID            reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    CHAR            reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    SHORT           reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    INT             reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LONG            reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    FLOAT           reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    DOUBLE          reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    SIGNED          reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    UNSIGNED        reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TYPE_NAME       reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ENUM            reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    STRUCT          reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)
    UNION           reduce using rule 33 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 53

    (83) pointer -> MUL pointer .

    IDENTIFIER      reduce using rule 83 (pointer -> MUL pointer .)
    LP              reduce using rule 83 (pointer -> MUL pointer .)
    LBRACK          reduce using rule 83 (pointer -> MUL pointer .)
    RP              reduce using rule 83 (pointer -> MUL pointer .)
    COMMA           reduce using rule 83 (pointer -> MUL pointer .)
    SEMI            reduce using rule 83 (pointer -> MUL pointer .)
    LBRACE          reduce using rule 83 (pointer -> MUL pointer .)
    TYPEDEF         reduce using rule 83 (pointer -> MUL pointer .)
    EXTERN          reduce using rule 83 (pointer -> MUL pointer .)
    STATIC          reduce using rule 83 (pointer -> MUL pointer .)
    AUTO            reduce using rule 83 (pointer -> MUL pointer .)
    REGISTER        reduce using rule 83 (pointer -> MUL pointer .)
    VOID            reduce using rule 83 (pointer -> MUL pointer .)
    CHAR            reduce using rule 83 (pointer -> MUL pointer .)
    SHORT           reduce using rule 83 (pointer -> MUL pointer .)
    INT             reduce using rule 83 (pointer -> MUL pointer .)
    LONG            reduce using rule 83 (pointer -> MUL pointer .)
    FLOAT           reduce using rule 83 (pointer -> MUL pointer .)
    DOUBLE          reduce using rule 83 (pointer -> MUL pointer .)
    SIGNED          reduce using rule 83 (pointer -> MUL pointer .)
    UNSIGNED        reduce using rule 83 (pointer -> MUL pointer .)
    TYPE_NAME       reduce using rule 83 (pointer -> MUL pointer .)
    ENUM            reduce using rule 83 (pointer -> MUL pointer .)
    STRUCT          reduce using rule 83 (pointer -> MUL pointer .)
    UNION           reduce using rule 83 (pointer -> MUL pointer .)


state 54

    (34) declarator -> pointer direct_declarator .
    (86) direct_declarator -> direct_declarator . LBRACK constant_expression RBRACK
    (87) direct_declarator -> direct_declarator . LBRACK RBRACK
    (88) direct_declarator -> direct_declarator . LP parameter_type_list RP
    (89) direct_declarator -> direct_declarator . LP identifier_list RP
    (90) direct_declarator -> direct_declarator . LP RP

    COMMA           reduce using rule 34 (declarator -> pointer direct_declarator .)
    RP              reduce using rule 34 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 34 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 34 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 34 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 34 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 34 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 34 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 34 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 34 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 34 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 34 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 34 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 34 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 34 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 34 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 34 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 34 (declarator -> pointer direct_declarator .)
    TYPE_NAME       reduce using rule 34 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 34 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 34 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 34 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 34 (declarator -> pointer direct_declarator .)
    ASSIGNMENT      reduce using rule 34 (declarator -> pointer direct_declarator .)
    LBRACK          shift and go to state 64
    LP              shift and go to state 65


state 55

    (22) class_implementation -> IMPLEMENTATION class_name . instance_variables implementation_definition_list END
    (23) class_implementation -> IMPLEMENTATION class_name . COLON superclass_name instance_variables implementation_definition_list END
    (26) category_implementation -> IMPLEMENTATION class_name . ( category_name ) implementation_definition_list END
    (47) instance_variables -> . LBRACE struct_declaration_list RBRACE
    (48) instance_variables -> . LBRACE visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> . LBRACE struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> . LBRACE visibility_specification struct_declaration_list instance_variables RBRACE

    COLON           shift and go to state 93
    (               shift and go to state 92
    LBRACE          shift and go to state 94

    instance_variables             shift and go to state 91

state 56

    (45) class_name -> IDENTIFIER .

    COLON           reduce using rule 45 (class_name -> IDENTIFIER .)
    (               reduce using rule 45 (class_name -> IDENTIFIER .)
    LBRACE          reduce using rule 45 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 45 (class_name -> IDENTIFIER .)
    INTERFACE       reduce using rule 45 (class_name -> IDENTIFIER .)
    IMPLEMENTATION  reduce using rule 45 (class_name -> IDENTIFIER .)
    PROTOCOL        reduce using rule 45 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 45 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 45 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 45 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 45 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 45 (class_name -> IDENTIFIER .)
    REGISTER        reduce using rule 45 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 45 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 45 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 45 (class_name -> IDENTIFIER .)
    INT             reduce using rule 45 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 45 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 45 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 45 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 45 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 45 (class_name -> IDENTIFIER .)
    TYPE_NAME       reduce using rule 45 (class_name -> IDENTIFIER .)
    MUL             reduce using rule 45 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 45 (class_name -> IDENTIFIER .)
    LP              reduce using rule 45 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 45 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 45 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 45 (class_name -> IDENTIFIER .)
    $end            reduce using rule 45 (class_name -> IDENTIFIER .)


state 57

    (85) direct_declarator -> LP declarator . RP

    RP              shift and go to state 95


state 58

    (64) class_list -> class_name .

    COMMA           reduce using rule 64 (class_list -> class_name .)
    INTERFACE       reduce using rule 64 (class_list -> class_name .)
    IMPLEMENTATION  reduce using rule 64 (class_list -> class_name .)
    PROTOCOL        reduce using rule 64 (class_list -> class_name .)
    CLASS           reduce using rule 64 (class_list -> class_name .)
    TYPEDEF         reduce using rule 64 (class_list -> class_name .)
    EXTERN          reduce using rule 64 (class_list -> class_name .)
    STATIC          reduce using rule 64 (class_list -> class_name .)
    AUTO            reduce using rule 64 (class_list -> class_name .)
    REGISTER        reduce using rule 64 (class_list -> class_name .)
    VOID            reduce using rule 64 (class_list -> class_name .)
    CHAR            reduce using rule 64 (class_list -> class_name .)
    SHORT           reduce using rule 64 (class_list -> class_name .)
    INT             reduce using rule 64 (class_list -> class_name .)
    LONG            reduce using rule 64 (class_list -> class_name .)
    FLOAT           reduce using rule 64 (class_list -> class_name .)
    DOUBLE          reduce using rule 64 (class_list -> class_name .)
    SIGNED          reduce using rule 64 (class_list -> class_name .)
    UNSIGNED        reduce using rule 64 (class_list -> class_name .)
    TYPE_NAME       reduce using rule 64 (class_list -> class_name .)
    MUL             reduce using rule 64 (class_list -> class_name .)
    IDENTIFIER      reduce using rule 64 (class_list -> class_name .)
    LP              reduce using rule 64 (class_list -> class_name .)
    ENUM            reduce using rule 64 (class_list -> class_name .)
    STRUCT          reduce using rule 64 (class_list -> class_name .)
    UNION           reduce using rule 64 (class_list -> class_name .)
    $end            reduce using rule 64 (class_list -> class_name .)


state 59

    (29) class_declaration_list -> CLASS class_list .
    (65) class_list -> class_list . COMMA class_name

    INTERFACE       reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    IMPLEMENTATION  reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    PROTOCOL        reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    CLASS           reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    TYPEDEF         reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    EXTERN          reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    STATIC          reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    AUTO            reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    REGISTER        reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    VOID            reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    CHAR            reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    SHORT           reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    INT             reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    LONG            reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    FLOAT           reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    DOUBLE          reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    SIGNED          reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    UNSIGNED        reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    TYPE_NAME       reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    MUL             reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    IDENTIFIER      reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    LP              reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    ENUM            reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    STRUCT          reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    UNION           reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    $end            reduce using rule 29 (class_declaration_list -> CLASS class_list .)
    COMMA           shift and go to state 96


state 60

    (2) translation_unit -> translation_unit external_declaration .

    INTERFACE       reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IMPLEMENTATION  reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    PROTOCOL        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CLASS           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPE_NAME       reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    MUL             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LP              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 61

    (42) type_declaration -> TYPEDEF declaration_specifiers . type_declarator
    (93) type_declarator -> . pointer type_direct_declarator
    (94) type_declarator -> . type_direct_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (127) type_direct_declarator -> . IDENTIFIER
    (128) type_direct_declarator -> . LP type_declarator RP
    (129) type_direct_declarator -> . type_direct_declarator LBRACK constant_expression RBRACK
    (130) type_direct_declarator -> . type_direct_declarator LBRACK RBRACK
    (131) type_direct_declarator -> . type_direct_declarator LP parameter_type_list RP
    (132) type_direct_declarator -> . type_direct_declarator LP identifier_list RP
    (133) type_direct_declarator -> . type_direct_declarator LP RP

    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 100
    LP              shift and go to state 98

    type_declarator                shift and go to state 97
    type_direct_declarator         shift and go to state 99
    pointer                        shift and go to state 101

state 62

    (114) enum_specifier -> ENUM IDENTIFIER . LBRACE enumerator_list RBRACE
    (115) enum_specifier -> ENUM IDENTIFIER .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 102
    EXTERN          reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    TYPE_NAME       reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    SEMI            reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    MUL             reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    LP              reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    LBRACK          reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    RP              reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)
    TYPEDEF         reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .)

  ! LBRACE          [ reduce using rule 115 (enum_specifier -> ENUM IDENTIFIER .) ]


state 63

    (113) enum_specifier -> ENUM LBRACE . enumerator_list RBRACE
    (150) enumerator_list -> . enumerator
    (151) enumerator_list -> . enumerator_list COMMA enumerator
    (188) enumerator -> . IDENTIFIER
    (189) enumerator -> . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER      shift and go to state 105

    enumerator_list                shift and go to state 104
    enumerator                     shift and go to state 103

state 64

    (86) direct_declarator -> direct_declarator LBRACK . constant_expression RBRACK
    (87) direct_declarator -> direct_declarator LBRACK . RBRACK
    (116) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    RBRACK          shift and go to state 127
    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    multiplicative_expression      shift and go to state 136
    unary_expression               shift and go to state 106
    exclusive_or_expression        shift and go to state 109
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    and_expression                 shift and go to state 113
    unary_operator                 shift and go to state 138
    conditional_expression         shift and go to state 139
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    constant_expression            shift and go to state 125
    relational_expression          shift and go to state 120

state 65

    (88) direct_declarator -> direct_declarator LP . parameter_type_list RP
    (89) direct_declarator -> direct_declarator LP . identifier_list RP
    (90) direct_declarator -> direct_declarator LP . RP
    (117) parameter_type_list -> . parameter_list
    (118) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (119) identifier_list -> . IDENTIFIER
    (120) identifier_list -> . identifier_list COMMA IDENTIFIER
    (154) parameter_list -> . parameter_declaration
    (155) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RP              shift and go to state 142
    IDENTIFIER      shift and go to state 143
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    parameter_list                 shift and go to state 148
    parameter_type_list            shift and go to state 144
    parameter_declaration          shift and go to state 145
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 146
    identifier_list                shift and go to state 147

state 66

    (15) declaration -> declaration_specifiers SEMI .

    END             reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    TYPEDEF         reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    ADD             reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    SUB             reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    EXTERN          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    STATIC          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    AUTO            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    REGISTER        reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    VOID            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    CHAR            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    SHORT           reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    LONG            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    FLOAT           reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    DOUBLE          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    SIGNED          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    UNSIGNED        reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    TYPE_NAME       reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    ENUM            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    STRUCT          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    UNION           reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    LBRACE          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    MUL             reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    IDENTIFIER      reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    LP              reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    RBRACE          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    CASE            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    DEFAULT         reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    SWITCH          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    DO              reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    GOTO            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    CONTINUE        reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    INC             reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    DEC             reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    SIZEOF          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    BITAND          reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    TILDE           reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    BANG            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    HEX_LITERAL     reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    OCTAL_LITERAL   reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    BINARY_LITERAL  reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    DECIMAL_LITERAL reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    C_STRING_LITERAL reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    OBJC_STRING_LITERAL reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    INTERFACE       reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    IMPLEMENTATION  reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    PROTOCOL        reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    CLASS           reduce using rule 15 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 15 (declaration -> declaration_specifiers SEMI .)


state 67

    (43) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 43 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 43 (init_declarator_list -> init_declarator .)


state 68

    (17) declaration -> declaration_specifiers init_declarator_list . SEMI
    (44) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 150
    COMMA           shift and go to state 149


state 69

    (11) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (12) function_definition -> declaration_specifiers declarator . compound_statement
    (95) init_declarator -> declarator .
    (96) init_declarator -> declarator . ASSIGNMENT initializer
    (36) declaration_list -> . declaration
    (37) declaration_list -> . declaration_list declaration
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    SEMI            reduce using rule 95 (init_declarator -> declarator .)
    COMMA           reduce using rule 95 (init_declarator -> declarator .)
    ASSIGNMENT      shift and go to state 151
    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 152
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_list               shift and go to state 153
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 72

state 70

    (14) function_definition -> declarator compound_statement .

    END             reduce using rule 14 (function_definition -> declarator compound_statement .)
    TYPEDEF         reduce using rule 14 (function_definition -> declarator compound_statement .)
    ADD             reduce using rule 14 (function_definition -> declarator compound_statement .)
    SUB             reduce using rule 14 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 14 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 14 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 14 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 14 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 14 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 14 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 14 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 14 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 14 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 14 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 14 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 14 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 14 (function_definition -> declarator compound_statement .)
    TYPE_NAME       reduce using rule 14 (function_definition -> declarator compound_statement .)
    MUL             reduce using rule 14 (function_definition -> declarator compound_statement .)
    IDENTIFIER      reduce using rule 14 (function_definition -> declarator compound_statement .)
    LP              reduce using rule 14 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 14 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 14 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 14 (function_definition -> declarator compound_statement .)
    INTERFACE       reduce using rule 14 (function_definition -> declarator compound_statement .)
    IMPLEMENTATION  reduce using rule 14 (function_definition -> declarator compound_statement .)
    PROTOCOL        reduce using rule 14 (function_definition -> declarator compound_statement .)
    CLASS           reduce using rule 14 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 14 (function_definition -> declarator compound_statement .)


state 71

    (15) declaration -> declaration_specifiers . SEMI
    (17) declaration -> declaration_specifiers . init_declarator_list SEMI
    (43) init_declarator_list -> . init_declarator
    (44) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (95) init_declarator -> . declarator
    (96) init_declarator -> . declarator ASSIGNMENT initializer
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP

    SEMI            shift and go to state 66
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24

    direct_declarator              shift and go to state 34
    init_declarator                shift and go to state 67
    declarator                     shift and go to state 154
    init_declarator_list           shift and go to state 68
    pointer                        shift and go to state 16

state 72

    (36) declaration_list -> declaration .

    LBRACE          reduce using rule 36 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 36 (declaration_list -> declaration .)
    EXTERN          reduce using rule 36 (declaration_list -> declaration .)
    STATIC          reduce using rule 36 (declaration_list -> declaration .)
    AUTO            reduce using rule 36 (declaration_list -> declaration .)
    REGISTER        reduce using rule 36 (declaration_list -> declaration .)
    VOID            reduce using rule 36 (declaration_list -> declaration .)
    CHAR            reduce using rule 36 (declaration_list -> declaration .)
    SHORT           reduce using rule 36 (declaration_list -> declaration .)
    INT             reduce using rule 36 (declaration_list -> declaration .)
    LONG            reduce using rule 36 (declaration_list -> declaration .)
    FLOAT           reduce using rule 36 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 36 (declaration_list -> declaration .)
    SIGNED          reduce using rule 36 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 36 (declaration_list -> declaration .)
    TYPE_NAME       reduce using rule 36 (declaration_list -> declaration .)
    ENUM            reduce using rule 36 (declaration_list -> declaration .)
    STRUCT          reduce using rule 36 (declaration_list -> declaration .)
    UNION           reduce using rule 36 (declaration_list -> declaration .)
    RBRACE          reduce using rule 36 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 36 (declaration_list -> declaration .)
    CASE            reduce using rule 36 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 36 (declaration_list -> declaration .)
    SEMI            reduce using rule 36 (declaration_list -> declaration .)
    IF              reduce using rule 36 (declaration_list -> declaration .)
    SWITCH          reduce using rule 36 (declaration_list -> declaration .)
    WHILE           reduce using rule 36 (declaration_list -> declaration .)
    DO              reduce using rule 36 (declaration_list -> declaration .)
    FOR             reduce using rule 36 (declaration_list -> declaration .)
    GOTO            reduce using rule 36 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 36 (declaration_list -> declaration .)
    BREAK           reduce using rule 36 (declaration_list -> declaration .)
    RETURN          reduce using rule 36 (declaration_list -> declaration .)
    INC             reduce using rule 36 (declaration_list -> declaration .)
    DEC             reduce using rule 36 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 36 (declaration_list -> declaration .)
    BITAND          reduce using rule 36 (declaration_list -> declaration .)
    MUL             reduce using rule 36 (declaration_list -> declaration .)
    ADD             reduce using rule 36 (declaration_list -> declaration .)
    SUB             reduce using rule 36 (declaration_list -> declaration .)
    TILDE           reduce using rule 36 (declaration_list -> declaration .)
    BANG            reduce using rule 36 (declaration_list -> declaration .)
    HEX_LITERAL     reduce using rule 36 (declaration_list -> declaration .)
    OCTAL_LITERAL   reduce using rule 36 (declaration_list -> declaration .)
    BINARY_LITERAL  reduce using rule 36 (declaration_list -> declaration .)
    DECIMAL_LITERAL reduce using rule 36 (declaration_list -> declaration .)
    FLOATING_POINT_LITERAL reduce using rule 36 (declaration_list -> declaration .)
    C_STRING_LITERAL reduce using rule 36 (declaration_list -> declaration .)
    OBJC_STRING_LITERAL reduce using rule 36 (declaration_list -> declaration .)
    LP              reduce using rule 36 (declaration_list -> declaration .)


state 73

    (38) compound_statement -> LBRACE . RBRACE
    (39) compound_statement -> LBRACE . statement_list RBRACE
    (40) compound_statement -> LBRACE . declaration_list RBRACE
    (41) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (91) statement_list -> . statement
    (92) statement_list -> . statement_list statement
    (36) declaration_list -> . declaration
    (37) declaration_list -> . declaration_list declaration
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    RBRACE          shift and go to state 176
    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    storage_class_specifier        shift and go to state 1
    unary_expression               shift and go to state 161
    struct_or_union_specifier      shift and go to state 3
    exclusive_or_expression        shift and go to state 109
    type_declaration               shift and go to state 8
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    selection_statement            shift and go to state 178
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 171
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    struct_or_union                shift and go to state 6
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 72
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    enum_specifier                 shift and go to state 35
    labeled_statement              shift and go to state 158
    declaration_list               shift and go to state 159
    conditional_expression         shift and go to state 182
    statement_list                 shift and go to state 165
    expression                     shift and go to state 166

state 74

    (13) function_definition -> declarator declaration_list . compound_statement
    (37) declaration_list -> declaration_list . declaration
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 183
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 184

state 75

    (18) class_interface -> INTERFACE class_name . instance_variables interface_declaration_list END
    (19) class_interface -> INTERFACE class_name . COLON superclass_name instance_variables interface_declaration_list END
    (21) class_interface -> INTERFACE class_name . COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END
    (24) category_interface -> INTERFACE class_name . ( category_name ) interface_declaration_list END
    (25) category_interface -> INTERFACE class_name . ( category_name ) protocol_reference_list interface_declaration_list END
    (47) instance_variables -> . LBRACE struct_declaration_list RBRACE
    (48) instance_variables -> . LBRACE visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> . LBRACE struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> . LBRACE visibility_specification struct_declaration_list instance_variables RBRACE

    COLON           shift and go to state 186
    (               shift and go to state 187
    LBRACE          shift and go to state 94

    instance_variables             shift and go to state 185

state 76

    (20) class_interface -> INTERFACE protocol_reference_list . instance_variables interface_declaration_list END
    (47) instance_variables -> . LBRACE struct_declaration_list RBRACE
    (48) instance_variables -> . LBRACE visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> . LBRACE struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> . LBRACE visibility_specification struct_declaration_list instance_variables RBRACE

    LBRACE          shift and go to state 94

    instance_variables             shift and go to state 188

state 77

    (55) protocol_reference_list -> LT . protocol_list GT
    (104) protocol_list -> . protocol_name
    (105) protocol_list -> . protocol_list COMMA protocol_name
    (63) protocol_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 48

    protocol_list                  shift and go to state 189
    protocol_name                  shift and go to state 190

state 78

    (102) method_declaration -> class_method_declaration .

    END             reduce using rule 102 (method_declaration -> class_method_declaration .)
    TYPEDEF         reduce using rule 102 (method_declaration -> class_method_declaration .)
    ADD             reduce using rule 102 (method_declaration -> class_method_declaration .)
    SUB             reduce using rule 102 (method_declaration -> class_method_declaration .)
    EXTERN          reduce using rule 102 (method_declaration -> class_method_declaration .)
    STATIC          reduce using rule 102 (method_declaration -> class_method_declaration .)
    AUTO            reduce using rule 102 (method_declaration -> class_method_declaration .)
    REGISTER        reduce using rule 102 (method_declaration -> class_method_declaration .)
    VOID            reduce using rule 102 (method_declaration -> class_method_declaration .)
    CHAR            reduce using rule 102 (method_declaration -> class_method_declaration .)
    SHORT           reduce using rule 102 (method_declaration -> class_method_declaration .)
    INT             reduce using rule 102 (method_declaration -> class_method_declaration .)
    LONG            reduce using rule 102 (method_declaration -> class_method_declaration .)
    FLOAT           reduce using rule 102 (method_declaration -> class_method_declaration .)
    DOUBLE          reduce using rule 102 (method_declaration -> class_method_declaration .)
    SIGNED          reduce using rule 102 (method_declaration -> class_method_declaration .)
    UNSIGNED        reduce using rule 102 (method_declaration -> class_method_declaration .)
    TYPE_NAME       reduce using rule 102 (method_declaration -> class_method_declaration .)
    ENUM            reduce using rule 102 (method_declaration -> class_method_declaration .)
    STRUCT          reduce using rule 102 (method_declaration -> class_method_declaration .)
    UNION           reduce using rule 102 (method_declaration -> class_method_declaration .)


state 79

    (52) interface_declaration_list -> method_declaration .

    END             reduce using rule 52 (interface_declaration_list -> method_declaration .)
    TYPEDEF         reduce using rule 52 (interface_declaration_list -> method_declaration .)
    ADD             reduce using rule 52 (interface_declaration_list -> method_declaration .)
    SUB             reduce using rule 52 (interface_declaration_list -> method_declaration .)
    EXTERN          reduce using rule 52 (interface_declaration_list -> method_declaration .)
    STATIC          reduce using rule 52 (interface_declaration_list -> method_declaration .)
    AUTO            reduce using rule 52 (interface_declaration_list -> method_declaration .)
    REGISTER        reduce using rule 52 (interface_declaration_list -> method_declaration .)
    VOID            reduce using rule 52 (interface_declaration_list -> method_declaration .)
    CHAR            reduce using rule 52 (interface_declaration_list -> method_declaration .)
    SHORT           reduce using rule 52 (interface_declaration_list -> method_declaration .)
    INT             reduce using rule 52 (interface_declaration_list -> method_declaration .)
    LONG            reduce using rule 52 (interface_declaration_list -> method_declaration .)
    FLOAT           reduce using rule 52 (interface_declaration_list -> method_declaration .)
    DOUBLE          reduce using rule 52 (interface_declaration_list -> method_declaration .)
    SIGNED          reduce using rule 52 (interface_declaration_list -> method_declaration .)
    UNSIGNED        reduce using rule 52 (interface_declaration_list -> method_declaration .)
    TYPE_NAME       reduce using rule 52 (interface_declaration_list -> method_declaration .)
    ENUM            reduce using rule 52 (interface_declaration_list -> method_declaration .)
    STRUCT          reduce using rule 52 (interface_declaration_list -> method_declaration .)
    UNION           reduce using rule 52 (interface_declaration_list -> method_declaration .)


state 80

    (28) protocol_declaration -> PROTOCOL protocol_name protocol_reference_list . interface_declaration_list END
    (51) interface_declaration_list -> . declaration
    (52) interface_declaration_list -> . method_declaration
    (53) interface_declaration_list -> . interface_declaration_list declaration
    (54) interface_declaration_list -> . interface_declaration_list method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union                shift and go to state 6
    instance_method_declaration    shift and go to state 81
    enum_specifier                 shift and go to state 35
    interface_declaration_list     shift and go to state 191
    method_declaration             shift and go to state 79
    type_declaration               shift and go to state 8
    type_specifier                 shift and go to state 11
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 84

state 81

    (103) method_declaration -> instance_method_declaration .

    END             reduce using rule 103 (method_declaration -> instance_method_declaration .)
    TYPEDEF         reduce using rule 103 (method_declaration -> instance_method_declaration .)
    ADD             reduce using rule 103 (method_declaration -> instance_method_declaration .)
    SUB             reduce using rule 103 (method_declaration -> instance_method_declaration .)
    EXTERN          reduce using rule 103 (method_declaration -> instance_method_declaration .)
    STATIC          reduce using rule 103 (method_declaration -> instance_method_declaration .)
    AUTO            reduce using rule 103 (method_declaration -> instance_method_declaration .)
    REGISTER        reduce using rule 103 (method_declaration -> instance_method_declaration .)
    VOID            reduce using rule 103 (method_declaration -> instance_method_declaration .)
    CHAR            reduce using rule 103 (method_declaration -> instance_method_declaration .)
    SHORT           reduce using rule 103 (method_declaration -> instance_method_declaration .)
    INT             reduce using rule 103 (method_declaration -> instance_method_declaration .)
    LONG            reduce using rule 103 (method_declaration -> instance_method_declaration .)
    FLOAT           reduce using rule 103 (method_declaration -> instance_method_declaration .)
    DOUBLE          reduce using rule 103 (method_declaration -> instance_method_declaration .)
    SIGNED          reduce using rule 103 (method_declaration -> instance_method_declaration .)
    UNSIGNED        reduce using rule 103 (method_declaration -> instance_method_declaration .)
    TYPE_NAME       reduce using rule 103 (method_declaration -> instance_method_declaration .)
    ENUM            reduce using rule 103 (method_declaration -> instance_method_declaration .)
    STRUCT          reduce using rule 103 (method_declaration -> instance_method_declaration .)
    UNION           reduce using rule 103 (method_declaration -> instance_method_declaration .)


state 82

    (138) class_method_declaration -> ADD . method_selector SEMI
    (139) class_method_declaration -> ADD . method_type method_selector SEMI
    (181) method_selector -> . unary_selector
    (182) method_selector -> . keyword_selector
    (183) method_selector -> . keyword_selector COMMA ELLIPSIS
    (184) method_selector -> . keyword_selector COMMA parameter_type_list
    (185) method_type -> . LP type_name RP
    (217) unary_selector -> . selector
    (218) keyword_selector -> . keyword_declarator
    (219) keyword_selector -> . keyword_selector keyword_declarator
    (241) selector -> . IDENTIFIER
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER

    LP              shift and go to state 199
    IDENTIFIER      shift and go to state 200
    COLON           shift and go to state 192

    method_type                    shift and go to state 193
    unary_selector                 shift and go to state 194
    method_selector                shift and go to state 195
    keyword_selector               shift and go to state 196
    selector                       shift and go to state 197
    keyword_declarator             shift and go to state 198

state 83

    (140) instance_method_declaration -> SUB . method_selector SEMI
    (141) instance_method_declaration -> SUB . method_type method_selector SEMI
    (181) method_selector -> . unary_selector
    (182) method_selector -> . keyword_selector
    (183) method_selector -> . keyword_selector COMMA ELLIPSIS
    (184) method_selector -> . keyword_selector COMMA parameter_type_list
    (185) method_type -> . LP type_name RP
    (217) unary_selector -> . selector
    (218) keyword_selector -> . keyword_declarator
    (219) keyword_selector -> . keyword_selector keyword_declarator
    (241) selector -> . IDENTIFIER
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER

    LP              shift and go to state 199
    IDENTIFIER      shift and go to state 200
    COLON           shift and go to state 192

    method_type                    shift and go to state 202
    unary_selector                 shift and go to state 194
    method_selector                shift and go to state 201
    keyword_selector               shift and go to state 196
    selector                       shift and go to state 197
    keyword_declarator             shift and go to state 198

state 84

    (51) interface_declaration_list -> declaration .

    END             reduce using rule 51 (interface_declaration_list -> declaration .)
    TYPEDEF         reduce using rule 51 (interface_declaration_list -> declaration .)
    ADD             reduce using rule 51 (interface_declaration_list -> declaration .)
    SUB             reduce using rule 51 (interface_declaration_list -> declaration .)
    EXTERN          reduce using rule 51 (interface_declaration_list -> declaration .)
    STATIC          reduce using rule 51 (interface_declaration_list -> declaration .)
    AUTO            reduce using rule 51 (interface_declaration_list -> declaration .)
    REGISTER        reduce using rule 51 (interface_declaration_list -> declaration .)
    VOID            reduce using rule 51 (interface_declaration_list -> declaration .)
    CHAR            reduce using rule 51 (interface_declaration_list -> declaration .)
    SHORT           reduce using rule 51 (interface_declaration_list -> declaration .)
    INT             reduce using rule 51 (interface_declaration_list -> declaration .)
    LONG            reduce using rule 51 (interface_declaration_list -> declaration .)
    FLOAT           reduce using rule 51 (interface_declaration_list -> declaration .)
    DOUBLE          reduce using rule 51 (interface_declaration_list -> declaration .)
    SIGNED          reduce using rule 51 (interface_declaration_list -> declaration .)
    UNSIGNED        reduce using rule 51 (interface_declaration_list -> declaration .)
    TYPE_NAME       reduce using rule 51 (interface_declaration_list -> declaration .)
    ENUM            reduce using rule 51 (interface_declaration_list -> declaration .)
    STRUCT          reduce using rule 51 (interface_declaration_list -> declaration .)
    UNION           reduce using rule 51 (interface_declaration_list -> declaration .)


state 85

    (27) protocol_declaration -> PROTOCOL protocol_name interface_declaration_list . END
    (53) interface_declaration_list -> interface_declaration_list . declaration
    (54) interface_declaration_list -> interface_declaration_list . method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 203
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union                shift and go to state 6
    instance_method_declaration    shift and go to state 81
    enum_specifier                 shift and go to state 35
    method_declaration             shift and go to state 204
    type_declaration               shift and go to state 8
    type_specifier                 shift and go to state 11
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 205

state 86

    (110) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE . struct_declaration_list RBRACE
    (97) struct_declaration_list -> . struct_declaration
    (98) struct_declaration_list -> . struct_declaration_list struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    struct_declaration             shift and go to state 89
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 90
    struct_declaration_list        shift and go to state 206

state 87

    (111) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE
    (98) struct_declaration_list -> struct_declaration_list . struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RBRACE          shift and go to state 208
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    struct_declaration             shift and go to state 207
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 90

state 88

    (177) specifier_qualifier_list -> type_specifier .
    (178) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    COLON           reduce using rule 177 (specifier_qualifier_list -> type_specifier .)
    MUL             reduce using rule 177 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 177 (specifier_qualifier_list -> type_specifier .)
    LP              reduce using rule 177 (specifier_qualifier_list -> type_specifier .)
    LBRACK          reduce using rule 177 (specifier_qualifier_list -> type_specifier .)
    RP              reduce using rule 177 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 209

state 89

    (97) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    LBRACE          reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    TYPE_NAME       reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 97 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 97 (struct_declaration_list -> struct_declaration .)


state 90

    (137) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (179) struct_declarator_list -> . struct_declarator
    (180) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (214) struct_declarator -> . declarator
    (215) struct_declarator -> . COLON constant_expression
    (216) struct_declarator -> . declarator COLON constant_expression
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP

    COLON           shift and go to state 212
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24

    struct_declarator              shift and go to state 210
    struct_declarator_list         shift and go to state 213
    direct_declarator              shift and go to state 34
    declarator                     shift and go to state 211
    pointer                        shift and go to state 16

state 91

    (22) class_implementation -> IMPLEMENTATION class_name instance_variables . implementation_definition_list END
    (56) implementation_definition_list -> . function_definition
    (57) implementation_definition_list -> . declaration
    (58) implementation_definition_list -> . method_definition
    (59) implementation_definition_list -> . implementation_definition_list function_definition
    (60) implementation_definition_list -> . implementation_definition_list declaration
    (61) implementation_definition_list -> . implementation_definition_list method_definition
    (11) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (12) function_definition -> . declaration_specifiers declarator compound_statement
    (13) function_definition -> . declarator declaration_list compound_statement
    (14) function_definition -> . declarator compound_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (106) method_definition -> . class_method_definition
    (107) method_definition -> . instance_method_definition
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (142) class_method_definition -> . ADD method_selector compound_statement
    (143) class_method_definition -> . ADD method_type method_selector compound_statement
    (144) class_method_definition -> . ADD method_selector declaration_list compound_statement
    (145) class_method_definition -> . ADD method_type method_selector declaration_list compound_statement
    (146) instance_method_definition -> . SUB method_selector compound_statement
    (147) instance_method_definition -> . SUB method_type method_selector compound_statement
    (148) instance_method_definition -> . SUB method_selector declaration_list compound_statement
    (149) instance_method_definition -> . SUB method_type method_selector declaration_list compound_statement
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 215
    SUB             shift and go to state 217
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    declaration                    shift and go to state 214
    type_declaration               shift and go to state 8
    pointer                        shift and go to state 16
    type_specifier                 shift and go to state 11
    struct_or_union                shift and go to state 6
    direct_declarator              shift and go to state 34
    implementation_definition_list shift and go to state 216
    declaration_specifiers         shift and go to state 37
    instance_method_definition     shift and go to state 218
    method_definition              shift and go to state 219
    class_method_definition        shift and go to state 220
    function_definition            shift and go to state 221
    enum_specifier                 shift and go to state 35
    declarator                     shift and go to state 43

state 92

    (26) category_implementation -> IMPLEMENTATION class_name ( . category_name ) implementation_definition_list END
    (62) category_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 222

    category_name                  shift and go to state 223

state 93

    (23) class_implementation -> IMPLEMENTATION class_name COLON . superclass_name instance_variables implementation_definition_list END
    (46) superclass_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 225

    superclass_name                shift and go to state 224

state 94

    (47) instance_variables -> LBRACE . struct_declaration_list RBRACE
    (48) instance_variables -> LBRACE . visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> LBRACE . struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> LBRACE . visibility_specification struct_declaration_list instance_variables RBRACE
    (97) struct_declaration_list -> . struct_declaration
    (98) struct_declaration_list -> . struct_declaration_list struct_declaration
    (99) visibility_specification -> . PRIVATE
    (100) visibility_specification -> . PUBLIC
    (101) visibility_specification -> . PROTECTED
    (137) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    PRIVATE         shift and go to state 228
    PUBLIC          shift and go to state 230
    PROTECTED       shift and go to state 227
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    struct_declaration             shift and go to state 89
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 90
    struct_declaration_list        shift and go to state 226
    visibility_specification       shift and go to state 229

state 95

    (85) direct_declarator -> LP declarator RP .

    LBRACK          reduce using rule 85 (direct_declarator -> LP declarator RP .)
    LP              reduce using rule 85 (direct_declarator -> LP declarator RP .)
    LBRACE          reduce using rule 85 (direct_declarator -> LP declarator RP .)
    TYPEDEF         reduce using rule 85 (direct_declarator -> LP declarator RP .)
    EXTERN          reduce using rule 85 (direct_declarator -> LP declarator RP .)
    STATIC          reduce using rule 85 (direct_declarator -> LP declarator RP .)
    AUTO            reduce using rule 85 (direct_declarator -> LP declarator RP .)
    REGISTER        reduce using rule 85 (direct_declarator -> LP declarator RP .)
    VOID            reduce using rule 85 (direct_declarator -> LP declarator RP .)
    CHAR            reduce using rule 85 (direct_declarator -> LP declarator RP .)
    SHORT           reduce using rule 85 (direct_declarator -> LP declarator RP .)
    INT             reduce using rule 85 (direct_declarator -> LP declarator RP .)
    LONG            reduce using rule 85 (direct_declarator -> LP declarator RP .)
    FLOAT           reduce using rule 85 (direct_declarator -> LP declarator RP .)
    DOUBLE          reduce using rule 85 (direct_declarator -> LP declarator RP .)
    SIGNED          reduce using rule 85 (direct_declarator -> LP declarator RP .)
    UNSIGNED        reduce using rule 85 (direct_declarator -> LP declarator RP .)
    TYPE_NAME       reduce using rule 85 (direct_declarator -> LP declarator RP .)
    ENUM            reduce using rule 85 (direct_declarator -> LP declarator RP .)
    STRUCT          reduce using rule 85 (direct_declarator -> LP declarator RP .)
    UNION           reduce using rule 85 (direct_declarator -> LP declarator RP .)
    RP              reduce using rule 85 (direct_declarator -> LP declarator RP .)
    COLON           reduce using rule 85 (direct_declarator -> LP declarator RP .)
    SEMI            reduce using rule 85 (direct_declarator -> LP declarator RP .)
    COMMA           reduce using rule 85 (direct_declarator -> LP declarator RP .)
    ASSIGNMENT      reduce using rule 85 (direct_declarator -> LP declarator RP .)


state 96

    (65) class_list -> class_list COMMA . class_name
    (45) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 56

    class_name                     shift and go to state 231

state 97

    (42) type_declaration -> TYPEDEF declaration_specifiers type_declarator .

    SEMI            reduce using rule 42 (type_declaration -> TYPEDEF declaration_specifiers type_declarator .)


state 98

    (128) type_direct_declarator -> LP . type_declarator RP
    (93) type_declarator -> . pointer type_direct_declarator
    (94) type_declarator -> . type_direct_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (127) type_direct_declarator -> . IDENTIFIER
    (128) type_direct_declarator -> . LP type_declarator RP
    (129) type_direct_declarator -> . type_direct_declarator LBRACK constant_expression RBRACK
    (130) type_direct_declarator -> . type_direct_declarator LBRACK RBRACK
    (131) type_direct_declarator -> . type_direct_declarator LP parameter_type_list RP
    (132) type_direct_declarator -> . type_direct_declarator LP identifier_list RP
    (133) type_direct_declarator -> . type_direct_declarator LP RP

    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 100
    LP              shift and go to state 98

    type_declarator                shift and go to state 232
    type_direct_declarator         shift and go to state 99
    pointer                        shift and go to state 101

state 99

    (94) type_declarator -> type_direct_declarator .
    (129) type_direct_declarator -> type_direct_declarator . LBRACK constant_expression RBRACK
    (130) type_direct_declarator -> type_direct_declarator . LBRACK RBRACK
    (131) type_direct_declarator -> type_direct_declarator . LP parameter_type_list RP
    (132) type_direct_declarator -> type_direct_declarator . LP identifier_list RP
    (133) type_direct_declarator -> type_direct_declarator . LP RP

    RP              reduce using rule 94 (type_declarator -> type_direct_declarator .)
    SEMI            reduce using rule 94 (type_declarator -> type_direct_declarator .)
    LBRACK          shift and go to state 233
    LP              shift and go to state 234


state 100

    (127) type_direct_declarator -> IDENTIFIER .

    LBRACK          reduce using rule 127 (type_direct_declarator -> IDENTIFIER .)
    LP              reduce using rule 127 (type_direct_declarator -> IDENTIFIER .)
    RP              reduce using rule 127 (type_direct_declarator -> IDENTIFIER .)
    SEMI            reduce using rule 127 (type_direct_declarator -> IDENTIFIER .)


state 101

    (93) type_declarator -> pointer . type_direct_declarator
    (127) type_direct_declarator -> . IDENTIFIER
    (128) type_direct_declarator -> . LP type_declarator RP
    (129) type_direct_declarator -> . type_direct_declarator LBRACK constant_expression RBRACK
    (130) type_direct_declarator -> . type_direct_declarator LBRACK RBRACK
    (131) type_direct_declarator -> . type_direct_declarator LP parameter_type_list RP
    (132) type_direct_declarator -> . type_direct_declarator LP identifier_list RP
    (133) type_direct_declarator -> . type_direct_declarator LP RP

    IDENTIFIER      shift and go to state 100
    LP              shift and go to state 98

    type_direct_declarator         shift and go to state 235

state 102

    (114) enum_specifier -> ENUM IDENTIFIER LBRACE . enumerator_list RBRACE
    (150) enumerator_list -> . enumerator
    (151) enumerator_list -> . enumerator_list COMMA enumerator
    (188) enumerator -> . IDENTIFIER
    (189) enumerator -> . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER      shift and go to state 105

    enumerator_list                shift and go to state 236
    enumerator                     shift and go to state 103

state 103

    (150) enumerator_list -> enumerator .

    RBRACE          reduce using rule 150 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 150 (enumerator_list -> enumerator .)


state 104

    (113) enum_specifier -> ENUM LBRACE enumerator_list . RBRACE
    (151) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 237
    COMMA           shift and go to state 238


state 105

    (188) enumerator -> IDENTIFIER .
    (189) enumerator -> IDENTIFIER . ASSIGNMENT constant_expression

    RBRACE          reduce using rule 188 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 188 (enumerator -> IDENTIFIER .)
    ASSIGNMENT      shift and go to state 239


state 106

    (239) cast_expression -> unary_expression .

    MUL             reduce using rule 239 (cast_expression -> unary_expression .)
    DIV             reduce using rule 239 (cast_expression -> unary_expression .)
    MOD             reduce using rule 239 (cast_expression -> unary_expression .)
    ADD             reduce using rule 239 (cast_expression -> unary_expression .)
    SUB             reduce using rule 239 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 239 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 239 (cast_expression -> unary_expression .)
    LT              reduce using rule 239 (cast_expression -> unary_expression .)
    GT              reduce using rule 239 (cast_expression -> unary_expression .)
    LE              reduce using rule 239 (cast_expression -> unary_expression .)
    GE              reduce using rule 239 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 239 (cast_expression -> unary_expression .)
    NOTEQUAL        reduce using rule 239 (cast_expression -> unary_expression .)
    BITAND          reduce using rule 239 (cast_expression -> unary_expression .)
    BITXOR          reduce using rule 239 (cast_expression -> unary_expression .)
    BITOR           reduce using rule 239 (cast_expression -> unary_expression .)
    AND             reduce using rule 239 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 239 (cast_expression -> unary_expression .)
    OR              reduce using rule 239 (cast_expression -> unary_expression .)
    RBRACK          reduce using rule 239 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 239 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 239 (cast_expression -> unary_expression .)
    RP              reduce using rule 239 (cast_expression -> unary_expression .)
    COLON           reduce using rule 239 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 239 (cast_expression -> unary_expression .)
    ASSIGNMENT      reduce using rule 239 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 239 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 239 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 239 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 239 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 239 (cast_expression -> unary_expression .)
    LSHIFT_ASSIGN   reduce using rule 239 (cast_expression -> unary_expression .)
    RSHIFT_ASSIGN   reduce using rule 239 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 239 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 239 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 239 (cast_expression -> unary_expression .)


state 107

    (263) primary_expression -> C_STRING_LITERAL .

    LBRACK          reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    LP              reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    DOT             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    STRUCTACCESS    reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    INC             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    DEC             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    ASSIGNMENT      reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    MUL             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    DIV             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    MOD             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    ADD             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    SUB             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    LSHIFT          reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    RSHIFT          reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    LT              reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    GT              reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    LE              reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    GE              reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    EQUAL           reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    NOTEQUAL        reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    BITAND          reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    BITXOR          reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    BITOR           reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    AND             reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    QUESTION        reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    OR              reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    SEMI            reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    COMMA           reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    RP              reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    RBRACK          reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    COLON           reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)
    RBRACE          reduce using rule 263 (primary_expression -> C_STRING_LITERAL .)


state 108

    (260) primary_expression -> BINARY_LITERAL .

    LBRACK          reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    LP              reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    DOT             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    STRUCTACCESS    reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    INC             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    DEC             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    ASSIGNMENT      reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    MUL_ASSIGN      reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    DIV_ASSIGN      reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    MOD_ASSIGN      reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    ADD_ASSIGN      reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    SUB_ASSIGN      reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    AND_ASSIGN      reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    XOR_ASSIGN      reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    OR_ASSIGN       reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    MUL             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    DIV             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    MOD             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    ADD             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    SUB             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    LSHIFT          reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    RSHIFT          reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    LT              reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    GT              reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    LE              reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    GE              reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    EQUAL           reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    NOTEQUAL        reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    BITAND          reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    BITXOR          reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    BITOR           reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    AND             reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    QUESTION        reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    OR              reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    SEMI            reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    COMMA           reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    RP              reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    RBRACK          reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    COLON           reduce using rule 260 (primary_expression -> BINARY_LITERAL .)
    RBRACE          reduce using rule 260 (primary_expression -> BINARY_LITERAL .)


state 109

    (255) inclusive_or_expression -> exclusive_or_expression .
    (269) exclusive_or_expression -> exclusive_or_expression . BITXOR and_expression

    BITOR           reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    QUESTION        reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    RP              reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACK          reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 255 (inclusive_or_expression -> exclusive_or_expression .)
    BITXOR          shift and go to state 240


state 110

    (234) unary_operator -> MUL .

    LP              reduce using rule 234 (unary_operator -> MUL .)
    INC             reduce using rule 234 (unary_operator -> MUL .)
    DEC             reduce using rule 234 (unary_operator -> MUL .)
    SIZEOF          reduce using rule 234 (unary_operator -> MUL .)
    BITAND          reduce using rule 234 (unary_operator -> MUL .)
    MUL             reduce using rule 234 (unary_operator -> MUL .)
    ADD             reduce using rule 234 (unary_operator -> MUL .)
    SUB             reduce using rule 234 (unary_operator -> MUL .)
    TILDE           reduce using rule 234 (unary_operator -> MUL .)
    BANG            reduce using rule 234 (unary_operator -> MUL .)
    IDENTIFIER      reduce using rule 234 (unary_operator -> MUL .)
    HEX_LITERAL     reduce using rule 234 (unary_operator -> MUL .)
    OCTAL_LITERAL   reduce using rule 234 (unary_operator -> MUL .)
    BINARY_LITERAL  reduce using rule 234 (unary_operator -> MUL .)
    DECIMAL_LITERAL reduce using rule 234 (unary_operator -> MUL .)
    FLOATING_POINT_LITERAL reduce using rule 234 (unary_operator -> MUL .)
    C_STRING_LITERAL reduce using rule 234 (unary_operator -> MUL .)
    OBJC_STRING_LITERAL reduce using rule 234 (unary_operator -> MUL .)


state 111

    (199) unary_expression -> DEC . unary_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 242

    unary_expression               shift and go to state 241
    postfix_expression             shift and go to state 118
    primary_expression             shift and go to state 129
    unary_operator                 shift and go to state 138

state 112

    (201) unary_expression -> SIZEOF . unary_expression
    (202) unary_expression -> SIZEOF . LP type_name RP
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 244
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 243
    postfix_expression             shift and go to state 118
    primary_expression             shift and go to state 129
    unary_operator                 shift and go to state 138

state 113

    (268) exclusive_or_expression -> and_expression .
    (271) and_expression -> and_expression . BITAND equality_expression

    BITXOR          reduce using rule 268 (exclusive_or_expression -> and_expression .)
    BITOR           reduce using rule 268 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 268 (exclusive_or_expression -> and_expression .)
    QUESTION        reduce using rule 268 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 268 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 268 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 268 (exclusive_or_expression -> and_expression .)
    RBRACK          reduce using rule 268 (exclusive_or_expression -> and_expression .)
    RP              reduce using rule 268 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 268 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 268 (exclusive_or_expression -> and_expression .)
    BITAND          shift and go to state 245


state 114

    (236) unary_operator -> SUB .

    LP              reduce using rule 236 (unary_operator -> SUB .)
    INC             reduce using rule 236 (unary_operator -> SUB .)
    DEC             reduce using rule 236 (unary_operator -> SUB .)
    SIZEOF          reduce using rule 236 (unary_operator -> SUB .)
    BITAND          reduce using rule 236 (unary_operator -> SUB .)
    MUL             reduce using rule 236 (unary_operator -> SUB .)
    ADD             reduce using rule 236 (unary_operator -> SUB .)
    SUB             reduce using rule 236 (unary_operator -> SUB .)
    TILDE           reduce using rule 236 (unary_operator -> SUB .)
    BANG            reduce using rule 236 (unary_operator -> SUB .)
    IDENTIFIER      reduce using rule 236 (unary_operator -> SUB .)
    HEX_LITERAL     reduce using rule 236 (unary_operator -> SUB .)
    OCTAL_LITERAL   reduce using rule 236 (unary_operator -> SUB .)
    BINARY_LITERAL  reduce using rule 236 (unary_operator -> SUB .)
    DECIMAL_LITERAL reduce using rule 236 (unary_operator -> SUB .)
    FLOATING_POINT_LITERAL reduce using rule 236 (unary_operator -> SUB .)
    C_STRING_LITERAL reduce using rule 236 (unary_operator -> SUB .)
    OBJC_STRING_LITERAL reduce using rule 236 (unary_operator -> SUB .)


state 115

    (259) primary_expression -> OCTAL_LITERAL .

    LBRACK          reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    LP              reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    DOT             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    STRUCTACCESS    reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    INC             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    DEC             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    ASSIGNMENT      reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    MUL_ASSIGN      reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    DIV_ASSIGN      reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    MOD_ASSIGN      reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    ADD_ASSIGN      reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    SUB_ASSIGN      reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    AND_ASSIGN      reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    XOR_ASSIGN      reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    OR_ASSIGN       reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    MUL             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    DIV             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    MOD             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    ADD             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    SUB             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    LSHIFT          reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    RSHIFT          reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    LT              reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    GT              reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    LE              reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    GE              reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    EQUAL           reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    NOTEQUAL        reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    BITAND          reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    BITXOR          reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    BITOR           reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    AND             reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    QUESTION        reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    OR              reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    SEMI            reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    COMMA           reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    RP              reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    RBRACK          reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    COLON           reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)
    RBRACE          reduce using rule 259 (primary_expression -> OCTAL_LITERAL .)


state 116

    (223) logical_and_expression -> inclusive_or_expression .
    (256) inclusive_or_expression -> inclusive_or_expression . BITOR exclusive_or_expression

    AND             reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    QUESTION        reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    RP              reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    RBRACK          reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 223 (logical_and_expression -> inclusive_or_expression .)
    BITOR           shift and go to state 246


state 117

    (280) shift_expression -> additive_expression .
    (284) additive_expression -> additive_expression . ADD multiplicative_expression
    (285) additive_expression -> additive_expression . SUB multiplicative_expression

    LSHIFT          reduce using rule 280 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 280 (shift_expression -> additive_expression .)
    LT              reduce using rule 280 (shift_expression -> additive_expression .)
    GT              reduce using rule 280 (shift_expression -> additive_expression .)
    LE              reduce using rule 280 (shift_expression -> additive_expression .)
    GE              reduce using rule 280 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 280 (shift_expression -> additive_expression .)
    NOTEQUAL        reduce using rule 280 (shift_expression -> additive_expression .)
    BITAND          reduce using rule 280 (shift_expression -> additive_expression .)
    BITXOR          reduce using rule 280 (shift_expression -> additive_expression .)
    BITOR           reduce using rule 280 (shift_expression -> additive_expression .)
    AND             reduce using rule 280 (shift_expression -> additive_expression .)
    QUESTION        reduce using rule 280 (shift_expression -> additive_expression .)
    OR              reduce using rule 280 (shift_expression -> additive_expression .)
    RP              reduce using rule 280 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 280 (shift_expression -> additive_expression .)
    RBRACK          reduce using rule 280 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 280 (shift_expression -> additive_expression .)
    COLON           reduce using rule 280 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 280 (shift_expression -> additive_expression .)
    ADD             shift and go to state 247
    SUB             shift and go to state 248


state 118

    (197) unary_expression -> postfix_expression .
    (226) postfix_expression -> postfix_expression . LBRACK expression RBRACK
    (227) postfix_expression -> postfix_expression . LP RP
    (228) postfix_expression -> postfix_expression . LP argument_expression_list RP
    (229) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (230) postfix_expression -> postfix_expression . STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> postfix_expression . INC
    (232) postfix_expression -> postfix_expression . DEC

    MUL             reduce using rule 197 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 197 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 197 (unary_expression -> postfix_expression .)
    ADD             reduce using rule 197 (unary_expression -> postfix_expression .)
    SUB             reduce using rule 197 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 197 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 197 (unary_expression -> postfix_expression .)
    LT              reduce using rule 197 (unary_expression -> postfix_expression .)
    GT              reduce using rule 197 (unary_expression -> postfix_expression .)
    LE              reduce using rule 197 (unary_expression -> postfix_expression .)
    GE              reduce using rule 197 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 197 (unary_expression -> postfix_expression .)
    NOTEQUAL        reduce using rule 197 (unary_expression -> postfix_expression .)
    BITAND          reduce using rule 197 (unary_expression -> postfix_expression .)
    BITXOR          reduce using rule 197 (unary_expression -> postfix_expression .)
    BITOR           reduce using rule 197 (unary_expression -> postfix_expression .)
    AND             reduce using rule 197 (unary_expression -> postfix_expression .)
    QUESTION        reduce using rule 197 (unary_expression -> postfix_expression .)
    OR              reduce using rule 197 (unary_expression -> postfix_expression .)
    RBRACK          reduce using rule 197 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 197 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 197 (unary_expression -> postfix_expression .)
    RP              reduce using rule 197 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 197 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 197 (unary_expression -> postfix_expression .)
    ASSIGNMENT      reduce using rule 197 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 197 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 197 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 197 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 197 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 197 (unary_expression -> postfix_expression .)
    LSHIFT_ASSIGN   reduce using rule 197 (unary_expression -> postfix_expression .)
    RSHIFT_ASSIGN   reduce using rule 197 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 197 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 197 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 197 (unary_expression -> postfix_expression .)
    LBRACK          shift and go to state 251
    LP              shift and go to state 252
    DOT             shift and go to state 253
    STRUCTACCESS    shift and go to state 249
    INC             shift and go to state 254
    DEC             shift and go to state 250


state 119

    (258) primary_expression -> HEX_LITERAL .

    LBRACK          reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    LP              reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    DOT             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    STRUCTACCESS    reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    INC             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    DEC             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    ASSIGNMENT      reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    MUL_ASSIGN      reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    DIV_ASSIGN      reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    MOD_ASSIGN      reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    ADD_ASSIGN      reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    SUB_ASSIGN      reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    AND_ASSIGN      reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    XOR_ASSIGN      reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    OR_ASSIGN       reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    MUL             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    DIV             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    MOD             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    ADD             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    SUB             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    LSHIFT          reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    RSHIFT          reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    LT              reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    GT              reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    LE              reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    GE              reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    EQUAL           reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    NOTEQUAL        reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    BITAND          reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    BITXOR          reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    BITOR           reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    AND             reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    QUESTION        reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    OR              reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    SEMI            reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    COMMA           reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    RP              reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    RBRACK          reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    COLON           reduce using rule 258 (primary_expression -> HEX_LITERAL .)
    RBRACE          reduce using rule 258 (primary_expression -> HEX_LITERAL .)


state 120

    (272) equality_expression -> relational_expression .
    (276) relational_expression -> relational_expression . LT shift_expression
    (277) relational_expression -> relational_expression . GT shift_expression
    (278) relational_expression -> relational_expression . LE shift_expression
    (279) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 272 (equality_expression -> relational_expression .)
    NOTEQUAL        reduce using rule 272 (equality_expression -> relational_expression .)
    BITAND          reduce using rule 272 (equality_expression -> relational_expression .)
    BITXOR          reduce using rule 272 (equality_expression -> relational_expression .)
    BITOR           reduce using rule 272 (equality_expression -> relational_expression .)
    AND             reduce using rule 272 (equality_expression -> relational_expression .)
    QUESTION        reduce using rule 272 (equality_expression -> relational_expression .)
    OR              reduce using rule 272 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 272 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 272 (equality_expression -> relational_expression .)
    RP              reduce using rule 272 (equality_expression -> relational_expression .)
    RBRACK          reduce using rule 272 (equality_expression -> relational_expression .)
    COLON           reduce using rule 272 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 272 (equality_expression -> relational_expression .)
    LT              shift and go to state 257
    GT              shift and go to state 258
    LE              shift and go to state 255
    GE              shift and go to state 256


state 121

    (240) cast_expression -> LP . type_name RP cast_expression
    (265) primary_expression -> LP . expression RP
    (186) type_name -> . specifier_qualifier_list
    (187) type_name -> . specifier_qualifier_list abstract_declarator
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    ENUM            shift and go to state 31
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    struct_or_union_specifier      shift and go to state 3
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 113
    type_specifier                 shift and go to state 88
    inclusive_or_expression        shift and go to state 116
    type_name                      shift and go to state 259
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    struct_or_union                shift and go to state 6
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    enum_specifier                 shift and go to state 35
    specifier_qualifier_list       shift and go to state 260
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 261

state 122

    (237) unary_operator -> TILDE .

    LP              reduce using rule 237 (unary_operator -> TILDE .)
    INC             reduce using rule 237 (unary_operator -> TILDE .)
    DEC             reduce using rule 237 (unary_operator -> TILDE .)
    SIZEOF          reduce using rule 237 (unary_operator -> TILDE .)
    BITAND          reduce using rule 237 (unary_operator -> TILDE .)
    MUL             reduce using rule 237 (unary_operator -> TILDE .)
    ADD             reduce using rule 237 (unary_operator -> TILDE .)
    SUB             reduce using rule 237 (unary_operator -> TILDE .)
    TILDE           reduce using rule 237 (unary_operator -> TILDE .)
    BANG            reduce using rule 237 (unary_operator -> TILDE .)
    IDENTIFIER      reduce using rule 237 (unary_operator -> TILDE .)
    HEX_LITERAL     reduce using rule 237 (unary_operator -> TILDE .)
    OCTAL_LITERAL   reduce using rule 237 (unary_operator -> TILDE .)
    BINARY_LITERAL  reduce using rule 237 (unary_operator -> TILDE .)
    DECIMAL_LITERAL reduce using rule 237 (unary_operator -> TILDE .)
    FLOATING_POINT_LITERAL reduce using rule 237 (unary_operator -> TILDE .)
    C_STRING_LITERAL reduce using rule 237 (unary_operator -> TILDE .)
    OBJC_STRING_LITERAL reduce using rule 237 (unary_operator -> TILDE .)


state 123

    (286) multiplicative_expression -> cast_expression .

    MUL             reduce using rule 286 (multiplicative_expression -> cast_expression .)
    DIV             reduce using rule 286 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 286 (multiplicative_expression -> cast_expression .)
    ADD             reduce using rule 286 (multiplicative_expression -> cast_expression .)
    SUB             reduce using rule 286 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 286 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 286 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 286 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 286 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 286 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 286 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 286 (multiplicative_expression -> cast_expression .)
    NOTEQUAL        reduce using rule 286 (multiplicative_expression -> cast_expression .)
    BITAND          reduce using rule 286 (multiplicative_expression -> cast_expression .)
    BITXOR          reduce using rule 286 (multiplicative_expression -> cast_expression .)
    BITOR           reduce using rule 286 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 286 (multiplicative_expression -> cast_expression .)
    QUESTION        reduce using rule 286 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 286 (multiplicative_expression -> cast_expression .)
    RP              reduce using rule 286 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 286 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 286 (multiplicative_expression -> cast_expression .)
    RBRACK          reduce using rule 286 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 286 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 286 (multiplicative_expression -> cast_expression .)


state 124

    (152) conditional_expression -> logical_or_expression .
    (153) conditional_expression -> logical_or_expression . QUESTION expression COLON conditional_expression
    (191) logical_or_expression -> logical_or_expression . OR logical_and_expression

    SEMI            reduce using rule 152 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 152 (conditional_expression -> logical_or_expression .)
    RP              reduce using rule 152 (conditional_expression -> logical_or_expression .)
    RBRACK          reduce using rule 152 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 152 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 152 (conditional_expression -> logical_or_expression .)
    QUESTION        shift and go to state 262
    OR              shift and go to state 263


state 125

    (86) direct_declarator -> direct_declarator LBRACK constant_expression . RBRACK

    RBRACK          shift and go to state 264


state 126

    (261) primary_expression -> DECIMAL_LITERAL .

    LBRACK          reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    LP              reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    DOT             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    STRUCTACCESS    reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    INC             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    DEC             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    ASSIGNMENT      reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    MUL_ASSIGN      reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    DIV_ASSIGN      reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    MOD_ASSIGN      reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    ADD_ASSIGN      reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    SUB_ASSIGN      reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    AND_ASSIGN      reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    XOR_ASSIGN      reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    OR_ASSIGN       reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    MUL             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    DIV             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    MOD             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    ADD             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    SUB             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    LSHIFT          reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    RSHIFT          reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    LT              reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    GT              reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    LE              reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    GE              reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    EQUAL           reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    NOTEQUAL        reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    BITAND          reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    BITXOR          reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    BITOR           reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    AND             reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    QUESTION        reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    OR              reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    SEMI            reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    COMMA           reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    RP              reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    RBRACK          reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    COLON           reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)
    RBRACE          reduce using rule 261 (primary_expression -> DECIMAL_LITERAL .)


state 127

    (87) direct_declarator -> direct_declarator LBRACK RBRACK .

    LBRACK          reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    LP              reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    LBRACE          reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    TYPEDEF         reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    EXTERN          reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    STATIC          reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    AUTO            reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    REGISTER        reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    VOID            reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    CHAR            reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    SHORT           reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    INT             reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    LONG            reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    FLOAT           reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    DOUBLE          reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    SIGNED          reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    UNSIGNED        reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    TYPE_NAME       reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    ENUM            reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    STRUCT          reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    UNION           reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    RP              reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    COLON           reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    SEMI            reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    COMMA           reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)
    ASSIGNMENT      reduce using rule 87 (direct_declarator -> direct_declarator LBRACK RBRACK .)


state 128

    (233) unary_operator -> BITAND .

    LP              reduce using rule 233 (unary_operator -> BITAND .)
    INC             reduce using rule 233 (unary_operator -> BITAND .)
    DEC             reduce using rule 233 (unary_operator -> BITAND .)
    SIZEOF          reduce using rule 233 (unary_operator -> BITAND .)
    BITAND          reduce using rule 233 (unary_operator -> BITAND .)
    MUL             reduce using rule 233 (unary_operator -> BITAND .)
    ADD             reduce using rule 233 (unary_operator -> BITAND .)
    SUB             reduce using rule 233 (unary_operator -> BITAND .)
    TILDE           reduce using rule 233 (unary_operator -> BITAND .)
    BANG            reduce using rule 233 (unary_operator -> BITAND .)
    IDENTIFIER      reduce using rule 233 (unary_operator -> BITAND .)
    HEX_LITERAL     reduce using rule 233 (unary_operator -> BITAND .)
    OCTAL_LITERAL   reduce using rule 233 (unary_operator -> BITAND .)
    BINARY_LITERAL  reduce using rule 233 (unary_operator -> BITAND .)
    DECIMAL_LITERAL reduce using rule 233 (unary_operator -> BITAND .)
    FLOATING_POINT_LITERAL reduce using rule 233 (unary_operator -> BITAND .)
    C_STRING_LITERAL reduce using rule 233 (unary_operator -> BITAND .)
    OBJC_STRING_LITERAL reduce using rule 233 (unary_operator -> BITAND .)


state 129

    (225) postfix_expression -> primary_expression .

    LBRACK          reduce using rule 225 (postfix_expression -> primary_expression .)
    LP              reduce using rule 225 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 225 (postfix_expression -> primary_expression .)
    STRUCTACCESS    reduce using rule 225 (postfix_expression -> primary_expression .)
    INC             reduce using rule 225 (postfix_expression -> primary_expression .)
    DEC             reduce using rule 225 (postfix_expression -> primary_expression .)
    ASSIGNMENT      reduce using rule 225 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 225 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 225 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 225 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 225 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 225 (postfix_expression -> primary_expression .)
    LSHIFT_ASSIGN   reduce using rule 225 (postfix_expression -> primary_expression .)
    RSHIFT_ASSIGN   reduce using rule 225 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 225 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 225 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 225 (postfix_expression -> primary_expression .)
    MUL             reduce using rule 225 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 225 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 225 (postfix_expression -> primary_expression .)
    ADD             reduce using rule 225 (postfix_expression -> primary_expression .)
    SUB             reduce using rule 225 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 225 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 225 (postfix_expression -> primary_expression .)
    LT              reduce using rule 225 (postfix_expression -> primary_expression .)
    GT              reduce using rule 225 (postfix_expression -> primary_expression .)
    LE              reduce using rule 225 (postfix_expression -> primary_expression .)
    GE              reduce using rule 225 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 225 (postfix_expression -> primary_expression .)
    NOTEQUAL        reduce using rule 225 (postfix_expression -> primary_expression .)
    BITAND          reduce using rule 225 (postfix_expression -> primary_expression .)
    BITXOR          reduce using rule 225 (postfix_expression -> primary_expression .)
    BITOR           reduce using rule 225 (postfix_expression -> primary_expression .)
    AND             reduce using rule 225 (postfix_expression -> primary_expression .)
    QUESTION        reduce using rule 225 (postfix_expression -> primary_expression .)
    OR              reduce using rule 225 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 225 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 225 (postfix_expression -> primary_expression .)
    RP              reduce using rule 225 (postfix_expression -> primary_expression .)
    RBRACK          reduce using rule 225 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 225 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 225 (postfix_expression -> primary_expression .)


state 130

    (190) logical_or_expression -> logical_and_expression .
    (224) logical_and_expression -> logical_and_expression . AND inclusive_or_expression

    QUESTION        reduce using rule 190 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 190 (logical_or_expression -> logical_and_expression .)
    RBRACK          reduce using rule 190 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 190 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 190 (logical_or_expression -> logical_and_expression .)
    RP              reduce using rule 190 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 190 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 190 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 265


state 131

    (235) unary_operator -> ADD .

    LP              reduce using rule 235 (unary_operator -> ADD .)
    INC             reduce using rule 235 (unary_operator -> ADD .)
    DEC             reduce using rule 235 (unary_operator -> ADD .)
    SIZEOF          reduce using rule 235 (unary_operator -> ADD .)
    BITAND          reduce using rule 235 (unary_operator -> ADD .)
    MUL             reduce using rule 235 (unary_operator -> ADD .)
    ADD             reduce using rule 235 (unary_operator -> ADD .)
    SUB             reduce using rule 235 (unary_operator -> ADD .)
    TILDE           reduce using rule 235 (unary_operator -> ADD .)
    BANG            reduce using rule 235 (unary_operator -> ADD .)
    IDENTIFIER      reduce using rule 235 (unary_operator -> ADD .)
    HEX_LITERAL     reduce using rule 235 (unary_operator -> ADD .)
    OCTAL_LITERAL   reduce using rule 235 (unary_operator -> ADD .)
    BINARY_LITERAL  reduce using rule 235 (unary_operator -> ADD .)
    DECIMAL_LITERAL reduce using rule 235 (unary_operator -> ADD .)
    FLOATING_POINT_LITERAL reduce using rule 235 (unary_operator -> ADD .)
    C_STRING_LITERAL reduce using rule 235 (unary_operator -> ADD .)
    OBJC_STRING_LITERAL reduce using rule 235 (unary_operator -> ADD .)


state 132

    (275) relational_expression -> shift_expression .
    (281) shift_expression -> shift_expression . LSHIFT additive_expression
    (282) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 275 (relational_expression -> shift_expression .)
    GT              reduce using rule 275 (relational_expression -> shift_expression .)
    LE              reduce using rule 275 (relational_expression -> shift_expression .)
    GE              reduce using rule 275 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 275 (relational_expression -> shift_expression .)
    NOTEQUAL        reduce using rule 275 (relational_expression -> shift_expression .)
    BITAND          reduce using rule 275 (relational_expression -> shift_expression .)
    BITXOR          reduce using rule 275 (relational_expression -> shift_expression .)
    BITOR           reduce using rule 275 (relational_expression -> shift_expression .)
    AND             reduce using rule 275 (relational_expression -> shift_expression .)
    QUESTION        reduce using rule 275 (relational_expression -> shift_expression .)
    OR              reduce using rule 275 (relational_expression -> shift_expression .)
    RBRACK          reduce using rule 275 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 275 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 275 (relational_expression -> shift_expression .)
    RP              reduce using rule 275 (relational_expression -> shift_expression .)
    COLON           reduce using rule 275 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 275 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 267
    RSHIFT          shift and go to state 266


state 133

    (270) and_expression -> equality_expression .
    (273) equality_expression -> equality_expression . EQUAL relational_expression
    (274) equality_expression -> equality_expression . NOTEQUAL relational_expression

    BITAND          reduce using rule 270 (and_expression -> equality_expression .)
    BITXOR          reduce using rule 270 (and_expression -> equality_expression .)
    BITOR           reduce using rule 270 (and_expression -> equality_expression .)
    AND             reduce using rule 270 (and_expression -> equality_expression .)
    QUESTION        reduce using rule 270 (and_expression -> equality_expression .)
    OR              reduce using rule 270 (and_expression -> equality_expression .)
    SEMI            reduce using rule 270 (and_expression -> equality_expression .)
    COMMA           reduce using rule 270 (and_expression -> equality_expression .)
    RP              reduce using rule 270 (and_expression -> equality_expression .)
    RBRACK          reduce using rule 270 (and_expression -> equality_expression .)
    COLON           reduce using rule 270 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 270 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 269
    NOTEQUAL        shift and go to state 268


state 134

    (262) primary_expression -> FLOATING_POINT_LITERAL .

    LBRACK          reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    LP              reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    DOT             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    STRUCTACCESS    reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    INC             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    DEC             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    ASSIGNMENT      reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    MUL_ASSIGN      reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    DIV_ASSIGN      reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    MOD_ASSIGN      reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    ADD_ASSIGN      reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    SUB_ASSIGN      reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    AND_ASSIGN      reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    XOR_ASSIGN      reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    OR_ASSIGN       reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    MUL             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    DIV             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    MOD             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    ADD             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    SUB             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    LSHIFT          reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    RSHIFT          reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    LT              reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    GT              reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    LE              reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    GE              reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    EQUAL           reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    NOTEQUAL        reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    BITAND          reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    BITXOR          reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    BITOR           reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    AND             reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    QUESTION        reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    OR              reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    SEMI            reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    COMMA           reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    RP              reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    RBRACK          reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    COLON           reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)
    RBRACE          reduce using rule 262 (primary_expression -> FLOATING_POINT_LITERAL .)


state 135

    (257) primary_expression -> IDENTIFIER .

    LBRACK          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LP              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    STRUCTACCESS    reduce using rule 257 (primary_expression -> IDENTIFIER .)
    INC             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    DEC             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 257 (primary_expression -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 257 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 257 (primary_expression -> IDENTIFIER .)
    MUL             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    DIV             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    ADD             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    SUB             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LE              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    GE              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 257 (primary_expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 257 (primary_expression -> IDENTIFIER .)
    BITAND          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    BITXOR          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    BITOR           reduce using rule 257 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    QUESTION        reduce using rule 257 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    RP              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 257 (primary_expression -> IDENTIFIER .)
    RBRACK          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    SEMI            reduce using rule 257 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 257 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 257 (primary_expression -> IDENTIFIER .)


state 136

    (283) additive_expression -> multiplicative_expression .
    (287) multiplicative_expression -> multiplicative_expression . MUL cast_expression
    (288) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (289) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    ADD             reduce using rule 283 (additive_expression -> multiplicative_expression .)
    SUB             reduce using rule 283 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 283 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 283 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 283 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 283 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 283 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 283 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 283 (additive_expression -> multiplicative_expression .)
    NOTEQUAL        reduce using rule 283 (additive_expression -> multiplicative_expression .)
    BITAND          reduce using rule 283 (additive_expression -> multiplicative_expression .)
    BITXOR          reduce using rule 283 (additive_expression -> multiplicative_expression .)
    BITOR           reduce using rule 283 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 283 (additive_expression -> multiplicative_expression .)
    QUESTION        reduce using rule 283 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 283 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 283 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 283 (additive_expression -> multiplicative_expression .)
    RBRACK          reduce using rule 283 (additive_expression -> multiplicative_expression .)
    RP              reduce using rule 283 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 283 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 283 (additive_expression -> multiplicative_expression .)
    MUL             shift and go to state 270
    DIV             shift and go to state 272
    MOD             shift and go to state 271


state 137

    (238) unary_operator -> BANG .

    LP              reduce using rule 238 (unary_operator -> BANG .)
    INC             reduce using rule 238 (unary_operator -> BANG .)
    DEC             reduce using rule 238 (unary_operator -> BANG .)
    SIZEOF          reduce using rule 238 (unary_operator -> BANG .)
    BITAND          reduce using rule 238 (unary_operator -> BANG .)
    MUL             reduce using rule 238 (unary_operator -> BANG .)
    ADD             reduce using rule 238 (unary_operator -> BANG .)
    SUB             reduce using rule 238 (unary_operator -> BANG .)
    TILDE           reduce using rule 238 (unary_operator -> BANG .)
    BANG            reduce using rule 238 (unary_operator -> BANG .)
    IDENTIFIER      reduce using rule 238 (unary_operator -> BANG .)
    HEX_LITERAL     reduce using rule 238 (unary_operator -> BANG .)
    OCTAL_LITERAL   reduce using rule 238 (unary_operator -> BANG .)
    BINARY_LITERAL  reduce using rule 238 (unary_operator -> BANG .)
    DECIMAL_LITERAL reduce using rule 238 (unary_operator -> BANG .)
    FLOATING_POINT_LITERAL reduce using rule 238 (unary_operator -> BANG .)
    C_STRING_LITERAL reduce using rule 238 (unary_operator -> BANG .)
    OBJC_STRING_LITERAL reduce using rule 238 (unary_operator -> BANG .)


state 138

    (200) unary_expression -> unary_operator . cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    postfix_expression             shift and go to state 118
    primary_expression             shift and go to state 129
    cast_expression                shift and go to state 273
    unary_operator                 shift and go to state 138

state 139

    (116) constant_expression -> conditional_expression .

    COLON           reduce using rule 116 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 116 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 116 (constant_expression -> conditional_expression .)
    RBRACK          reduce using rule 116 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 116 (constant_expression -> conditional_expression .)


state 140

    (264) primary_expression -> OBJC_STRING_LITERAL .

    LBRACK          reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    LP              reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    DOT             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    STRUCTACCESS    reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    INC             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    DEC             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    ASSIGNMENT      reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    MUL             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    DIV             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    MOD             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    ADD             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    SUB             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    LSHIFT          reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    RSHIFT          reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    LT              reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    GT              reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    LE              reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    GE              reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    EQUAL           reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    NOTEQUAL        reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    BITAND          reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    BITXOR          reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    BITOR           reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    AND             reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    QUESTION        reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    OR              reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    SEMI            reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    COMMA           reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    RP              reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    RBRACK          reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    COLON           reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)
    RBRACE          reduce using rule 264 (primary_expression -> OBJC_STRING_LITERAL .)


state 141

    (198) unary_expression -> INC . unary_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 242

    unary_expression               shift and go to state 274
    postfix_expression             shift and go to state 118
    primary_expression             shift and go to state 129
    unary_operator                 shift and go to state 138

state 142

    (90) direct_declarator -> direct_declarator LP RP .

    LBRACK          reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    LP              reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    LBRACE          reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    TYPEDEF         reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    EXTERN          reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    STATIC          reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    AUTO            reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    REGISTER        reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    VOID            reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    CHAR            reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    SHORT           reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    INT             reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    LONG            reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    FLOAT           reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    DOUBLE          reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    SIGNED          reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    UNSIGNED        reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    TYPE_NAME       reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    ENUM            reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    STRUCT          reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    UNION           reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    RP              reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    COLON           reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    SEMI            reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    COMMA           reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)
    ASSIGNMENT      reduce using rule 90 (direct_declarator -> direct_declarator LP RP .)


state 143

    (119) identifier_list -> IDENTIFIER .

    RP              reduce using rule 119 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 119 (identifier_list -> IDENTIFIER .)


state 144

    (88) direct_declarator -> direct_declarator LP parameter_type_list . RP

    RP              shift and go to state 275


state 145

    (154) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 154 (parameter_list -> parameter_declaration .)
    RP              reduce using rule 154 (parameter_list -> parameter_declaration .)
    SEMI            reduce using rule 154 (parameter_list -> parameter_declaration .)
    LBRACE          reduce using rule 154 (parameter_list -> parameter_declaration .)
    TYPEDEF         reduce using rule 154 (parameter_list -> parameter_declaration .)
    EXTERN          reduce using rule 154 (parameter_list -> parameter_declaration .)
    STATIC          reduce using rule 154 (parameter_list -> parameter_declaration .)
    AUTO            reduce using rule 154 (parameter_list -> parameter_declaration .)
    REGISTER        reduce using rule 154 (parameter_list -> parameter_declaration .)
    VOID            reduce using rule 154 (parameter_list -> parameter_declaration .)
    CHAR            reduce using rule 154 (parameter_list -> parameter_declaration .)
    SHORT           reduce using rule 154 (parameter_list -> parameter_declaration .)
    INT             reduce using rule 154 (parameter_list -> parameter_declaration .)
    LONG            reduce using rule 154 (parameter_list -> parameter_declaration .)
    FLOAT           reduce using rule 154 (parameter_list -> parameter_declaration .)
    DOUBLE          reduce using rule 154 (parameter_list -> parameter_declaration .)
    SIGNED          reduce using rule 154 (parameter_list -> parameter_declaration .)
    UNSIGNED        reduce using rule 154 (parameter_list -> parameter_declaration .)
    TYPE_NAME       reduce using rule 154 (parameter_list -> parameter_declaration .)
    ENUM            reduce using rule 154 (parameter_list -> parameter_declaration .)
    STRUCT          reduce using rule 154 (parameter_list -> parameter_declaration .)
    UNION           reduce using rule 154 (parameter_list -> parameter_declaration .)


state 146

    (194) parameter_declaration -> declaration_specifiers . declarator
    (195) parameter_declaration -> declaration_specifiers . abstract_declarator
    (196) parameter_declaration -> declaration_specifiers .
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (220) abstract_declarator -> . pointer
    (221) abstract_declarator -> . direct_abstract_declarator
    (222) abstract_declarator -> . pointer direct_abstract_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (246) direct_abstract_declarator -> . LP abstract_declarator RP
    (247) direct_abstract_declarator -> . LBRACK RBRACK
    (248) direct_abstract_declarator -> . LBRACK constant_expression RBRACK
    (249) direct_abstract_declarator -> . direct_abstract_declarator LBRACK RBRACK
    (250) direct_abstract_declarator -> . direct_abstract_declarator LBRACK constant_expression RBRACK
    (251) direct_abstract_declarator -> . LP RP
    (252) direct_abstract_declarator -> . LP parameter_type_list RP
    (253) direct_abstract_declarator -> . direct_abstract_declarator LP RP
    (254) direct_abstract_declarator -> . direct_abstract_declarator LP parameter_type_list RP

    COMMA           reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    RP              reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    SEMI            reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    LBRACE          reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    TYPEDEF         reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    EXTERN          reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    STATIC          reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    AUTO            reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    REGISTER        reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    VOID            reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    CHAR            reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    SHORT           reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    INT             reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    LONG            reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    FLOAT           reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    DOUBLE          reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    SIGNED          reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    UNSIGNED        reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    TYPE_NAME       reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    ENUM            reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    STRUCT          reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    UNION           reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 276
    LBRACK          shift and go to state 277

    direct_declarator              shift and go to state 34
    abstract_declarator            shift and go to state 278
    declarator                     shift and go to state 279
    direct_abstract_declarator     shift and go to state 280
    pointer                        shift and go to state 281

state 147

    (89) direct_declarator -> direct_declarator LP identifier_list . RP
    (120) identifier_list -> identifier_list . COMMA IDENTIFIER

    RP              shift and go to state 282
    COMMA           shift and go to state 283


state 148

    (117) parameter_type_list -> parameter_list .
    (118) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (155) parameter_list -> parameter_list . COMMA parameter_declaration

    RP              reduce using rule 117 (parameter_type_list -> parameter_list .)
    SEMI            reduce using rule 117 (parameter_type_list -> parameter_list .)
    LBRACE          reduce using rule 117 (parameter_type_list -> parameter_list .)
    TYPEDEF         reduce using rule 117 (parameter_type_list -> parameter_list .)
    EXTERN          reduce using rule 117 (parameter_type_list -> parameter_list .)
    STATIC          reduce using rule 117 (parameter_type_list -> parameter_list .)
    AUTO            reduce using rule 117 (parameter_type_list -> parameter_list .)
    REGISTER        reduce using rule 117 (parameter_type_list -> parameter_list .)
    VOID            reduce using rule 117 (parameter_type_list -> parameter_list .)
    CHAR            reduce using rule 117 (parameter_type_list -> parameter_list .)
    SHORT           reduce using rule 117 (parameter_type_list -> parameter_list .)
    INT             reduce using rule 117 (parameter_type_list -> parameter_list .)
    LONG            reduce using rule 117 (parameter_type_list -> parameter_list .)
    FLOAT           reduce using rule 117 (parameter_type_list -> parameter_list .)
    DOUBLE          reduce using rule 117 (parameter_type_list -> parameter_list .)
    SIGNED          reduce using rule 117 (parameter_type_list -> parameter_list .)
    UNSIGNED        reduce using rule 117 (parameter_type_list -> parameter_list .)
    TYPE_NAME       reduce using rule 117 (parameter_type_list -> parameter_list .)
    ENUM            reduce using rule 117 (parameter_type_list -> parameter_list .)
    STRUCT          reduce using rule 117 (parameter_type_list -> parameter_list .)
    UNION           reduce using rule 117 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 284


state 149

    (44) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (95) init_declarator -> . declarator
    (96) init_declarator -> . declarator ASSIGNMENT initializer
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP

    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24

    direct_declarator              shift and go to state 34
    init_declarator                shift and go to state 285
    declarator                     shift and go to state 154
    pointer                        shift and go to state 16

state 150

    (17) declaration -> declaration_specifiers init_declarator_list SEMI .

    END             reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEDEF         reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ADD             reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SUB             reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXTERN          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AUTO            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    REGISTER        reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPE_NAME       reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNION           reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MUL             reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IDENTIFIER      reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LP              reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RBRACE          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DO              reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GOTO            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INC             reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEC             reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIZEOF          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BITAND          reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TILDE           reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BANG            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    HEX_LITERAL     reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    OCTAL_LITERAL   reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BINARY_LITERAL  reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DECIMAL_LITERAL reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    C_STRING_LITERAL reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    OBJC_STRING_LITERAL reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INTERFACE       reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IMPLEMENTATION  reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PROTOCOL        reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CLASS           reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 17 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 151

    (96) init_declarator -> declarator ASSIGNMENT . initializer
    (134) initializer -> . assignment_expression
    (135) initializer -> . LBRACE initializer_list RBRACE
    (136) initializer -> . LBRACE initializer_list COMMA RBRACE
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    LBRACE          shift and go to state 288
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    initializer                    shift and go to state 286
    and_expression                 shift and go to state 113
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 287
    multiplicative_expression      shift and go to state 136
    conditional_expression         shift and go to state 182
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133

state 152

    (12) function_definition -> declaration_specifiers declarator compound_statement .

    END             reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    ADD             reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    SUB             reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPE_NAME       reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    MUL             reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    IDENTIFIER      reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    LP              reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    INTERFACE       reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    IMPLEMENTATION  reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    PROTOCOL        reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    CLASS           reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 12 (function_definition -> declaration_specifiers declarator compound_statement .)


state 153

    (11) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (37) declaration_list -> declaration_list . declaration
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 289
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 184

state 154

    (95) init_declarator -> declarator .
    (96) init_declarator -> declarator . ASSIGNMENT initializer

    SEMI            reduce using rule 95 (init_declarator -> declarator .)
    COMMA           reduce using rule 95 (init_declarator -> declarator .)
    ASSIGNMENT      shift and go to state 151


state 155

    (123) statement -> expression_statement .

    RBRACE          reduce using rule 123 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 123 (statement -> expression_statement .)
    CASE            reduce using rule 123 (statement -> expression_statement .)
    DEFAULT         reduce using rule 123 (statement -> expression_statement .)
    LBRACE          reduce using rule 123 (statement -> expression_statement .)
    SEMI            reduce using rule 123 (statement -> expression_statement .)
    IF              reduce using rule 123 (statement -> expression_statement .)
    SWITCH          reduce using rule 123 (statement -> expression_statement .)
    WHILE           reduce using rule 123 (statement -> expression_statement .)
    DO              reduce using rule 123 (statement -> expression_statement .)
    FOR             reduce using rule 123 (statement -> expression_statement .)
    GOTO            reduce using rule 123 (statement -> expression_statement .)
    CONTINUE        reduce using rule 123 (statement -> expression_statement .)
    BREAK           reduce using rule 123 (statement -> expression_statement .)
    RETURN          reduce using rule 123 (statement -> expression_statement .)
    INC             reduce using rule 123 (statement -> expression_statement .)
    DEC             reduce using rule 123 (statement -> expression_statement .)
    SIZEOF          reduce using rule 123 (statement -> expression_statement .)
    BITAND          reduce using rule 123 (statement -> expression_statement .)
    MUL             reduce using rule 123 (statement -> expression_statement .)
    ADD             reduce using rule 123 (statement -> expression_statement .)
    SUB             reduce using rule 123 (statement -> expression_statement .)
    TILDE           reduce using rule 123 (statement -> expression_statement .)
    BANG            reduce using rule 123 (statement -> expression_statement .)
    HEX_LITERAL     reduce using rule 123 (statement -> expression_statement .)
    OCTAL_LITERAL   reduce using rule 123 (statement -> expression_statement .)
    BINARY_LITERAL  reduce using rule 123 (statement -> expression_statement .)
    DECIMAL_LITERAL reduce using rule 123 (statement -> expression_statement .)
    FLOATING_POINT_LITERAL reduce using rule 123 (statement -> expression_statement .)
    C_STRING_LITERAL reduce using rule 123 (statement -> expression_statement .)
    OBJC_STRING_LITERAL reduce using rule 123 (statement -> expression_statement .)
    LP              reduce using rule 123 (statement -> expression_statement .)
    ELSE            reduce using rule 123 (statement -> expression_statement .)


state 156

    (125) statement -> iteration_statement .

    RBRACE          reduce using rule 125 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 125 (statement -> iteration_statement .)
    CASE            reduce using rule 125 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 125 (statement -> iteration_statement .)
    LBRACE          reduce using rule 125 (statement -> iteration_statement .)
    SEMI            reduce using rule 125 (statement -> iteration_statement .)
    IF              reduce using rule 125 (statement -> iteration_statement .)
    SWITCH          reduce using rule 125 (statement -> iteration_statement .)
    WHILE           reduce using rule 125 (statement -> iteration_statement .)
    DO              reduce using rule 125 (statement -> iteration_statement .)
    FOR             reduce using rule 125 (statement -> iteration_statement .)
    GOTO            reduce using rule 125 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 125 (statement -> iteration_statement .)
    BREAK           reduce using rule 125 (statement -> iteration_statement .)
    RETURN          reduce using rule 125 (statement -> iteration_statement .)
    INC             reduce using rule 125 (statement -> iteration_statement .)
    DEC             reduce using rule 125 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 125 (statement -> iteration_statement .)
    BITAND          reduce using rule 125 (statement -> iteration_statement .)
    MUL             reduce using rule 125 (statement -> iteration_statement .)
    ADD             reduce using rule 125 (statement -> iteration_statement .)
    SUB             reduce using rule 125 (statement -> iteration_statement .)
    TILDE           reduce using rule 125 (statement -> iteration_statement .)
    BANG            reduce using rule 125 (statement -> iteration_statement .)
    HEX_LITERAL     reduce using rule 125 (statement -> iteration_statement .)
    OCTAL_LITERAL   reduce using rule 125 (statement -> iteration_statement .)
    BINARY_LITERAL  reduce using rule 125 (statement -> iteration_statement .)
    DECIMAL_LITERAL reduce using rule 125 (statement -> iteration_statement .)
    FLOATING_POINT_LITERAL reduce using rule 125 (statement -> iteration_statement .)
    C_STRING_LITERAL reduce using rule 125 (statement -> iteration_statement .)
    OBJC_STRING_LITERAL reduce using rule 125 (statement -> iteration_statement .)
    LP              reduce using rule 125 (statement -> iteration_statement .)
    ELSE            reduce using rule 125 (statement -> iteration_statement .)


state 157

    (168) jump_statement -> GOTO . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 290


state 158

    (121) statement -> labeled_statement .

    RBRACE          reduce using rule 121 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 121 (statement -> labeled_statement .)
    CASE            reduce using rule 121 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 121 (statement -> labeled_statement .)
    LBRACE          reduce using rule 121 (statement -> labeled_statement .)
    SEMI            reduce using rule 121 (statement -> labeled_statement .)
    IF              reduce using rule 121 (statement -> labeled_statement .)
    SWITCH          reduce using rule 121 (statement -> labeled_statement .)
    WHILE           reduce using rule 121 (statement -> labeled_statement .)
    DO              reduce using rule 121 (statement -> labeled_statement .)
    FOR             reduce using rule 121 (statement -> labeled_statement .)
    GOTO            reduce using rule 121 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 121 (statement -> labeled_statement .)
    BREAK           reduce using rule 121 (statement -> labeled_statement .)
    RETURN          reduce using rule 121 (statement -> labeled_statement .)
    INC             reduce using rule 121 (statement -> labeled_statement .)
    DEC             reduce using rule 121 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 121 (statement -> labeled_statement .)
    BITAND          reduce using rule 121 (statement -> labeled_statement .)
    MUL             reduce using rule 121 (statement -> labeled_statement .)
    ADD             reduce using rule 121 (statement -> labeled_statement .)
    SUB             reduce using rule 121 (statement -> labeled_statement .)
    TILDE           reduce using rule 121 (statement -> labeled_statement .)
    BANG            reduce using rule 121 (statement -> labeled_statement .)
    HEX_LITERAL     reduce using rule 121 (statement -> labeled_statement .)
    OCTAL_LITERAL   reduce using rule 121 (statement -> labeled_statement .)
    BINARY_LITERAL  reduce using rule 121 (statement -> labeled_statement .)
    DECIMAL_LITERAL reduce using rule 121 (statement -> labeled_statement .)
    FLOATING_POINT_LITERAL reduce using rule 121 (statement -> labeled_statement .)
    C_STRING_LITERAL reduce using rule 121 (statement -> labeled_statement .)
    OBJC_STRING_LITERAL reduce using rule 121 (statement -> labeled_statement .)
    LP              reduce using rule 121 (statement -> labeled_statement .)
    ELSE            reduce using rule 121 (statement -> labeled_statement .)


state 159

    (40) compound_statement -> LBRACE declaration_list . RBRACE
    (41) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (37) declaration_list -> declaration_list . declaration
    (91) statement_list -> . statement
    (92) statement_list -> . statement_list statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    RBRACE          shift and go to state 292
    TYPEDEF         shift and go to state 30
    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    storage_class_specifier        shift and go to state 1
    unary_expression               shift and go to state 161
    struct_or_union_specifier      shift and go to state 3
    exclusive_or_expression        shift and go to state 109
    type_declaration               shift and go to state 8
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    selection_statement            shift and go to state 178
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 171
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    struct_or_union                shift and go to state 6
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 184
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    enum_specifier                 shift and go to state 35
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    statement_list                 shift and go to state 291
    expression                     shift and go to state 166

state 160

    (171) jump_statement -> RETURN . SEMI
    (172) jump_statement -> RETURN . expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    SEMI            shift and go to state 293
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120
    assignment_expression          shift and go to state 180
    unary_expression               shift and go to state 161
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    expression                     shift and go to state 294
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    primary_expression             shift and go to state 129

state 161

    (174) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (239) cast_expression -> unary_expression .
    (203) assignment_operator -> . ASSIGNMENT
    (204) assignment_operator -> . MUL_ASSIGN
    (205) assignment_operator -> . DIV_ASSIGN
    (206) assignment_operator -> . MOD_ASSIGN
    (207) assignment_operator -> . ADD_ASSIGN
    (208) assignment_operator -> . SUB_ASSIGN
    (209) assignment_operator -> . LSHIFT_ASSIGN
    (210) assignment_operator -> . RSHIFT_ASSIGN
    (211) assignment_operator -> . AND_ASSIGN
    (212) assignment_operator -> . XOR_ASSIGN
    (213) assignment_operator -> . OR_ASSIGN

    MUL             reduce using rule 239 (cast_expression -> unary_expression .)
    DIV             reduce using rule 239 (cast_expression -> unary_expression .)
    MOD             reduce using rule 239 (cast_expression -> unary_expression .)
    ADD             reduce using rule 239 (cast_expression -> unary_expression .)
    SUB             reduce using rule 239 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 239 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 239 (cast_expression -> unary_expression .)
    LT              reduce using rule 239 (cast_expression -> unary_expression .)
    GT              reduce using rule 239 (cast_expression -> unary_expression .)
    LE              reduce using rule 239 (cast_expression -> unary_expression .)
    GE              reduce using rule 239 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 239 (cast_expression -> unary_expression .)
    NOTEQUAL        reduce using rule 239 (cast_expression -> unary_expression .)
    BITAND          reduce using rule 239 (cast_expression -> unary_expression .)
    BITXOR          reduce using rule 239 (cast_expression -> unary_expression .)
    BITOR           reduce using rule 239 (cast_expression -> unary_expression .)
    AND             reduce using rule 239 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 239 (cast_expression -> unary_expression .)
    OR              reduce using rule 239 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 239 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 239 (cast_expression -> unary_expression .)
    RP              reduce using rule 239 (cast_expression -> unary_expression .)
    RBRACK          reduce using rule 239 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 239 (cast_expression -> unary_expression .)
    COLON           reduce using rule 239 (cast_expression -> unary_expression .)
    ASSIGNMENT      shift and go to state 298
    MUL_ASSIGN      shift and go to state 303
    DIV_ASSIGN      shift and go to state 304
    MOD_ASSIGN      shift and go to state 296
    ADD_ASSIGN      shift and go to state 305
    SUB_ASSIGN      shift and go to state 295
    LSHIFT_ASSIGN   shift and go to state 301
    RSHIFT_ASSIGN   shift and go to state 299
    AND_ASSIGN      shift and go to state 302
    XOR_ASSIGN      shift and go to state 297
    OR_ASSIGN       shift and go to state 300

    assignment_operator            shift and go to state 306

state 162

    (122) statement -> compound_statement .

    RBRACE          reduce using rule 122 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 122 (statement -> compound_statement .)
    CASE            reduce using rule 122 (statement -> compound_statement .)
    DEFAULT         reduce using rule 122 (statement -> compound_statement .)
    LBRACE          reduce using rule 122 (statement -> compound_statement .)
    SEMI            reduce using rule 122 (statement -> compound_statement .)
    IF              reduce using rule 122 (statement -> compound_statement .)
    SWITCH          reduce using rule 122 (statement -> compound_statement .)
    WHILE           reduce using rule 122 (statement -> compound_statement .)
    DO              reduce using rule 122 (statement -> compound_statement .)
    FOR             reduce using rule 122 (statement -> compound_statement .)
    GOTO            reduce using rule 122 (statement -> compound_statement .)
    CONTINUE        reduce using rule 122 (statement -> compound_statement .)
    BREAK           reduce using rule 122 (statement -> compound_statement .)
    RETURN          reduce using rule 122 (statement -> compound_statement .)
    INC             reduce using rule 122 (statement -> compound_statement .)
    DEC             reduce using rule 122 (statement -> compound_statement .)
    SIZEOF          reduce using rule 122 (statement -> compound_statement .)
    BITAND          reduce using rule 122 (statement -> compound_statement .)
    MUL             reduce using rule 122 (statement -> compound_statement .)
    ADD             reduce using rule 122 (statement -> compound_statement .)
    SUB             reduce using rule 122 (statement -> compound_statement .)
    TILDE           reduce using rule 122 (statement -> compound_statement .)
    BANG            reduce using rule 122 (statement -> compound_statement .)
    HEX_LITERAL     reduce using rule 122 (statement -> compound_statement .)
    OCTAL_LITERAL   reduce using rule 122 (statement -> compound_statement .)
    BINARY_LITERAL  reduce using rule 122 (statement -> compound_statement .)
    DECIMAL_LITERAL reduce using rule 122 (statement -> compound_statement .)
    FLOATING_POINT_LITERAL reduce using rule 122 (statement -> compound_statement .)
    C_STRING_LITERAL reduce using rule 122 (statement -> compound_statement .)
    OBJC_STRING_LITERAL reduce using rule 122 (statement -> compound_statement .)
    LP              reduce using rule 122 (statement -> compound_statement .)
    ELSE            reduce using rule 122 (statement -> compound_statement .)


state 163

    (166) iteration_statement -> FOR . LP expression_statement expression_statement RP statement
    (167) iteration_statement -> FOR . LP expression_statement expression_statement expression RP

    LP              shift and go to state 307


state 164

    (169) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 308


state 165

    (39) compound_statement -> LBRACE statement_list . RBRACE
    (92) statement_list -> statement_list . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    RBRACE          shift and go to state 310
    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 309
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 166

    (160) expression_statement -> expression . SEMI
    (193) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 312
    COMMA           shift and go to state 311


state 167

    (158) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 313


state 168

    (164) iteration_statement -> WHILE . LP expression RP statement

    LP              shift and go to state 314


state 169

    (157) labeled_statement -> CASE . constant_expression COLON statement
    (116) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_operator                 shift and go to state 138
    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    and_expression                 shift and go to state 113
    conditional_expression         shift and go to state 139
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    constant_expression            shift and go to state 315
    relational_expression          shift and go to state 120

state 170

    (163) selection_statement -> SWITCH . LP expression RP statement

    LP              shift and go to state 316


state 171

    (91) statement_list -> statement .

    RBRACE          reduce using rule 91 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 91 (statement_list -> statement .)
    CASE            reduce using rule 91 (statement_list -> statement .)
    DEFAULT         reduce using rule 91 (statement_list -> statement .)
    LBRACE          reduce using rule 91 (statement_list -> statement .)
    SEMI            reduce using rule 91 (statement_list -> statement .)
    IF              reduce using rule 91 (statement_list -> statement .)
    SWITCH          reduce using rule 91 (statement_list -> statement .)
    WHILE           reduce using rule 91 (statement_list -> statement .)
    DO              reduce using rule 91 (statement_list -> statement .)
    FOR             reduce using rule 91 (statement_list -> statement .)
    GOTO            reduce using rule 91 (statement_list -> statement .)
    CONTINUE        reduce using rule 91 (statement_list -> statement .)
    BREAK           reduce using rule 91 (statement_list -> statement .)
    RETURN          reduce using rule 91 (statement_list -> statement .)
    INC             reduce using rule 91 (statement_list -> statement .)
    DEC             reduce using rule 91 (statement_list -> statement .)
    SIZEOF          reduce using rule 91 (statement_list -> statement .)
    BITAND          reduce using rule 91 (statement_list -> statement .)
    MUL             reduce using rule 91 (statement_list -> statement .)
    ADD             reduce using rule 91 (statement_list -> statement .)
    SUB             reduce using rule 91 (statement_list -> statement .)
    TILDE           reduce using rule 91 (statement_list -> statement .)
    BANG            reduce using rule 91 (statement_list -> statement .)
    HEX_LITERAL     reduce using rule 91 (statement_list -> statement .)
    OCTAL_LITERAL   reduce using rule 91 (statement_list -> statement .)
    BINARY_LITERAL  reduce using rule 91 (statement_list -> statement .)
    DECIMAL_LITERAL reduce using rule 91 (statement_list -> statement .)
    FLOATING_POINT_LITERAL reduce using rule 91 (statement_list -> statement .)
    C_STRING_LITERAL reduce using rule 91 (statement_list -> statement .)
    OBJC_STRING_LITERAL reduce using rule 91 (statement_list -> statement .)
    LP              reduce using rule 91 (statement_list -> statement .)


state 172

    (156) labeled_statement -> IDENTIFIER . COLON statement
    (257) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 317
    LBRACK          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LP              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    STRUCTACCESS    reduce using rule 257 (primary_expression -> IDENTIFIER .)
    INC             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    DEC             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 257 (primary_expression -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 257 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 257 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 257 (primary_expression -> IDENTIFIER .)
    MUL             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    DIV             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    ADD             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    SUB             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    LE              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    GE              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 257 (primary_expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 257 (primary_expression -> IDENTIFIER .)
    BITAND          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    BITXOR          reduce using rule 257 (primary_expression -> IDENTIFIER .)
    BITOR           reduce using rule 257 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 257 (primary_expression -> IDENTIFIER .)
    QUESTION        reduce using rule 257 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 257 (primary_expression -> IDENTIFIER .)
    SEMI            reduce using rule 257 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 257 (primary_expression -> IDENTIFIER .)


state 173

    (126) statement -> jump_statement .

    RBRACE          reduce using rule 126 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 126 (statement -> jump_statement .)
    CASE            reduce using rule 126 (statement -> jump_statement .)
    DEFAULT         reduce using rule 126 (statement -> jump_statement .)
    LBRACE          reduce using rule 126 (statement -> jump_statement .)
    SEMI            reduce using rule 126 (statement -> jump_statement .)
    IF              reduce using rule 126 (statement -> jump_statement .)
    SWITCH          reduce using rule 126 (statement -> jump_statement .)
    WHILE           reduce using rule 126 (statement -> jump_statement .)
    DO              reduce using rule 126 (statement -> jump_statement .)
    FOR             reduce using rule 126 (statement -> jump_statement .)
    GOTO            reduce using rule 126 (statement -> jump_statement .)
    CONTINUE        reduce using rule 126 (statement -> jump_statement .)
    BREAK           reduce using rule 126 (statement -> jump_statement .)
    RETURN          reduce using rule 126 (statement -> jump_statement .)
    INC             reduce using rule 126 (statement -> jump_statement .)
    DEC             reduce using rule 126 (statement -> jump_statement .)
    SIZEOF          reduce using rule 126 (statement -> jump_statement .)
    BITAND          reduce using rule 126 (statement -> jump_statement .)
    MUL             reduce using rule 126 (statement -> jump_statement .)
    ADD             reduce using rule 126 (statement -> jump_statement .)
    SUB             reduce using rule 126 (statement -> jump_statement .)
    TILDE           reduce using rule 126 (statement -> jump_statement .)
    BANG            reduce using rule 126 (statement -> jump_statement .)
    HEX_LITERAL     reduce using rule 126 (statement -> jump_statement .)
    OCTAL_LITERAL   reduce using rule 126 (statement -> jump_statement .)
    BINARY_LITERAL  reduce using rule 126 (statement -> jump_statement .)
    DECIMAL_LITERAL reduce using rule 126 (statement -> jump_statement .)
    FLOATING_POINT_LITERAL reduce using rule 126 (statement -> jump_statement .)
    C_STRING_LITERAL reduce using rule 126 (statement -> jump_statement .)
    OBJC_STRING_LITERAL reduce using rule 126 (statement -> jump_statement .)
    LP              reduce using rule 126 (statement -> jump_statement .)
    ELSE            reduce using rule 126 (statement -> jump_statement .)


state 174

    (170) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 318


state 175

    (165) iteration_statement -> DO . statement WHILE LP expression RP SEMI
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 319
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 176

    (38) compound_statement -> LBRACE RBRACE .

    END             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    TYPEDEF         reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ADD             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    SUB             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    STATIC          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    AUTO            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    REGISTER        reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    TYPE_NAME       reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    MUL             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LP              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    STRUCT          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    UNION           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    GOTO            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INC             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    DEC             reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    BITAND          reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    TILDE           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    BANG            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    HEX_LITERAL     reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    OCTAL_LITERAL   reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    BINARY_LITERAL  reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    DECIMAL_LITERAL reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    FLOATING_POINT_LITERAL reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    C_STRING_LITERAL reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    OBJC_STRING_LITERAL reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    INTERFACE       reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    IMPLEMENTATION  reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    PROTOCOL        reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    CLASS           reduce using rule 38 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 38 (compound_statement -> LBRACE RBRACE .)


state 177

    (159) expression_statement -> SEMI .

    RBRACE          reduce using rule 159 (expression_statement -> SEMI .)
    IDENTIFIER      reduce using rule 159 (expression_statement -> SEMI .)
    CASE            reduce using rule 159 (expression_statement -> SEMI .)
    DEFAULT         reduce using rule 159 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 159 (expression_statement -> SEMI .)
    SEMI            reduce using rule 159 (expression_statement -> SEMI .)
    IF              reduce using rule 159 (expression_statement -> SEMI .)
    SWITCH          reduce using rule 159 (expression_statement -> SEMI .)
    WHILE           reduce using rule 159 (expression_statement -> SEMI .)
    DO              reduce using rule 159 (expression_statement -> SEMI .)
    FOR             reduce using rule 159 (expression_statement -> SEMI .)
    GOTO            reduce using rule 159 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 159 (expression_statement -> SEMI .)
    BREAK           reduce using rule 159 (expression_statement -> SEMI .)
    RETURN          reduce using rule 159 (expression_statement -> SEMI .)
    INC             reduce using rule 159 (expression_statement -> SEMI .)
    DEC             reduce using rule 159 (expression_statement -> SEMI .)
    SIZEOF          reduce using rule 159 (expression_statement -> SEMI .)
    BITAND          reduce using rule 159 (expression_statement -> SEMI .)
    MUL             reduce using rule 159 (expression_statement -> SEMI .)
    ADD             reduce using rule 159 (expression_statement -> SEMI .)
    SUB             reduce using rule 159 (expression_statement -> SEMI .)
    TILDE           reduce using rule 159 (expression_statement -> SEMI .)
    BANG            reduce using rule 159 (expression_statement -> SEMI .)
    HEX_LITERAL     reduce using rule 159 (expression_statement -> SEMI .)
    OCTAL_LITERAL   reduce using rule 159 (expression_statement -> SEMI .)
    BINARY_LITERAL  reduce using rule 159 (expression_statement -> SEMI .)
    DECIMAL_LITERAL reduce using rule 159 (expression_statement -> SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 159 (expression_statement -> SEMI .)
    C_STRING_LITERAL reduce using rule 159 (expression_statement -> SEMI .)
    OBJC_STRING_LITERAL reduce using rule 159 (expression_statement -> SEMI .)
    LP              reduce using rule 159 (expression_statement -> SEMI .)
    ELSE            reduce using rule 159 (expression_statement -> SEMI .)
    RP              reduce using rule 159 (expression_statement -> SEMI .)


state 178

    (124) statement -> selection_statement .

    RBRACE          reduce using rule 124 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 124 (statement -> selection_statement .)
    CASE            reduce using rule 124 (statement -> selection_statement .)
    DEFAULT         reduce using rule 124 (statement -> selection_statement .)
    LBRACE          reduce using rule 124 (statement -> selection_statement .)
    SEMI            reduce using rule 124 (statement -> selection_statement .)
    IF              reduce using rule 124 (statement -> selection_statement .)
    SWITCH          reduce using rule 124 (statement -> selection_statement .)
    WHILE           reduce using rule 124 (statement -> selection_statement .)
    DO              reduce using rule 124 (statement -> selection_statement .)
    FOR             reduce using rule 124 (statement -> selection_statement .)
    GOTO            reduce using rule 124 (statement -> selection_statement .)
    CONTINUE        reduce using rule 124 (statement -> selection_statement .)
    BREAK           reduce using rule 124 (statement -> selection_statement .)
    RETURN          reduce using rule 124 (statement -> selection_statement .)
    INC             reduce using rule 124 (statement -> selection_statement .)
    DEC             reduce using rule 124 (statement -> selection_statement .)
    SIZEOF          reduce using rule 124 (statement -> selection_statement .)
    BITAND          reduce using rule 124 (statement -> selection_statement .)
    MUL             reduce using rule 124 (statement -> selection_statement .)
    ADD             reduce using rule 124 (statement -> selection_statement .)
    SUB             reduce using rule 124 (statement -> selection_statement .)
    TILDE           reduce using rule 124 (statement -> selection_statement .)
    BANG            reduce using rule 124 (statement -> selection_statement .)
    HEX_LITERAL     reduce using rule 124 (statement -> selection_statement .)
    OCTAL_LITERAL   reduce using rule 124 (statement -> selection_statement .)
    BINARY_LITERAL  reduce using rule 124 (statement -> selection_statement .)
    DECIMAL_LITERAL reduce using rule 124 (statement -> selection_statement .)
    FLOATING_POINT_LITERAL reduce using rule 124 (statement -> selection_statement .)
    C_STRING_LITERAL reduce using rule 124 (statement -> selection_statement .)
    OBJC_STRING_LITERAL reduce using rule 124 (statement -> selection_statement .)
    LP              reduce using rule 124 (statement -> selection_statement .)
    ELSE            reduce using rule 124 (statement -> selection_statement .)


state 179

    (265) primary_expression -> LP . expression RP
    (240) cast_expression -> LP . type_name RP cast_expression
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (186) type_name -> . specifier_qualifier_list
    (187) type_name -> . specifier_qualifier_list abstract_declarator
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    ENUM            shift and go to state 31
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    unary_expression               shift and go to state 161
    struct_or_union_specifier      shift and go to state 3
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 113
    type_specifier                 shift and go to state 88
    inclusive_or_expression        shift and go to state 116
    type_name                      shift and go to state 259
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    struct_or_union                shift and go to state 6
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    enum_specifier                 shift and go to state 35
    specifier_qualifier_list       shift and go to state 260
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 261

state 180

    (192) expression -> assignment_expression .

    SEMI            reduce using rule 192 (expression -> assignment_expression .)
    COMMA           reduce using rule 192 (expression -> assignment_expression .)
    RP              reduce using rule 192 (expression -> assignment_expression .)
    RBRACK          reduce using rule 192 (expression -> assignment_expression .)
    COLON           reduce using rule 192 (expression -> assignment_expression .)


state 181

    (161) selection_statement -> IF . LP expression RP statement
    (162) selection_statement -> IF . LP expression RP statement ELSE statement

    LP              shift and go to state 320


state 182

    (173) assignment_expression -> conditional_expression .

    RP              reduce using rule 173 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 173 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 173 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 173 (assignment_expression -> conditional_expression .)
    RBRACK          reduce using rule 173 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 173 (assignment_expression -> conditional_expression .)


state 183

    (13) function_definition -> declarator declaration_list compound_statement .

    END             reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    ADD             reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    SUB             reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    STATIC          reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    AUTO            reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    MUL             reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    LP              reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    ENUM            reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    UNION           reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    INTERFACE       reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    IMPLEMENTATION  reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    PROTOCOL        reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    CLASS           reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 13 (function_definition -> declarator declaration_list compound_statement .)


state 184

    (37) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 37 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 37 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 37 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 37 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 37 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 37 (declaration_list -> declaration_list declaration .)
    TYPE_NAME       reduce using rule 37 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 37 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 37 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 37 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 37 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 37 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 37 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 37 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 37 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 37 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    INC             reduce using rule 37 (declaration_list -> declaration_list declaration .)
    DEC             reduce using rule 37 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    BITAND          reduce using rule 37 (declaration_list -> declaration_list declaration .)
    MUL             reduce using rule 37 (declaration_list -> declaration_list declaration .)
    ADD             reduce using rule 37 (declaration_list -> declaration_list declaration .)
    SUB             reduce using rule 37 (declaration_list -> declaration_list declaration .)
    TILDE           reduce using rule 37 (declaration_list -> declaration_list declaration .)
    BANG            reduce using rule 37 (declaration_list -> declaration_list declaration .)
    HEX_LITERAL     reduce using rule 37 (declaration_list -> declaration_list declaration .)
    OCTAL_LITERAL   reduce using rule 37 (declaration_list -> declaration_list declaration .)
    BINARY_LITERAL  reduce using rule 37 (declaration_list -> declaration_list declaration .)
    DECIMAL_LITERAL reduce using rule 37 (declaration_list -> declaration_list declaration .)
    FLOATING_POINT_LITERAL reduce using rule 37 (declaration_list -> declaration_list declaration .)
    C_STRING_LITERAL reduce using rule 37 (declaration_list -> declaration_list declaration .)
    OBJC_STRING_LITERAL reduce using rule 37 (declaration_list -> declaration_list declaration .)
    LP              reduce using rule 37 (declaration_list -> declaration_list declaration .)


state 185

    (18) class_interface -> INTERFACE class_name instance_variables . interface_declaration_list END
    (51) interface_declaration_list -> . declaration
    (52) interface_declaration_list -> . method_declaration
    (53) interface_declaration_list -> . interface_declaration_list declaration
    (54) interface_declaration_list -> . interface_declaration_list method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    interface_declaration_list     shift and go to state 321
    method_declaration             shift and go to state 79
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    enum_specifier                 shift and go to state 35
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 84

state 186

    (19) class_interface -> INTERFACE class_name COLON . superclass_name instance_variables interface_declaration_list END
    (21) class_interface -> INTERFACE class_name COLON . superclass_name protocol_reference_list instance_variables interface_declaration_list END
    (46) superclass_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 225

    superclass_name                shift and go to state 322

state 187

    (24) category_interface -> INTERFACE class_name ( . category_name ) interface_declaration_list END
    (25) category_interface -> INTERFACE class_name ( . category_name ) protocol_reference_list interface_declaration_list END
    (62) category_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 222

    category_name                  shift and go to state 323

state 188

    (20) class_interface -> INTERFACE protocol_reference_list instance_variables . interface_declaration_list END
    (51) interface_declaration_list -> . declaration
    (52) interface_declaration_list -> . method_declaration
    (53) interface_declaration_list -> . interface_declaration_list declaration
    (54) interface_declaration_list -> . interface_declaration_list method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    enum_specifier                 shift and go to state 35
    interface_declaration_list     shift and go to state 324
    method_declaration             shift and go to state 79
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 84

state 189

    (55) protocol_reference_list -> LT protocol_list . GT
    (105) protocol_list -> protocol_list . COMMA protocol_name

    GT              shift and go to state 325
    COMMA           shift and go to state 326


state 190

    (104) protocol_list -> protocol_name .

    GT              reduce using rule 104 (protocol_list -> protocol_name .)
    COMMA           reduce using rule 104 (protocol_list -> protocol_name .)


state 191

    (28) protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list . END
    (53) interface_declaration_list -> interface_declaration_list . declaration
    (54) interface_declaration_list -> interface_declaration_list . method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 327
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union                shift and go to state 6
    instance_method_declaration    shift and go to state 81
    enum_specifier                 shift and go to state 35
    method_declaration             shift and go to state 204
    type_declaration               shift and go to state 8
    type_specifier                 shift and go to state 11
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 205

state 192

    (242) keyword_declarator -> COLON . IDENTIFIER
    (243) keyword_declarator -> COLON . method_type IDENTIFIER
    (185) method_type -> . LP type_name RP

    IDENTIFIER      shift and go to state 329
    LP              shift and go to state 199

    method_type                    shift and go to state 328

state 193

    (139) class_method_declaration -> ADD method_type . method_selector SEMI
    (181) method_selector -> . unary_selector
    (182) method_selector -> . keyword_selector
    (183) method_selector -> . keyword_selector COMMA ELLIPSIS
    (184) method_selector -> . keyword_selector COMMA parameter_type_list
    (217) unary_selector -> . selector
    (218) keyword_selector -> . keyword_declarator
    (219) keyword_selector -> . keyword_selector keyword_declarator
    (241) selector -> . IDENTIFIER
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER

    IDENTIFIER      shift and go to state 200
    COLON           shift and go to state 192

    keyword_declarator             shift and go to state 198
    unary_selector                 shift and go to state 194
    method_selector                shift and go to state 330
    keyword_selector               shift and go to state 196
    selector                       shift and go to state 197

state 194

    (181) method_selector -> unary_selector .

    SEMI            reduce using rule 181 (method_selector -> unary_selector .)
    LBRACE          reduce using rule 181 (method_selector -> unary_selector .)
    TYPEDEF         reduce using rule 181 (method_selector -> unary_selector .)
    EXTERN          reduce using rule 181 (method_selector -> unary_selector .)
    STATIC          reduce using rule 181 (method_selector -> unary_selector .)
    AUTO            reduce using rule 181 (method_selector -> unary_selector .)
    REGISTER        reduce using rule 181 (method_selector -> unary_selector .)
    VOID            reduce using rule 181 (method_selector -> unary_selector .)
    CHAR            reduce using rule 181 (method_selector -> unary_selector .)
    SHORT           reduce using rule 181 (method_selector -> unary_selector .)
    INT             reduce using rule 181 (method_selector -> unary_selector .)
    LONG            reduce using rule 181 (method_selector -> unary_selector .)
    FLOAT           reduce using rule 181 (method_selector -> unary_selector .)
    DOUBLE          reduce using rule 181 (method_selector -> unary_selector .)
    SIGNED          reduce using rule 181 (method_selector -> unary_selector .)
    UNSIGNED        reduce using rule 181 (method_selector -> unary_selector .)
    TYPE_NAME       reduce using rule 181 (method_selector -> unary_selector .)
    ENUM            reduce using rule 181 (method_selector -> unary_selector .)
    STRUCT          reduce using rule 181 (method_selector -> unary_selector .)
    UNION           reduce using rule 181 (method_selector -> unary_selector .)


state 195

    (138) class_method_declaration -> ADD method_selector . SEMI

    SEMI            shift and go to state 331


state 196

    (182) method_selector -> keyword_selector .
    (183) method_selector -> keyword_selector . COMMA ELLIPSIS
    (184) method_selector -> keyword_selector . COMMA parameter_type_list
    (219) keyword_selector -> keyword_selector . keyword_declarator
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER
    (241) selector -> . IDENTIFIER

    SEMI            reduce using rule 182 (method_selector -> keyword_selector .)
    LBRACE          reduce using rule 182 (method_selector -> keyword_selector .)
    TYPEDEF         reduce using rule 182 (method_selector -> keyword_selector .)
    EXTERN          reduce using rule 182 (method_selector -> keyword_selector .)
    STATIC          reduce using rule 182 (method_selector -> keyword_selector .)
    AUTO            reduce using rule 182 (method_selector -> keyword_selector .)
    REGISTER        reduce using rule 182 (method_selector -> keyword_selector .)
    VOID            reduce using rule 182 (method_selector -> keyword_selector .)
    CHAR            reduce using rule 182 (method_selector -> keyword_selector .)
    SHORT           reduce using rule 182 (method_selector -> keyword_selector .)
    INT             reduce using rule 182 (method_selector -> keyword_selector .)
    LONG            reduce using rule 182 (method_selector -> keyword_selector .)
    FLOAT           reduce using rule 182 (method_selector -> keyword_selector .)
    DOUBLE          reduce using rule 182 (method_selector -> keyword_selector .)
    SIGNED          reduce using rule 182 (method_selector -> keyword_selector .)
    UNSIGNED        reduce using rule 182 (method_selector -> keyword_selector .)
    TYPE_NAME       reduce using rule 182 (method_selector -> keyword_selector .)
    ENUM            reduce using rule 182 (method_selector -> keyword_selector .)
    STRUCT          reduce using rule 182 (method_selector -> keyword_selector .)
    UNION           reduce using rule 182 (method_selector -> keyword_selector .)
    COMMA           shift and go to state 334
    COLON           shift and go to state 192
    IDENTIFIER      shift and go to state 200

    keyword_declarator             shift and go to state 332
    selector                       shift and go to state 333

state 197

    (217) unary_selector -> selector .
    (244) keyword_declarator -> selector . COLON IDENTIFIER
    (245) keyword_declarator -> selector . COLON method_type IDENTIFIER

    SEMI            reduce using rule 217 (unary_selector -> selector .)
    LBRACE          reduce using rule 217 (unary_selector -> selector .)
    TYPEDEF         reduce using rule 217 (unary_selector -> selector .)
    EXTERN          reduce using rule 217 (unary_selector -> selector .)
    STATIC          reduce using rule 217 (unary_selector -> selector .)
    AUTO            reduce using rule 217 (unary_selector -> selector .)
    REGISTER        reduce using rule 217 (unary_selector -> selector .)
    VOID            reduce using rule 217 (unary_selector -> selector .)
    CHAR            reduce using rule 217 (unary_selector -> selector .)
    SHORT           reduce using rule 217 (unary_selector -> selector .)
    INT             reduce using rule 217 (unary_selector -> selector .)
    LONG            reduce using rule 217 (unary_selector -> selector .)
    FLOAT           reduce using rule 217 (unary_selector -> selector .)
    DOUBLE          reduce using rule 217 (unary_selector -> selector .)
    SIGNED          reduce using rule 217 (unary_selector -> selector .)
    UNSIGNED        reduce using rule 217 (unary_selector -> selector .)
    TYPE_NAME       reduce using rule 217 (unary_selector -> selector .)
    ENUM            reduce using rule 217 (unary_selector -> selector .)
    STRUCT          reduce using rule 217 (unary_selector -> selector .)
    UNION           reduce using rule 217 (unary_selector -> selector .)
    COLON           shift and go to state 335


state 198

    (218) keyword_selector -> keyword_declarator .

    COMMA           reduce using rule 218 (keyword_selector -> keyword_declarator .)
    COLON           reduce using rule 218 (keyword_selector -> keyword_declarator .)
    IDENTIFIER      reduce using rule 218 (keyword_selector -> keyword_declarator .)
    SEMI            reduce using rule 218 (keyword_selector -> keyword_declarator .)
    LBRACE          reduce using rule 218 (keyword_selector -> keyword_declarator .)
    TYPEDEF         reduce using rule 218 (keyword_selector -> keyword_declarator .)
    EXTERN          reduce using rule 218 (keyword_selector -> keyword_declarator .)
    STATIC          reduce using rule 218 (keyword_selector -> keyword_declarator .)
    AUTO            reduce using rule 218 (keyword_selector -> keyword_declarator .)
    REGISTER        reduce using rule 218 (keyword_selector -> keyword_declarator .)
    VOID            reduce using rule 218 (keyword_selector -> keyword_declarator .)
    CHAR            reduce using rule 218 (keyword_selector -> keyword_declarator .)
    SHORT           reduce using rule 218 (keyword_selector -> keyword_declarator .)
    INT             reduce using rule 218 (keyword_selector -> keyword_declarator .)
    LONG            reduce using rule 218 (keyword_selector -> keyword_declarator .)
    FLOAT           reduce using rule 218 (keyword_selector -> keyword_declarator .)
    DOUBLE          reduce using rule 218 (keyword_selector -> keyword_declarator .)
    SIGNED          reduce using rule 218 (keyword_selector -> keyword_declarator .)
    UNSIGNED        reduce using rule 218 (keyword_selector -> keyword_declarator .)
    TYPE_NAME       reduce using rule 218 (keyword_selector -> keyword_declarator .)
    ENUM            reduce using rule 218 (keyword_selector -> keyword_declarator .)
    STRUCT          reduce using rule 218 (keyword_selector -> keyword_declarator .)
    UNION           reduce using rule 218 (keyword_selector -> keyword_declarator .)


state 199

    (185) method_type -> LP . type_name RP
    (186) type_name -> . specifier_qualifier_list
    (187) type_name -> . specifier_qualifier_list abstract_declarator
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    type_name                      shift and go to state 336
    specifier_qualifier_list       shift and go to state 260

state 200

    (241) selector -> IDENTIFIER .

    COLON           reduce using rule 241 (selector -> IDENTIFIER .)
    LBRACE          reduce using rule 241 (selector -> IDENTIFIER .)
    TYPEDEF         reduce using rule 241 (selector -> IDENTIFIER .)
    EXTERN          reduce using rule 241 (selector -> IDENTIFIER .)
    STATIC          reduce using rule 241 (selector -> IDENTIFIER .)
    AUTO            reduce using rule 241 (selector -> IDENTIFIER .)
    REGISTER        reduce using rule 241 (selector -> IDENTIFIER .)
    VOID            reduce using rule 241 (selector -> IDENTIFIER .)
    CHAR            reduce using rule 241 (selector -> IDENTIFIER .)
    SHORT           reduce using rule 241 (selector -> IDENTIFIER .)
    INT             reduce using rule 241 (selector -> IDENTIFIER .)
    LONG            reduce using rule 241 (selector -> IDENTIFIER .)
    FLOAT           reduce using rule 241 (selector -> IDENTIFIER .)
    DOUBLE          reduce using rule 241 (selector -> IDENTIFIER .)
    SIGNED          reduce using rule 241 (selector -> IDENTIFIER .)
    UNSIGNED        reduce using rule 241 (selector -> IDENTIFIER .)
    TYPE_NAME       reduce using rule 241 (selector -> IDENTIFIER .)
    ENUM            reduce using rule 241 (selector -> IDENTIFIER .)
    STRUCT          reduce using rule 241 (selector -> IDENTIFIER .)
    UNION           reduce using rule 241 (selector -> IDENTIFIER .)
    SEMI            reduce using rule 241 (selector -> IDENTIFIER .)


state 201

    (140) instance_method_declaration -> SUB method_selector . SEMI

    SEMI            shift and go to state 337


state 202

    (141) instance_method_declaration -> SUB method_type . method_selector SEMI
    (181) method_selector -> . unary_selector
    (182) method_selector -> . keyword_selector
    (183) method_selector -> . keyword_selector COMMA ELLIPSIS
    (184) method_selector -> . keyword_selector COMMA parameter_type_list
    (217) unary_selector -> . selector
    (218) keyword_selector -> . keyword_declarator
    (219) keyword_selector -> . keyword_selector keyword_declarator
    (241) selector -> . IDENTIFIER
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER

    IDENTIFIER      shift and go to state 200
    COLON           shift and go to state 192

    keyword_declarator             shift and go to state 198
    unary_selector                 shift and go to state 194
    method_selector                shift and go to state 338
    keyword_selector               shift and go to state 196
    selector                       shift and go to state 197

state 203

    (27) protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .

    INTERFACE       reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    IMPLEMENTATION  reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    PROTOCOL        reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    CLASS           reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    TYPEDEF         reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    EXTERN          reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    STATIC          reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    AUTO            reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    REGISTER        reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    VOID            reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    CHAR            reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    SHORT           reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    INT             reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    LONG            reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    FLOAT           reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    DOUBLE          reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    SIGNED          reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    UNSIGNED        reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    TYPE_NAME       reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    MUL             reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    IDENTIFIER      reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    LP              reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    ENUM            reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    STRUCT          reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    UNION           reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)
    $end            reduce using rule 27 (protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END .)


state 204

    (54) interface_declaration_list -> interface_declaration_list method_declaration .

    END             reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    TYPEDEF         reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    ADD             reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    SUB             reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    EXTERN          reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    STATIC          reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    AUTO            reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    REGISTER        reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    VOID            reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    CHAR            reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    SHORT           reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    INT             reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    LONG            reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    FLOAT           reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    DOUBLE          reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    SIGNED          reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    UNSIGNED        reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    TYPE_NAME       reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    ENUM            reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    STRUCT          reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)
    UNION           reduce using rule 54 (interface_declaration_list -> interface_declaration_list method_declaration .)


state 205

    (53) interface_declaration_list -> interface_declaration_list declaration .

    END             reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    TYPEDEF         reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    ADD             reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    SUB             reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    EXTERN          reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    STATIC          reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    AUTO            reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    REGISTER        reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    VOID            reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    CHAR            reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    SHORT           reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    INT             reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    LONG            reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    FLOAT           reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    DOUBLE          reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    SIGNED          reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    UNSIGNED        reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    TYPE_NAME       reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    ENUM            reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    STRUCT          reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)
    UNION           reduce using rule 53 (interface_declaration_list -> interface_declaration_list declaration .)


state 206

    (110) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list . RBRACE
    (98) struct_declaration_list -> struct_declaration_list . struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RBRACE          shift and go to state 339
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    struct_declaration             shift and go to state 207
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 90

state 207

    (98) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LBRACE          reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPE_NAME       reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 98 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 208

    (111) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .

    VOID            reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPE_NAME       reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    MUL             reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LP              reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LBRACK          reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LBRACE          reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RP              reduce using rule 111 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)


state 209

    (178) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 178 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    MUL             reduce using rule 178 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 178 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LP              reduce using rule 178 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACK          reduce using rule 178 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RP              reduce using rule 178 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 210

    (179) struct_declarator_list -> struct_declarator .

    SEMI            reduce using rule 179 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 179 (struct_declarator_list -> struct_declarator .)


state 211

    (214) struct_declarator -> declarator .
    (216) struct_declarator -> declarator . COLON constant_expression

    SEMI            reduce using rule 214 (struct_declarator -> declarator .)
    COMMA           reduce using rule 214 (struct_declarator -> declarator .)
    COLON           shift and go to state 340


state 212

    (215) struct_declarator -> COLON . constant_expression
    (116) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    and_expression                 shift and go to state 113
    unary_operator                 shift and go to state 138
    conditional_expression         shift and go to state 139
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    constant_expression            shift and go to state 341
    relational_expression          shift and go to state 120

state 213

    (137) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (180) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 343
    COMMA           shift and go to state 342


state 214

    (57) implementation_definition_list -> declaration .

    END             reduce using rule 57 (implementation_definition_list -> declaration .)
    TYPEDEF         reduce using rule 57 (implementation_definition_list -> declaration .)
    ADD             reduce using rule 57 (implementation_definition_list -> declaration .)
    SUB             reduce using rule 57 (implementation_definition_list -> declaration .)
    EXTERN          reduce using rule 57 (implementation_definition_list -> declaration .)
    STATIC          reduce using rule 57 (implementation_definition_list -> declaration .)
    AUTO            reduce using rule 57 (implementation_definition_list -> declaration .)
    REGISTER        reduce using rule 57 (implementation_definition_list -> declaration .)
    VOID            reduce using rule 57 (implementation_definition_list -> declaration .)
    CHAR            reduce using rule 57 (implementation_definition_list -> declaration .)
    SHORT           reduce using rule 57 (implementation_definition_list -> declaration .)
    INT             reduce using rule 57 (implementation_definition_list -> declaration .)
    LONG            reduce using rule 57 (implementation_definition_list -> declaration .)
    FLOAT           reduce using rule 57 (implementation_definition_list -> declaration .)
    DOUBLE          reduce using rule 57 (implementation_definition_list -> declaration .)
    SIGNED          reduce using rule 57 (implementation_definition_list -> declaration .)
    UNSIGNED        reduce using rule 57 (implementation_definition_list -> declaration .)
    TYPE_NAME       reduce using rule 57 (implementation_definition_list -> declaration .)
    MUL             reduce using rule 57 (implementation_definition_list -> declaration .)
    IDENTIFIER      reduce using rule 57 (implementation_definition_list -> declaration .)
    LP              reduce using rule 57 (implementation_definition_list -> declaration .)
    ENUM            reduce using rule 57 (implementation_definition_list -> declaration .)
    STRUCT          reduce using rule 57 (implementation_definition_list -> declaration .)
    UNION           reduce using rule 57 (implementation_definition_list -> declaration .)


state 215

    (142) class_method_definition -> ADD . method_selector compound_statement
    (143) class_method_definition -> ADD . method_type method_selector compound_statement
    (144) class_method_definition -> ADD . method_selector declaration_list compound_statement
    (145) class_method_definition -> ADD . method_type method_selector declaration_list compound_statement
    (181) method_selector -> . unary_selector
    (182) method_selector -> . keyword_selector
    (183) method_selector -> . keyword_selector COMMA ELLIPSIS
    (184) method_selector -> . keyword_selector COMMA parameter_type_list
    (185) method_type -> . LP type_name RP
    (217) unary_selector -> . selector
    (218) keyword_selector -> . keyword_declarator
    (219) keyword_selector -> . keyword_selector keyword_declarator
    (241) selector -> . IDENTIFIER
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER

    LP              shift and go to state 199
    IDENTIFIER      shift and go to state 200
    COLON           shift and go to state 192

    method_type                    shift and go to state 344
    unary_selector                 shift and go to state 194
    method_selector                shift and go to state 345
    keyword_selector               shift and go to state 196
    keyword_declarator             shift and go to state 198
    selector                       shift and go to state 197

state 216

    (22) class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list . END
    (59) implementation_definition_list -> implementation_definition_list . function_definition
    (60) implementation_definition_list -> implementation_definition_list . declaration
    (61) implementation_definition_list -> implementation_definition_list . method_definition
    (11) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (12) function_definition -> . declaration_specifiers declarator compound_statement
    (13) function_definition -> . declarator declaration_list compound_statement
    (14) function_definition -> . declarator compound_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (106) method_definition -> . class_method_definition
    (107) method_definition -> . instance_method_definition
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (142) class_method_definition -> . ADD method_selector compound_statement
    (143) class_method_definition -> . ADD method_type method_selector compound_statement
    (144) class_method_definition -> . ADD method_selector declaration_list compound_statement
    (145) class_method_definition -> . ADD method_type method_selector declaration_list compound_statement
    (146) instance_method_definition -> . SUB method_selector compound_statement
    (147) instance_method_definition -> . SUB method_type method_selector compound_statement
    (148) instance_method_definition -> . SUB method_selector declaration_list compound_statement
    (149) instance_method_definition -> . SUB method_type method_selector declaration_list compound_statement
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 347
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 215
    SUB             shift and go to state 217
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    declaration                    shift and go to state 346
    type_declaration               shift and go to state 8
    pointer                        shift and go to state 16
    type_specifier                 shift and go to state 11
    struct_or_union                shift and go to state 6
    direct_declarator              shift and go to state 34
    declaration_specifiers         shift and go to state 37
    instance_method_definition     shift and go to state 218
    method_definition              shift and go to state 348
    class_method_definition        shift and go to state 220
    function_definition            shift and go to state 349
    enum_specifier                 shift and go to state 35
    declarator                     shift and go to state 43

state 217

    (146) instance_method_definition -> SUB . method_selector compound_statement
    (147) instance_method_definition -> SUB . method_type method_selector compound_statement
    (148) instance_method_definition -> SUB . method_selector declaration_list compound_statement
    (149) instance_method_definition -> SUB . method_type method_selector declaration_list compound_statement
    (181) method_selector -> . unary_selector
    (182) method_selector -> . keyword_selector
    (183) method_selector -> . keyword_selector COMMA ELLIPSIS
    (184) method_selector -> . keyword_selector COMMA parameter_type_list
    (185) method_type -> . LP type_name RP
    (217) unary_selector -> . selector
    (218) keyword_selector -> . keyword_declarator
    (219) keyword_selector -> . keyword_selector keyword_declarator
    (241) selector -> . IDENTIFIER
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER

    LP              shift and go to state 199
    IDENTIFIER      shift and go to state 200
    COLON           shift and go to state 192

    method_type                    shift and go to state 350
    unary_selector                 shift and go to state 194
    method_selector                shift and go to state 351
    keyword_selector               shift and go to state 196
    keyword_declarator             shift and go to state 198
    selector                       shift and go to state 197

state 218

    (107) method_definition -> instance_method_definition .

    END             reduce using rule 107 (method_definition -> instance_method_definition .)
    TYPEDEF         reduce using rule 107 (method_definition -> instance_method_definition .)
    ADD             reduce using rule 107 (method_definition -> instance_method_definition .)
    SUB             reduce using rule 107 (method_definition -> instance_method_definition .)
    EXTERN          reduce using rule 107 (method_definition -> instance_method_definition .)
    STATIC          reduce using rule 107 (method_definition -> instance_method_definition .)
    AUTO            reduce using rule 107 (method_definition -> instance_method_definition .)
    REGISTER        reduce using rule 107 (method_definition -> instance_method_definition .)
    VOID            reduce using rule 107 (method_definition -> instance_method_definition .)
    CHAR            reduce using rule 107 (method_definition -> instance_method_definition .)
    SHORT           reduce using rule 107 (method_definition -> instance_method_definition .)
    INT             reduce using rule 107 (method_definition -> instance_method_definition .)
    LONG            reduce using rule 107 (method_definition -> instance_method_definition .)
    FLOAT           reduce using rule 107 (method_definition -> instance_method_definition .)
    DOUBLE          reduce using rule 107 (method_definition -> instance_method_definition .)
    SIGNED          reduce using rule 107 (method_definition -> instance_method_definition .)
    UNSIGNED        reduce using rule 107 (method_definition -> instance_method_definition .)
    TYPE_NAME       reduce using rule 107 (method_definition -> instance_method_definition .)
    MUL             reduce using rule 107 (method_definition -> instance_method_definition .)
    IDENTIFIER      reduce using rule 107 (method_definition -> instance_method_definition .)
    LP              reduce using rule 107 (method_definition -> instance_method_definition .)
    ENUM            reduce using rule 107 (method_definition -> instance_method_definition .)
    STRUCT          reduce using rule 107 (method_definition -> instance_method_definition .)
    UNION           reduce using rule 107 (method_definition -> instance_method_definition .)


state 219

    (58) implementation_definition_list -> method_definition .

    END             reduce using rule 58 (implementation_definition_list -> method_definition .)
    TYPEDEF         reduce using rule 58 (implementation_definition_list -> method_definition .)
    ADD             reduce using rule 58 (implementation_definition_list -> method_definition .)
    SUB             reduce using rule 58 (implementation_definition_list -> method_definition .)
    EXTERN          reduce using rule 58 (implementation_definition_list -> method_definition .)
    STATIC          reduce using rule 58 (implementation_definition_list -> method_definition .)
    AUTO            reduce using rule 58 (implementation_definition_list -> method_definition .)
    REGISTER        reduce using rule 58 (implementation_definition_list -> method_definition .)
    VOID            reduce using rule 58 (implementation_definition_list -> method_definition .)
    CHAR            reduce using rule 58 (implementation_definition_list -> method_definition .)
    SHORT           reduce using rule 58 (implementation_definition_list -> method_definition .)
    INT             reduce using rule 58 (implementation_definition_list -> method_definition .)
    LONG            reduce using rule 58 (implementation_definition_list -> method_definition .)
    FLOAT           reduce using rule 58 (implementation_definition_list -> method_definition .)
    DOUBLE          reduce using rule 58 (implementation_definition_list -> method_definition .)
    SIGNED          reduce using rule 58 (implementation_definition_list -> method_definition .)
    UNSIGNED        reduce using rule 58 (implementation_definition_list -> method_definition .)
    TYPE_NAME       reduce using rule 58 (implementation_definition_list -> method_definition .)
    MUL             reduce using rule 58 (implementation_definition_list -> method_definition .)
    IDENTIFIER      reduce using rule 58 (implementation_definition_list -> method_definition .)
    LP              reduce using rule 58 (implementation_definition_list -> method_definition .)
    ENUM            reduce using rule 58 (implementation_definition_list -> method_definition .)
    STRUCT          reduce using rule 58 (implementation_definition_list -> method_definition .)
    UNION           reduce using rule 58 (implementation_definition_list -> method_definition .)


state 220

    (106) method_definition -> class_method_definition .

    END             reduce using rule 106 (method_definition -> class_method_definition .)
    TYPEDEF         reduce using rule 106 (method_definition -> class_method_definition .)
    ADD             reduce using rule 106 (method_definition -> class_method_definition .)
    SUB             reduce using rule 106 (method_definition -> class_method_definition .)
    EXTERN          reduce using rule 106 (method_definition -> class_method_definition .)
    STATIC          reduce using rule 106 (method_definition -> class_method_definition .)
    AUTO            reduce using rule 106 (method_definition -> class_method_definition .)
    REGISTER        reduce using rule 106 (method_definition -> class_method_definition .)
    VOID            reduce using rule 106 (method_definition -> class_method_definition .)
    CHAR            reduce using rule 106 (method_definition -> class_method_definition .)
    SHORT           reduce using rule 106 (method_definition -> class_method_definition .)
    INT             reduce using rule 106 (method_definition -> class_method_definition .)
    LONG            reduce using rule 106 (method_definition -> class_method_definition .)
    FLOAT           reduce using rule 106 (method_definition -> class_method_definition .)
    DOUBLE          reduce using rule 106 (method_definition -> class_method_definition .)
    SIGNED          reduce using rule 106 (method_definition -> class_method_definition .)
    UNSIGNED        reduce using rule 106 (method_definition -> class_method_definition .)
    TYPE_NAME       reduce using rule 106 (method_definition -> class_method_definition .)
    MUL             reduce using rule 106 (method_definition -> class_method_definition .)
    IDENTIFIER      reduce using rule 106 (method_definition -> class_method_definition .)
    LP              reduce using rule 106 (method_definition -> class_method_definition .)
    ENUM            reduce using rule 106 (method_definition -> class_method_definition .)
    STRUCT          reduce using rule 106 (method_definition -> class_method_definition .)
    UNION           reduce using rule 106 (method_definition -> class_method_definition .)


state 221

    (56) implementation_definition_list -> function_definition .

    END             reduce using rule 56 (implementation_definition_list -> function_definition .)
    TYPEDEF         reduce using rule 56 (implementation_definition_list -> function_definition .)
    ADD             reduce using rule 56 (implementation_definition_list -> function_definition .)
    SUB             reduce using rule 56 (implementation_definition_list -> function_definition .)
    EXTERN          reduce using rule 56 (implementation_definition_list -> function_definition .)
    STATIC          reduce using rule 56 (implementation_definition_list -> function_definition .)
    AUTO            reduce using rule 56 (implementation_definition_list -> function_definition .)
    REGISTER        reduce using rule 56 (implementation_definition_list -> function_definition .)
    VOID            reduce using rule 56 (implementation_definition_list -> function_definition .)
    CHAR            reduce using rule 56 (implementation_definition_list -> function_definition .)
    SHORT           reduce using rule 56 (implementation_definition_list -> function_definition .)
    INT             reduce using rule 56 (implementation_definition_list -> function_definition .)
    LONG            reduce using rule 56 (implementation_definition_list -> function_definition .)
    FLOAT           reduce using rule 56 (implementation_definition_list -> function_definition .)
    DOUBLE          reduce using rule 56 (implementation_definition_list -> function_definition .)
    SIGNED          reduce using rule 56 (implementation_definition_list -> function_definition .)
    UNSIGNED        reduce using rule 56 (implementation_definition_list -> function_definition .)
    TYPE_NAME       reduce using rule 56 (implementation_definition_list -> function_definition .)
    MUL             reduce using rule 56 (implementation_definition_list -> function_definition .)
    IDENTIFIER      reduce using rule 56 (implementation_definition_list -> function_definition .)
    LP              reduce using rule 56 (implementation_definition_list -> function_definition .)
    ENUM            reduce using rule 56 (implementation_definition_list -> function_definition .)
    STRUCT          reduce using rule 56 (implementation_definition_list -> function_definition .)
    UNION           reduce using rule 56 (implementation_definition_list -> function_definition .)


state 222

    (62) category_name -> IDENTIFIER .

    )               reduce using rule 62 (category_name -> IDENTIFIER .)


state 223

    (26) category_implementation -> IMPLEMENTATION class_name ( category_name . ) implementation_definition_list END

    )               shift and go to state 352


state 224

    (23) class_implementation -> IMPLEMENTATION class_name COLON superclass_name . instance_variables implementation_definition_list END
    (47) instance_variables -> . LBRACE struct_declaration_list RBRACE
    (48) instance_variables -> . LBRACE visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> . LBRACE struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> . LBRACE visibility_specification struct_declaration_list instance_variables RBRACE

    LBRACE          shift and go to state 94

    instance_variables             shift and go to state 353

state 225

    (46) superclass_name -> IDENTIFIER .

    LBRACE          reduce using rule 46 (superclass_name -> IDENTIFIER .)
    LT              reduce using rule 46 (superclass_name -> IDENTIFIER .)


state 226

    (47) instance_variables -> LBRACE struct_declaration_list . RBRACE
    (49) instance_variables -> LBRACE struct_declaration_list . instance_variables RBRACE
    (98) struct_declaration_list -> struct_declaration_list . struct_declaration
    (47) instance_variables -> . LBRACE struct_declaration_list RBRACE
    (48) instance_variables -> . LBRACE visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> . LBRACE struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> . LBRACE visibility_specification struct_declaration_list instance_variables RBRACE
    (137) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RBRACE          shift and go to state 355
    LBRACE          shift and go to state 94
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    struct_declaration             shift and go to state 207
    instance_variables             shift and go to state 354
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 90

state 227

    (101) visibility_specification -> PROTECTED .

    VOID            reduce using rule 101 (visibility_specification -> PROTECTED .)
    CHAR            reduce using rule 101 (visibility_specification -> PROTECTED .)
    SHORT           reduce using rule 101 (visibility_specification -> PROTECTED .)
    INT             reduce using rule 101 (visibility_specification -> PROTECTED .)
    LONG            reduce using rule 101 (visibility_specification -> PROTECTED .)
    FLOAT           reduce using rule 101 (visibility_specification -> PROTECTED .)
    DOUBLE          reduce using rule 101 (visibility_specification -> PROTECTED .)
    SIGNED          reduce using rule 101 (visibility_specification -> PROTECTED .)
    UNSIGNED        reduce using rule 101 (visibility_specification -> PROTECTED .)
    TYPE_NAME       reduce using rule 101 (visibility_specification -> PROTECTED .)
    ENUM            reduce using rule 101 (visibility_specification -> PROTECTED .)
    STRUCT          reduce using rule 101 (visibility_specification -> PROTECTED .)
    UNION           reduce using rule 101 (visibility_specification -> PROTECTED .)


state 228

    (99) visibility_specification -> PRIVATE .

    VOID            reduce using rule 99 (visibility_specification -> PRIVATE .)
    CHAR            reduce using rule 99 (visibility_specification -> PRIVATE .)
    SHORT           reduce using rule 99 (visibility_specification -> PRIVATE .)
    INT             reduce using rule 99 (visibility_specification -> PRIVATE .)
    LONG            reduce using rule 99 (visibility_specification -> PRIVATE .)
    FLOAT           reduce using rule 99 (visibility_specification -> PRIVATE .)
    DOUBLE          reduce using rule 99 (visibility_specification -> PRIVATE .)
    SIGNED          reduce using rule 99 (visibility_specification -> PRIVATE .)
    UNSIGNED        reduce using rule 99 (visibility_specification -> PRIVATE .)
    TYPE_NAME       reduce using rule 99 (visibility_specification -> PRIVATE .)
    ENUM            reduce using rule 99 (visibility_specification -> PRIVATE .)
    STRUCT          reduce using rule 99 (visibility_specification -> PRIVATE .)
    UNION           reduce using rule 99 (visibility_specification -> PRIVATE .)


state 229

    (48) instance_variables -> LBRACE visibility_specification . struct_declaration_list RBRACE
    (50) instance_variables -> LBRACE visibility_specification . struct_declaration_list instance_variables RBRACE
    (97) struct_declaration_list -> . struct_declaration
    (98) struct_declaration_list -> . struct_declaration_list struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    struct_declaration             shift and go to state 89
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 90
    struct_declaration_list        shift and go to state 356

state 230

    (100) visibility_specification -> PUBLIC .

    VOID            reduce using rule 100 (visibility_specification -> PUBLIC .)
    CHAR            reduce using rule 100 (visibility_specification -> PUBLIC .)
    SHORT           reduce using rule 100 (visibility_specification -> PUBLIC .)
    INT             reduce using rule 100 (visibility_specification -> PUBLIC .)
    LONG            reduce using rule 100 (visibility_specification -> PUBLIC .)
    FLOAT           reduce using rule 100 (visibility_specification -> PUBLIC .)
    DOUBLE          reduce using rule 100 (visibility_specification -> PUBLIC .)
    SIGNED          reduce using rule 100 (visibility_specification -> PUBLIC .)
    UNSIGNED        reduce using rule 100 (visibility_specification -> PUBLIC .)
    TYPE_NAME       reduce using rule 100 (visibility_specification -> PUBLIC .)
    ENUM            reduce using rule 100 (visibility_specification -> PUBLIC .)
    STRUCT          reduce using rule 100 (visibility_specification -> PUBLIC .)
    UNION           reduce using rule 100 (visibility_specification -> PUBLIC .)


state 231

    (65) class_list -> class_list COMMA class_name .

    COMMA           reduce using rule 65 (class_list -> class_list COMMA class_name .)
    INTERFACE       reduce using rule 65 (class_list -> class_list COMMA class_name .)
    IMPLEMENTATION  reduce using rule 65 (class_list -> class_list COMMA class_name .)
    PROTOCOL        reduce using rule 65 (class_list -> class_list COMMA class_name .)
    CLASS           reduce using rule 65 (class_list -> class_list COMMA class_name .)
    TYPEDEF         reduce using rule 65 (class_list -> class_list COMMA class_name .)
    EXTERN          reduce using rule 65 (class_list -> class_list COMMA class_name .)
    STATIC          reduce using rule 65 (class_list -> class_list COMMA class_name .)
    AUTO            reduce using rule 65 (class_list -> class_list COMMA class_name .)
    REGISTER        reduce using rule 65 (class_list -> class_list COMMA class_name .)
    VOID            reduce using rule 65 (class_list -> class_list COMMA class_name .)
    CHAR            reduce using rule 65 (class_list -> class_list COMMA class_name .)
    SHORT           reduce using rule 65 (class_list -> class_list COMMA class_name .)
    INT             reduce using rule 65 (class_list -> class_list COMMA class_name .)
    LONG            reduce using rule 65 (class_list -> class_list COMMA class_name .)
    FLOAT           reduce using rule 65 (class_list -> class_list COMMA class_name .)
    DOUBLE          reduce using rule 65 (class_list -> class_list COMMA class_name .)
    SIGNED          reduce using rule 65 (class_list -> class_list COMMA class_name .)
    UNSIGNED        reduce using rule 65 (class_list -> class_list COMMA class_name .)
    TYPE_NAME       reduce using rule 65 (class_list -> class_list COMMA class_name .)
    MUL             reduce using rule 65 (class_list -> class_list COMMA class_name .)
    IDENTIFIER      reduce using rule 65 (class_list -> class_list COMMA class_name .)
    LP              reduce using rule 65 (class_list -> class_list COMMA class_name .)
    ENUM            reduce using rule 65 (class_list -> class_list COMMA class_name .)
    STRUCT          reduce using rule 65 (class_list -> class_list COMMA class_name .)
    UNION           reduce using rule 65 (class_list -> class_list COMMA class_name .)
    $end            reduce using rule 65 (class_list -> class_list COMMA class_name .)


state 232

    (128) type_direct_declarator -> LP type_declarator . RP

    RP              shift and go to state 357


state 233

    (129) type_direct_declarator -> type_direct_declarator LBRACK . constant_expression RBRACK
    (130) type_direct_declarator -> type_direct_declarator LBRACK . RBRACK
    (116) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    RBRACK          shift and go to state 359
    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    and_expression                 shift and go to state 113
    unary_operator                 shift and go to state 138
    conditional_expression         shift and go to state 139
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    constant_expression            shift and go to state 358
    relational_expression          shift and go to state 120

state 234

    (131) type_direct_declarator -> type_direct_declarator LP . parameter_type_list RP
    (132) type_direct_declarator -> type_direct_declarator LP . identifier_list RP
    (133) type_direct_declarator -> type_direct_declarator LP . RP
    (117) parameter_type_list -> . parameter_list
    (118) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (119) identifier_list -> . IDENTIFIER
    (120) identifier_list -> . identifier_list COMMA IDENTIFIER
    (154) parameter_list -> . parameter_declaration
    (155) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RP              shift and go to state 360
    IDENTIFIER      shift and go to state 143
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    parameter_list                 shift and go to state 148
    parameter_type_list            shift and go to state 361
    parameter_declaration          shift and go to state 145
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 146
    identifier_list                shift and go to state 362

state 235

    (93) type_declarator -> pointer type_direct_declarator .
    (129) type_direct_declarator -> type_direct_declarator . LBRACK constant_expression RBRACK
    (130) type_direct_declarator -> type_direct_declarator . LBRACK RBRACK
    (131) type_direct_declarator -> type_direct_declarator . LP parameter_type_list RP
    (132) type_direct_declarator -> type_direct_declarator . LP identifier_list RP
    (133) type_direct_declarator -> type_direct_declarator . LP RP

    RP              reduce using rule 93 (type_declarator -> pointer type_direct_declarator .)
    SEMI            reduce using rule 93 (type_declarator -> pointer type_direct_declarator .)
    LBRACK          shift and go to state 233
    LP              shift and go to state 234


state 236

    (114) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list . RBRACE
    (151) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 363
    COMMA           shift and go to state 238


state 237

    (113) enum_specifier -> ENUM LBRACE enumerator_list RBRACE .

    EXTERN          reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPE_NAME       reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    MUL             reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    IDENTIFIER      reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LP              reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LBRACK          reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RP              reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LBRACE          reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 113 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)


state 238

    (151) enumerator_list -> enumerator_list COMMA . enumerator
    (188) enumerator -> . IDENTIFIER
    (189) enumerator -> . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER      shift and go to state 105

    enumerator                     shift and go to state 364

state 239

    (189) enumerator -> IDENTIFIER ASSIGNMENT . constant_expression
    (116) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    and_expression                 shift and go to state 113
    unary_operator                 shift and go to state 138
    conditional_expression         shift and go to state 139
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    constant_expression            shift and go to state 365
    relational_expression          shift and go to state 120

state 240

    (269) exclusive_or_expression -> exclusive_or_expression BITXOR . and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    and_expression                 shift and go to state 366
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    equality_expression            shift and go to state 133
    primary_expression             shift and go to state 129
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120

state 241

    (199) unary_expression -> DEC unary_expression .

    MUL             reduce using rule 199 (unary_expression -> DEC unary_expression .)
    DIV             reduce using rule 199 (unary_expression -> DEC unary_expression .)
    MOD             reduce using rule 199 (unary_expression -> DEC unary_expression .)
    ADD             reduce using rule 199 (unary_expression -> DEC unary_expression .)
    SUB             reduce using rule 199 (unary_expression -> DEC unary_expression .)
    LSHIFT          reduce using rule 199 (unary_expression -> DEC unary_expression .)
    RSHIFT          reduce using rule 199 (unary_expression -> DEC unary_expression .)
    LT              reduce using rule 199 (unary_expression -> DEC unary_expression .)
    GT              reduce using rule 199 (unary_expression -> DEC unary_expression .)
    LE              reduce using rule 199 (unary_expression -> DEC unary_expression .)
    GE              reduce using rule 199 (unary_expression -> DEC unary_expression .)
    EQUAL           reduce using rule 199 (unary_expression -> DEC unary_expression .)
    NOTEQUAL        reduce using rule 199 (unary_expression -> DEC unary_expression .)
    BITAND          reduce using rule 199 (unary_expression -> DEC unary_expression .)
    BITXOR          reduce using rule 199 (unary_expression -> DEC unary_expression .)
    BITOR           reduce using rule 199 (unary_expression -> DEC unary_expression .)
    AND             reduce using rule 199 (unary_expression -> DEC unary_expression .)
    QUESTION        reduce using rule 199 (unary_expression -> DEC unary_expression .)
    OR              reduce using rule 199 (unary_expression -> DEC unary_expression .)
    RBRACK          reduce using rule 199 (unary_expression -> DEC unary_expression .)
    SEMI            reduce using rule 199 (unary_expression -> DEC unary_expression .)
    COMMA           reduce using rule 199 (unary_expression -> DEC unary_expression .)
    RP              reduce using rule 199 (unary_expression -> DEC unary_expression .)
    COLON           reduce using rule 199 (unary_expression -> DEC unary_expression .)
    RBRACE          reduce using rule 199 (unary_expression -> DEC unary_expression .)
    ASSIGNMENT      reduce using rule 199 (unary_expression -> DEC unary_expression .)
    MUL_ASSIGN      reduce using rule 199 (unary_expression -> DEC unary_expression .)
    DIV_ASSIGN      reduce using rule 199 (unary_expression -> DEC unary_expression .)
    MOD_ASSIGN      reduce using rule 199 (unary_expression -> DEC unary_expression .)
    ADD_ASSIGN      reduce using rule 199 (unary_expression -> DEC unary_expression .)
    SUB_ASSIGN      reduce using rule 199 (unary_expression -> DEC unary_expression .)
    LSHIFT_ASSIGN   reduce using rule 199 (unary_expression -> DEC unary_expression .)
    RSHIFT_ASSIGN   reduce using rule 199 (unary_expression -> DEC unary_expression .)
    AND_ASSIGN      reduce using rule 199 (unary_expression -> DEC unary_expression .)
    XOR_ASSIGN      reduce using rule 199 (unary_expression -> DEC unary_expression .)
    OR_ASSIGN       reduce using rule 199 (unary_expression -> DEC unary_expression .)


state 242

    (265) primary_expression -> LP . expression RP
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120
    assignment_expression          shift and go to state 180
    unary_expression               shift and go to state 161
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    expression                     shift and go to state 261
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    primary_expression             shift and go to state 129

state 243

    (201) unary_expression -> SIZEOF unary_expression .

    MUL             reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    DIV             reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    ADD             reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    SUB             reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    EQUAL           reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    NOTEQUAL        reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    BITAND          reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    BITXOR          reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    BITOR           reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    QUESTION        reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    RBRACK          reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    RP              reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    ASSIGNMENT      reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT_ASSIGN   reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT_ASSIGN   reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 201 (unary_expression -> SIZEOF unary_expression .)


state 244

    (202) unary_expression -> SIZEOF LP . type_name RP
    (265) primary_expression -> LP . expression RP
    (186) type_name -> . specifier_qualifier_list
    (187) type_name -> . specifier_qualifier_list abstract_declarator
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    ENUM            shift and go to state 31
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    struct_or_union_specifier      shift and go to state 3
    exclusive_or_expression        shift and go to state 109
    and_expression                 shift and go to state 113
    type_specifier                 shift and go to state 88
    inclusive_or_expression        shift and go to state 116
    type_name                      shift and go to state 367
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    struct_or_union                shift and go to state 6
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    enum_specifier                 shift and go to state 35
    specifier_qualifier_list       shift and go to state 260
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 261

state 245

    (271) and_expression -> and_expression BITAND . equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    equality_expression            shift and go to state 368
    primary_expression             shift and go to state 129
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120

state 246

    (256) inclusive_or_expression -> inclusive_or_expression BITOR . exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    exclusive_or_expression        shift and go to state 369
    postfix_expression             shift and go to state 118
    additive_expression            shift and go to state 117
    and_expression                 shift and go to state 113
    primary_expression             shift and go to state 129
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    relational_expression          shift and go to state 120

state 247

    (284) additive_expression -> additive_expression ADD . multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 370
    postfix_expression             shift and go to state 118
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    primary_expression             shift and go to state 129

state 248

    (285) additive_expression -> additive_expression SUB . multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 371
    postfix_expression             shift and go to state 118
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    primary_expression             shift and go to state 129

state 249

    (230) postfix_expression -> postfix_expression STRUCTACCESS . IDENTIFIER

    IDENTIFIER      shift and go to state 372


state 250

    (232) postfix_expression -> postfix_expression DEC .

    LBRACK          reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    LP              reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    DOT             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    STRUCTACCESS    reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    INC             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    DEC             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    ASSIGNMENT      reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    MUL_ASSIGN      reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    DIV_ASSIGN      reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    MOD_ASSIGN      reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    ADD_ASSIGN      reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    SUB_ASSIGN      reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    LSHIFT_ASSIGN   reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    RSHIFT_ASSIGN   reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    AND_ASSIGN      reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    XOR_ASSIGN      reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    OR_ASSIGN       reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    MUL             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    DIV             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    MOD             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    ADD             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    SUB             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    LSHIFT          reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    RSHIFT          reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    LT              reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    GT              reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    LE              reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    GE              reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    EQUAL           reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    NOTEQUAL        reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    BITAND          reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    BITXOR          reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    BITOR           reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    AND             reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    QUESTION        reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    OR              reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    SEMI            reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    COMMA           reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    RP              reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    RBRACK          reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    COLON           reduce using rule 232 (postfix_expression -> postfix_expression DEC .)
    RBRACE          reduce using rule 232 (postfix_expression -> postfix_expression DEC .)


state 251

    (226) postfix_expression -> postfix_expression LBRACK . expression RBRACK
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120
    assignment_expression          shift and go to state 180
    unary_expression               shift and go to state 161
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    expression                     shift and go to state 373
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    primary_expression             shift and go to state 129

state 252

    (227) postfix_expression -> postfix_expression LP . RP
    (228) postfix_expression -> postfix_expression LP . argument_expression_list RP
    (266) argument_expression_list -> . assignment_expression
    (267) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    RP              shift and go to state 374
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120
    assignment_expression          shift and go to state 375
    unary_expression               shift and go to state 161
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    argument_expression_list       shift and go to state 376
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    primary_expression             shift and go to state 129

state 253

    (229) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 377


state 254

    (231) postfix_expression -> postfix_expression INC .

    LBRACK          reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    LP              reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    DOT             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    STRUCTACCESS    reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    INC             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    DEC             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    ASSIGNMENT      reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    MUL_ASSIGN      reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    DIV_ASSIGN      reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    MOD_ASSIGN      reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    ADD_ASSIGN      reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    SUB_ASSIGN      reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    LSHIFT_ASSIGN   reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    RSHIFT_ASSIGN   reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    AND_ASSIGN      reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    XOR_ASSIGN      reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    OR_ASSIGN       reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    MUL             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    DIV             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    MOD             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    ADD             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    SUB             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    LSHIFT          reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    RSHIFT          reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    LT              reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    GT              reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    LE              reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    GE              reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    EQUAL           reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    NOTEQUAL        reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    BITAND          reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    BITXOR          reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    BITOR           reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    AND             reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    QUESTION        reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    OR              reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    SEMI            reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    COMMA           reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    RP              reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    RBRACK          reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    COLON           reduce using rule 231 (postfix_expression -> postfix_expression INC .)
    RBRACE          reduce using rule 231 (postfix_expression -> postfix_expression INC .)


state 255

    (278) relational_expression -> relational_expression LE . shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 378
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129

state 256

    (279) relational_expression -> relational_expression GE . shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 379
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129

state 257

    (276) relational_expression -> relational_expression LT . shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 380
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129

state 258

    (277) relational_expression -> relational_expression GT . shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 381
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129

state 259

    (240) cast_expression -> LP type_name . RP cast_expression

    RP              shift and go to state 382


state 260

    (186) type_name -> specifier_qualifier_list .
    (187) type_name -> specifier_qualifier_list . abstract_declarator
    (220) abstract_declarator -> . pointer
    (221) abstract_declarator -> . direct_abstract_declarator
    (222) abstract_declarator -> . pointer direct_abstract_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (246) direct_abstract_declarator -> . LP abstract_declarator RP
    (247) direct_abstract_declarator -> . LBRACK RBRACK
    (248) direct_abstract_declarator -> . LBRACK constant_expression RBRACK
    (249) direct_abstract_declarator -> . direct_abstract_declarator LBRACK RBRACK
    (250) direct_abstract_declarator -> . direct_abstract_declarator LBRACK constant_expression RBRACK
    (251) direct_abstract_declarator -> . LP RP
    (252) direct_abstract_declarator -> . LP parameter_type_list RP
    (253) direct_abstract_declarator -> . direct_abstract_declarator LP RP
    (254) direct_abstract_declarator -> . direct_abstract_declarator LP parameter_type_list RP

    RP              reduce using rule 186 (type_name -> specifier_qualifier_list .)
    MUL             shift and go to state 12
    LP              shift and go to state 384
    LBRACK          shift and go to state 277

    abstract_declarator            shift and go to state 383
    direct_abstract_declarator     shift and go to state 280
    pointer                        shift and go to state 385

state 261

    (265) primary_expression -> LP expression . RP
    (193) expression -> expression . COMMA assignment_expression

    RP              shift and go to state 386
    COMMA           shift and go to state 311


state 262

    (153) conditional_expression -> logical_or_expression QUESTION . expression COLON conditional_expression
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120
    assignment_expression          shift and go to state 180
    unary_expression               shift and go to state 161
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    expression                     shift and go to state 387
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    primary_expression             shift and go to state 129

state 263

    (191) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    and_expression                 shift and go to state 113
    primary_expression             shift and go to state 129
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 388
    equality_expression            shift and go to state 133
    relational_expression          shift and go to state 120

state 264

    (86) direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .

    LBRACK          reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    LP              reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    LBRACE          reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    TYPEDEF         reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    EXTERN          reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    STATIC          reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    AUTO            reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    REGISTER        reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    VOID            reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    CHAR            reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    SHORT           reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    INT             reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    LONG            reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    FLOAT           reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    DOUBLE          reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    SIGNED          reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    UNSIGNED        reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    TYPE_NAME       reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    ENUM            reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    STRUCT          reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    UNION           reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    RP              reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    COLON           reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    SEMI            reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    COMMA           reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)
    ASSIGNMENT      reduce using rule 86 (direct_declarator -> direct_declarator LBRACK constant_expression RBRACK .)


state 265

    (224) logical_and_expression -> logical_and_expression AND . inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 389
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    additive_expression            shift and go to state 117
    and_expression                 shift and go to state 113
    primary_expression             shift and go to state 129
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    relational_expression          shift and go to state 120

state 266

    (282) shift_expression -> shift_expression RSHIFT . additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    additive_expression            shift and go to state 390
    primary_expression             shift and go to state 129

state 267

    (281) shift_expression -> shift_expression LSHIFT . additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    additive_expression            shift and go to state 391
    primary_expression             shift and go to state 129

state 268

    (274) equality_expression -> equality_expression NOTEQUAL . relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 392
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129

state 269

    (273) equality_expression -> equality_expression EQUAL . relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 393
    unary_operator                 shift and go to state 138
    cast_expression                shift and go to state 123
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129

state 270

    (287) multiplicative_expression -> multiplicative_expression MUL . cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    postfix_expression             shift and go to state 118
    primary_expression             shift and go to state 129
    cast_expression                shift and go to state 394
    unary_operator                 shift and go to state 138

state 271

    (289) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    postfix_expression             shift and go to state 118
    primary_expression             shift and go to state 129
    cast_expression                shift and go to state 395
    unary_operator                 shift and go to state 138

state 272

    (288) multiplicative_expression -> multiplicative_expression DIV . cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    postfix_expression             shift and go to state 118
    primary_expression             shift and go to state 129
    cast_expression                shift and go to state 396
    unary_operator                 shift and go to state 138

state 273

    (200) unary_expression -> unary_operator cast_expression .

    MUL             reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    DIV             reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    ADD             reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    SUB             reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    NOTEQUAL        reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    BITAND          reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    BITXOR          reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    BITOR           reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    QUESTION        reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    RBRACK          reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    RP              reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    ASSIGNMENT      reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    LSHIFT_ASSIGN   reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    RSHIFT_ASSIGN   reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 200 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 200 (unary_expression -> unary_operator cast_expression .)


state 274

    (198) unary_expression -> INC unary_expression .

    MUL             reduce using rule 198 (unary_expression -> INC unary_expression .)
    DIV             reduce using rule 198 (unary_expression -> INC unary_expression .)
    MOD             reduce using rule 198 (unary_expression -> INC unary_expression .)
    ADD             reduce using rule 198 (unary_expression -> INC unary_expression .)
    SUB             reduce using rule 198 (unary_expression -> INC unary_expression .)
    LSHIFT          reduce using rule 198 (unary_expression -> INC unary_expression .)
    RSHIFT          reduce using rule 198 (unary_expression -> INC unary_expression .)
    LT              reduce using rule 198 (unary_expression -> INC unary_expression .)
    GT              reduce using rule 198 (unary_expression -> INC unary_expression .)
    LE              reduce using rule 198 (unary_expression -> INC unary_expression .)
    GE              reduce using rule 198 (unary_expression -> INC unary_expression .)
    EQUAL           reduce using rule 198 (unary_expression -> INC unary_expression .)
    NOTEQUAL        reduce using rule 198 (unary_expression -> INC unary_expression .)
    BITAND          reduce using rule 198 (unary_expression -> INC unary_expression .)
    BITXOR          reduce using rule 198 (unary_expression -> INC unary_expression .)
    BITOR           reduce using rule 198 (unary_expression -> INC unary_expression .)
    AND             reduce using rule 198 (unary_expression -> INC unary_expression .)
    QUESTION        reduce using rule 198 (unary_expression -> INC unary_expression .)
    OR              reduce using rule 198 (unary_expression -> INC unary_expression .)
    RBRACK          reduce using rule 198 (unary_expression -> INC unary_expression .)
    SEMI            reduce using rule 198 (unary_expression -> INC unary_expression .)
    COMMA           reduce using rule 198 (unary_expression -> INC unary_expression .)
    RP              reduce using rule 198 (unary_expression -> INC unary_expression .)
    COLON           reduce using rule 198 (unary_expression -> INC unary_expression .)
    RBRACE          reduce using rule 198 (unary_expression -> INC unary_expression .)
    ASSIGNMENT      reduce using rule 198 (unary_expression -> INC unary_expression .)
    MUL_ASSIGN      reduce using rule 198 (unary_expression -> INC unary_expression .)
    DIV_ASSIGN      reduce using rule 198 (unary_expression -> INC unary_expression .)
    MOD_ASSIGN      reduce using rule 198 (unary_expression -> INC unary_expression .)
    ADD_ASSIGN      reduce using rule 198 (unary_expression -> INC unary_expression .)
    SUB_ASSIGN      reduce using rule 198 (unary_expression -> INC unary_expression .)
    LSHIFT_ASSIGN   reduce using rule 198 (unary_expression -> INC unary_expression .)
    RSHIFT_ASSIGN   reduce using rule 198 (unary_expression -> INC unary_expression .)
    AND_ASSIGN      reduce using rule 198 (unary_expression -> INC unary_expression .)
    XOR_ASSIGN      reduce using rule 198 (unary_expression -> INC unary_expression .)
    OR_ASSIGN       reduce using rule 198 (unary_expression -> INC unary_expression .)


state 275

    (88) direct_declarator -> direct_declarator LP parameter_type_list RP .

    LBRACK          reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    LP              reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    LBRACE          reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    TYPEDEF         reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    EXTERN          reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    STATIC          reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    AUTO            reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    REGISTER        reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    VOID            reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    CHAR            reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    SHORT           reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    INT             reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    LONG            reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    FLOAT           reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    DOUBLE          reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    SIGNED          reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    UNSIGNED        reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    TYPE_NAME       reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    ENUM            reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    STRUCT          reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    UNION           reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    RP              reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    COLON           reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    SEMI            reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    COMMA           reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)
    ASSIGNMENT      reduce using rule 88 (direct_declarator -> direct_declarator LP parameter_type_list RP .)


state 276

    (85) direct_declarator -> LP . declarator RP
    (246) direct_abstract_declarator -> LP . abstract_declarator RP
    (251) direct_abstract_declarator -> LP . RP
    (252) direct_abstract_declarator -> LP . parameter_type_list RP
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (220) abstract_declarator -> . pointer
    (221) abstract_declarator -> . direct_abstract_declarator
    (222) abstract_declarator -> . pointer direct_abstract_declarator
    (117) parameter_type_list -> . parameter_list
    (118) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (246) direct_abstract_declarator -> . LP abstract_declarator RP
    (247) direct_abstract_declarator -> . LBRACK RBRACK
    (248) direct_abstract_declarator -> . LBRACK constant_expression RBRACK
    (249) direct_abstract_declarator -> . direct_abstract_declarator LBRACK RBRACK
    (250) direct_abstract_declarator -> . direct_abstract_declarator LBRACK constant_expression RBRACK
    (251) direct_abstract_declarator -> . LP RP
    (252) direct_abstract_declarator -> . LP parameter_type_list RP
    (253) direct_abstract_declarator -> . direct_abstract_declarator LP RP
    (254) direct_abstract_declarator -> . direct_abstract_declarator LP parameter_type_list RP
    (154) parameter_list -> . parameter_declaration
    (155) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RP              shift and go to state 397
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 276
    LBRACK          shift and go to state 277
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    parameter_list                 shift and go to state 148
    parameter_type_list            shift and go to state 398
    parameter_declaration          shift and go to state 145
    direct_declarator              shift and go to state 34
    abstract_declarator            shift and go to state 399
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 146
    declarator                     shift and go to state 57
    direct_abstract_declarator     shift and go to state 280
    pointer                        shift and go to state 281

state 277

    (247) direct_abstract_declarator -> LBRACK . RBRACK
    (248) direct_abstract_declarator -> LBRACK . constant_expression RBRACK
    (116) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    RBRACK          shift and go to state 401
    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    and_expression                 shift and go to state 113
    unary_operator                 shift and go to state 138
    conditional_expression         shift and go to state 139
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    constant_expression            shift and go to state 400
    relational_expression          shift and go to state 120

state 278

    (195) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RP              reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    SEMI            reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    LBRACE          reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    TYPEDEF         reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    EXTERN          reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    STATIC          reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    AUTO            reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    REGISTER        reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    VOID            reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    CHAR            reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    SHORT           reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    INT             reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    LONG            reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    FLOAT           reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    DOUBLE          reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    SIGNED          reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    UNSIGNED        reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    TYPE_NAME       reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    ENUM            reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    STRUCT          reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    UNION           reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 279

    (194) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    RP              reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    SEMI            reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    LBRACE          reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    TYPEDEF         reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    EXTERN          reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    STATIC          reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    AUTO            reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    REGISTER        reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    VOID            reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    CHAR            reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    SHORT           reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    INT             reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    LONG            reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    FLOAT           reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    DOUBLE          reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    SIGNED          reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    UNSIGNED        reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    TYPE_NAME       reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    ENUM            reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    STRUCT          reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    UNION           reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)


state 280

    (221) abstract_declarator -> direct_abstract_declarator .
    (249) direct_abstract_declarator -> direct_abstract_declarator . LBRACK RBRACK
    (250) direct_abstract_declarator -> direct_abstract_declarator . LBRACK constant_expression RBRACK
    (253) direct_abstract_declarator -> direct_abstract_declarator . LP RP
    (254) direct_abstract_declarator -> direct_abstract_declarator . LP parameter_type_list RP

    RP              reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    SEMI            reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    LBRACE          reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    TYPEDEF         reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    EXTERN          reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    STATIC          reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    AUTO            reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    REGISTER        reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    VOID            reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    CHAR            reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    SHORT           reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    INT             reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    LONG            reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    FLOAT           reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    DOUBLE          reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    SIGNED          reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    UNSIGNED        reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    TYPE_NAME       reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    ENUM            reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    STRUCT          reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    UNION           reduce using rule 221 (abstract_declarator -> direct_abstract_declarator .)
    LBRACK          shift and go to state 402
    LP              shift and go to state 403


state 281

    (34) declarator -> pointer . direct_declarator
    (220) abstract_declarator -> pointer .
    (222) abstract_declarator -> pointer . direct_abstract_declarator
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (246) direct_abstract_declarator -> . LP abstract_declarator RP
    (247) direct_abstract_declarator -> . LBRACK RBRACK
    (248) direct_abstract_declarator -> . LBRACK constant_expression RBRACK
    (249) direct_abstract_declarator -> . direct_abstract_declarator LBRACK RBRACK
    (250) direct_abstract_declarator -> . direct_abstract_declarator LBRACK constant_expression RBRACK
    (251) direct_abstract_declarator -> . LP RP
    (252) direct_abstract_declarator -> . LP parameter_type_list RP
    (253) direct_abstract_declarator -> . direct_abstract_declarator LP RP
    (254) direct_abstract_declarator -> . direct_abstract_declarator LP parameter_type_list RP

    RP              reduce using rule 220 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 220 (abstract_declarator -> pointer .)
    SEMI            reduce using rule 220 (abstract_declarator -> pointer .)
    LBRACE          reduce using rule 220 (abstract_declarator -> pointer .)
    TYPEDEF         reduce using rule 220 (abstract_declarator -> pointer .)
    EXTERN          reduce using rule 220 (abstract_declarator -> pointer .)
    STATIC          reduce using rule 220 (abstract_declarator -> pointer .)
    AUTO            reduce using rule 220 (abstract_declarator -> pointer .)
    REGISTER        reduce using rule 220 (abstract_declarator -> pointer .)
    VOID            reduce using rule 220 (abstract_declarator -> pointer .)
    CHAR            reduce using rule 220 (abstract_declarator -> pointer .)
    SHORT           reduce using rule 220 (abstract_declarator -> pointer .)
    INT             reduce using rule 220 (abstract_declarator -> pointer .)
    LONG            reduce using rule 220 (abstract_declarator -> pointer .)
    FLOAT           reduce using rule 220 (abstract_declarator -> pointer .)
    DOUBLE          reduce using rule 220 (abstract_declarator -> pointer .)
    SIGNED          reduce using rule 220 (abstract_declarator -> pointer .)
    UNSIGNED        reduce using rule 220 (abstract_declarator -> pointer .)
    TYPE_NAME       reduce using rule 220 (abstract_declarator -> pointer .)
    ENUM            reduce using rule 220 (abstract_declarator -> pointer .)
    STRUCT          reduce using rule 220 (abstract_declarator -> pointer .)
    UNION           reduce using rule 220 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 276
    LBRACK          shift and go to state 277

    direct_declarator              shift and go to state 54
    direct_abstract_declarator     shift and go to state 404

state 282

    (89) direct_declarator -> direct_declarator LP identifier_list RP .

    LBRACK          reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    LP              reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    LBRACE          reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    TYPEDEF         reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    EXTERN          reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    STATIC          reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    AUTO            reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    REGISTER        reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    VOID            reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    CHAR            reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    SHORT           reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    INT             reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    LONG            reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    FLOAT           reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    DOUBLE          reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    SIGNED          reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    UNSIGNED        reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    TYPE_NAME       reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    ENUM            reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    STRUCT          reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    UNION           reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    RP              reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    COLON           reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    SEMI            reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    COMMA           reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)
    ASSIGNMENT      reduce using rule 89 (direct_declarator -> direct_declarator LP identifier_list RP .)


state 283

    (120) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 405


state 284

    (118) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (155) parameter_list -> parameter_list COMMA . parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 406
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    enum_specifier                 shift and go to state 35
    parameter_declaration          shift and go to state 407
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 146

state 285

    (44) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 44 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 44 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 286

    (96) init_declarator -> declarator ASSIGNMENT initializer .

    SEMI            reduce using rule 96 (init_declarator -> declarator ASSIGNMENT initializer .)
    COMMA           reduce using rule 96 (init_declarator -> declarator ASSIGNMENT initializer .)


state 287

    (134) initializer -> assignment_expression .

    RBRACE          reduce using rule 134 (initializer -> assignment_expression .)
    COMMA           reduce using rule 134 (initializer -> assignment_expression .)
    SEMI            reduce using rule 134 (initializer -> assignment_expression .)


state 288

    (135) initializer -> LBRACE . initializer_list RBRACE
    (136) initializer -> LBRACE . initializer_list COMMA RBRACE
    (175) initializer_list -> . initializer
    (176) initializer_list -> . initializer_list COMMA initializer
    (134) initializer -> . assignment_expression
    (135) initializer -> . LBRACE initializer_list RBRACE
    (136) initializer -> . LBRACE initializer_list COMMA RBRACE
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    LBRACE          shift and go to state 288
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    initializer                    shift and go to state 408
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 287
    multiplicative_expression      shift and go to state 136
    conditional_expression         shift and go to state 182
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    initializer_list               shift and go to state 409

state 289

    (11) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    END             reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ADD             reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SUB             reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    MUL             reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LP              reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INTERFACE       reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IMPLEMENTATION  reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    PROTOCOL        reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CLASS           reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 11 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 290

    (168) jump_statement -> GOTO IDENTIFIER . SEMI

    SEMI            shift and go to state 410


state 291

    (41) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (92) statement_list -> statement_list . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    RBRACE          shift and go to state 411
    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 309
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 292

    (40) compound_statement -> LBRACE declaration_list RBRACE .

    END             reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    TYPEDEF         reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    ADD             reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    SUB             reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    EXTERN          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    STATIC          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    AUTO            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    REGISTER        reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOID            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    SHORT           reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    LONG            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    FLOAT           reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    DOUBLE          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIGNED          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    UNSIGNED        reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    TYPE_NAME       reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    MUL             reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    LP              reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    ENUM            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRUCT          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    UNION           reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    CASE            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    DEFAULT         reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    SEMI            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    SWITCH          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    DO              reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    GOTO            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    CONTINUE        reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    INC             reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    DEC             reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIZEOF          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    BITAND          reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    TILDE           reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    BANG            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    HEX_LITERAL     reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    OCTAL_LITERAL   reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    BINARY_LITERAL  reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    DECIMAL_LITERAL reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    FLOATING_POINT_LITERAL reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    C_STRING_LITERAL reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    OBJC_STRING_LITERAL reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    INTERFACE       reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    IMPLEMENTATION  reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    PROTOCOL        reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    CLASS           reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 40 (compound_statement -> LBRACE declaration_list RBRACE .)


state 293

    (171) jump_statement -> RETURN SEMI .

    WHILE           reduce using rule 171 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 171 (jump_statement -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 171 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 171 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 171 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 171 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 171 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 171 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 171 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 171 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 171 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 171 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 171 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 171 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 171 (jump_statement -> RETURN SEMI .)
    INC             reduce using rule 171 (jump_statement -> RETURN SEMI .)
    DEC             reduce using rule 171 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 171 (jump_statement -> RETURN SEMI .)
    BITAND          reduce using rule 171 (jump_statement -> RETURN SEMI .)
    MUL             reduce using rule 171 (jump_statement -> RETURN SEMI .)
    ADD             reduce using rule 171 (jump_statement -> RETURN SEMI .)
    SUB             reduce using rule 171 (jump_statement -> RETURN SEMI .)
    TILDE           reduce using rule 171 (jump_statement -> RETURN SEMI .)
    BANG            reduce using rule 171 (jump_statement -> RETURN SEMI .)
    HEX_LITERAL     reduce using rule 171 (jump_statement -> RETURN SEMI .)
    OCTAL_LITERAL   reduce using rule 171 (jump_statement -> RETURN SEMI .)
    BINARY_LITERAL  reduce using rule 171 (jump_statement -> RETURN SEMI .)
    DECIMAL_LITERAL reduce using rule 171 (jump_statement -> RETURN SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 171 (jump_statement -> RETURN SEMI .)
    C_STRING_LITERAL reduce using rule 171 (jump_statement -> RETURN SEMI .)
    OBJC_STRING_LITERAL reduce using rule 171 (jump_statement -> RETURN SEMI .)
    LP              reduce using rule 171 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 171 (jump_statement -> RETURN SEMI .)


state 294

    (172) jump_statement -> RETURN expression . SEMI
    (193) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 412
    COMMA           shift and go to state 311


state 295

    (208) assignment_operator -> SUB_ASSIGN .

    INC             reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    DEC             reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    BITAND          reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    MUL             reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    ADD             reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    SUB             reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    TILDE           reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    BANG            reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    HEX_LITERAL     reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    BINARY_LITERAL  reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    C_STRING_LITERAL reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)
    LP              reduce using rule 208 (assignment_operator -> SUB_ASSIGN .)


state 296

    (206) assignment_operator -> MOD_ASSIGN .

    INC             reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    DEC             reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    BITAND          reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    MUL             reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    ADD             reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    SUB             reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    TILDE           reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    BANG            reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    HEX_LITERAL     reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    BINARY_LITERAL  reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    C_STRING_LITERAL reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)
    LP              reduce using rule 206 (assignment_operator -> MOD_ASSIGN .)


state 297

    (212) assignment_operator -> XOR_ASSIGN .

    INC             reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    DEC             reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    BITAND          reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    MUL             reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    ADD             reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    SUB             reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    TILDE           reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    BANG            reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    HEX_LITERAL     reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    BINARY_LITERAL  reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    C_STRING_LITERAL reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)
    LP              reduce using rule 212 (assignment_operator -> XOR_ASSIGN .)


state 298

    (203) assignment_operator -> ASSIGNMENT .

    INC             reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    DEC             reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    SIZEOF          reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    BITAND          reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    MUL             reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    ADD             reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    SUB             reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    TILDE           reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    BANG            reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    IDENTIFIER      reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    HEX_LITERAL     reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    OCTAL_LITERAL   reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    BINARY_LITERAL  reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    DECIMAL_LITERAL reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    FLOATING_POINT_LITERAL reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    C_STRING_LITERAL reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    OBJC_STRING_LITERAL reduce using rule 203 (assignment_operator -> ASSIGNMENT .)
    LP              reduce using rule 203 (assignment_operator -> ASSIGNMENT .)


state 299

    (210) assignment_operator -> RSHIFT_ASSIGN .

    INC             reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    DEC             reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    SIZEOF          reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    BITAND          reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    MUL             reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    ADD             reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    SUB             reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    TILDE           reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    BANG            reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    HEX_LITERAL     reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    BINARY_LITERAL  reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    C_STRING_LITERAL reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)
    LP              reduce using rule 210 (assignment_operator -> RSHIFT_ASSIGN .)


state 300

    (213) assignment_operator -> OR_ASSIGN .

    INC             reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    DEC             reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    BITAND          reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    MUL             reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    ADD             reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    SUB             reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    TILDE           reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    BANG            reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    HEX_LITERAL     reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    BINARY_LITERAL  reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    C_STRING_LITERAL reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 213 (assignment_operator -> OR_ASSIGN .)
    LP              reduce using rule 213 (assignment_operator -> OR_ASSIGN .)


state 301

    (209) assignment_operator -> LSHIFT_ASSIGN .

    INC             reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    DEC             reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    SIZEOF          reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    BITAND          reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    MUL             reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    ADD             reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    SUB             reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    TILDE           reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    BANG            reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    HEX_LITERAL     reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    BINARY_LITERAL  reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    C_STRING_LITERAL reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)
    LP              reduce using rule 209 (assignment_operator -> LSHIFT_ASSIGN .)


state 302

    (211) assignment_operator -> AND_ASSIGN .

    INC             reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    DEC             reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    BITAND          reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    MUL             reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    ADD             reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    SUB             reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    TILDE           reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    BANG            reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    HEX_LITERAL     reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    BINARY_LITERAL  reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    C_STRING_LITERAL reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 211 (assignment_operator -> AND_ASSIGN .)
    LP              reduce using rule 211 (assignment_operator -> AND_ASSIGN .)


state 303

    (204) assignment_operator -> MUL_ASSIGN .

    INC             reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    DEC             reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    BITAND          reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    MUL             reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    ADD             reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    SUB             reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    TILDE           reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    BANG            reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    HEX_LITERAL     reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    BINARY_LITERAL  reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    C_STRING_LITERAL reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)
    LP              reduce using rule 204 (assignment_operator -> MUL_ASSIGN .)


state 304

    (205) assignment_operator -> DIV_ASSIGN .

    INC             reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    DEC             reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    BITAND          reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    MUL             reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    ADD             reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    SUB             reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    TILDE           reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    BANG            reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    HEX_LITERAL     reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    BINARY_LITERAL  reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    C_STRING_LITERAL reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)
    LP              reduce using rule 205 (assignment_operator -> DIV_ASSIGN .)


state 305

    (207) assignment_operator -> ADD_ASSIGN .

    INC             reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    DEC             reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    BITAND          reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    MUL             reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    ADD             reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    SUB             reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    TILDE           reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    BANG            reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    HEX_LITERAL     reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    OCTAL_LITERAL   reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    BINARY_LITERAL  reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    FLOATING_POINT_LITERAL reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    C_STRING_LITERAL reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    OBJC_STRING_LITERAL reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)
    LP              reduce using rule 207 (assignment_operator -> ADD_ASSIGN .)


state 306

    (174) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120
    assignment_expression          shift and go to state 413
    unary_expression               shift and go to state 161
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    primary_expression             shift and go to state 129

state 307

    (166) iteration_statement -> FOR LP . expression_statement expression_statement RP statement
    (167) iteration_statement -> FOR LP . expression_statement expression_statement expression RP
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    SEMI            shift and go to state 177
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 414
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 308

    (169) jump_statement -> CONTINUE SEMI .

    WHILE           reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    INC             reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    DEC             reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    BITAND          reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    MUL             reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    ADD             reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    SUB             reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    TILDE           reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    BANG            reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    HEX_LITERAL     reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    OCTAL_LITERAL   reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    BINARY_LITERAL  reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    DECIMAL_LITERAL reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    C_STRING_LITERAL reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    OBJC_STRING_LITERAL reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    LP              reduce using rule 169 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 169 (jump_statement -> CONTINUE SEMI .)


state 309

    (92) statement_list -> statement_list statement .

    RBRACE          reduce using rule 92 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 92 (statement_list -> statement_list statement .)
    CASE            reduce using rule 92 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 92 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 92 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 92 (statement_list -> statement_list statement .)
    IF              reduce using rule 92 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 92 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 92 (statement_list -> statement_list statement .)
    DO              reduce using rule 92 (statement_list -> statement_list statement .)
    FOR             reduce using rule 92 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 92 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 92 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 92 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 92 (statement_list -> statement_list statement .)
    INC             reduce using rule 92 (statement_list -> statement_list statement .)
    DEC             reduce using rule 92 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 92 (statement_list -> statement_list statement .)
    BITAND          reduce using rule 92 (statement_list -> statement_list statement .)
    MUL             reduce using rule 92 (statement_list -> statement_list statement .)
    ADD             reduce using rule 92 (statement_list -> statement_list statement .)
    SUB             reduce using rule 92 (statement_list -> statement_list statement .)
    TILDE           reduce using rule 92 (statement_list -> statement_list statement .)
    BANG            reduce using rule 92 (statement_list -> statement_list statement .)
    HEX_LITERAL     reduce using rule 92 (statement_list -> statement_list statement .)
    OCTAL_LITERAL   reduce using rule 92 (statement_list -> statement_list statement .)
    BINARY_LITERAL  reduce using rule 92 (statement_list -> statement_list statement .)
    DECIMAL_LITERAL reduce using rule 92 (statement_list -> statement_list statement .)
    FLOATING_POINT_LITERAL reduce using rule 92 (statement_list -> statement_list statement .)
    C_STRING_LITERAL reduce using rule 92 (statement_list -> statement_list statement .)
    OBJC_STRING_LITERAL reduce using rule 92 (statement_list -> statement_list statement .)
    LP              reduce using rule 92 (statement_list -> statement_list statement .)


state 310

    (39) compound_statement -> LBRACE statement_list RBRACE .

    END             reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    TYPEDEF         reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    ADD             reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    SUB             reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    EXTERN          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    STATIC          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    AUTO            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    REGISTER        reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    SHORT           reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    LONG            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    SIGNED          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    UNSIGNED        reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    TYPE_NAME       reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    MUL             reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    LP              reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    ENUM            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    STRUCT          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    UNION           reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    GOTO            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    INC             reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    DEC             reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    SIZEOF          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    BITAND          reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    TILDE           reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    BANG            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    HEX_LITERAL     reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    OCTAL_LITERAL   reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    BINARY_LITERAL  reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    DECIMAL_LITERAL reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOATING_POINT_LITERAL reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    C_STRING_LITERAL reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    OBJC_STRING_LITERAL reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    INTERFACE       reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    IMPLEMENTATION  reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    PROTOCOL        reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    CLASS           reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 39 (compound_statement -> LBRACE statement_list RBRACE .)


state 311

    (193) expression -> expression COMMA . assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120
    assignment_expression          shift and go to state 415
    unary_expression               shift and go to state 161
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    primary_expression             shift and go to state 129

state 312

    (160) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 160 (expression_statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 160 (expression_statement -> expression SEMI .)
    CASE            reduce using rule 160 (expression_statement -> expression SEMI .)
    DEFAULT         reduce using rule 160 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 160 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 160 (expression_statement -> expression SEMI .)
    IF              reduce using rule 160 (expression_statement -> expression SEMI .)
    SWITCH          reduce using rule 160 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 160 (expression_statement -> expression SEMI .)
    DO              reduce using rule 160 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 160 (expression_statement -> expression SEMI .)
    GOTO            reduce using rule 160 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 160 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 160 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 160 (expression_statement -> expression SEMI .)
    INC             reduce using rule 160 (expression_statement -> expression SEMI .)
    DEC             reduce using rule 160 (expression_statement -> expression SEMI .)
    SIZEOF          reduce using rule 160 (expression_statement -> expression SEMI .)
    BITAND          reduce using rule 160 (expression_statement -> expression SEMI .)
    MUL             reduce using rule 160 (expression_statement -> expression SEMI .)
    ADD             reduce using rule 160 (expression_statement -> expression SEMI .)
    SUB             reduce using rule 160 (expression_statement -> expression SEMI .)
    TILDE           reduce using rule 160 (expression_statement -> expression SEMI .)
    BANG            reduce using rule 160 (expression_statement -> expression SEMI .)
    HEX_LITERAL     reduce using rule 160 (expression_statement -> expression SEMI .)
    OCTAL_LITERAL   reduce using rule 160 (expression_statement -> expression SEMI .)
    BINARY_LITERAL  reduce using rule 160 (expression_statement -> expression SEMI .)
    DECIMAL_LITERAL reduce using rule 160 (expression_statement -> expression SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 160 (expression_statement -> expression SEMI .)
    C_STRING_LITERAL reduce using rule 160 (expression_statement -> expression SEMI .)
    OBJC_STRING_LITERAL reduce using rule 160 (expression_statement -> expression SEMI .)
    LP              reduce using rule 160 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 160 (expression_statement -> expression SEMI .)
    RP              reduce using rule 160 (expression_statement -> expression SEMI .)


state 313

    (158) labeled_statement -> DEFAULT COLON . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 416
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 314

    (164) iteration_statement -> WHILE LP . expression RP statement
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 417

state 315

    (157) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 418


state 316

    (163) selection_statement -> SWITCH LP . expression RP statement
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 419

state 317

    (156) labeled_statement -> IDENTIFIER COLON . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 420
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 318

    (170) jump_statement -> BREAK SEMI .

    WHILE           reduce using rule 170 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 170 (jump_statement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 170 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 170 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 170 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 170 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 170 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 170 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 170 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 170 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 170 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 170 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 170 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 170 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 170 (jump_statement -> BREAK SEMI .)
    INC             reduce using rule 170 (jump_statement -> BREAK SEMI .)
    DEC             reduce using rule 170 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 170 (jump_statement -> BREAK SEMI .)
    BITAND          reduce using rule 170 (jump_statement -> BREAK SEMI .)
    MUL             reduce using rule 170 (jump_statement -> BREAK SEMI .)
    ADD             reduce using rule 170 (jump_statement -> BREAK SEMI .)
    SUB             reduce using rule 170 (jump_statement -> BREAK SEMI .)
    TILDE           reduce using rule 170 (jump_statement -> BREAK SEMI .)
    BANG            reduce using rule 170 (jump_statement -> BREAK SEMI .)
    HEX_LITERAL     reduce using rule 170 (jump_statement -> BREAK SEMI .)
    OCTAL_LITERAL   reduce using rule 170 (jump_statement -> BREAK SEMI .)
    BINARY_LITERAL  reduce using rule 170 (jump_statement -> BREAK SEMI .)
    DECIMAL_LITERAL reduce using rule 170 (jump_statement -> BREAK SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 170 (jump_statement -> BREAK SEMI .)
    C_STRING_LITERAL reduce using rule 170 (jump_statement -> BREAK SEMI .)
    OBJC_STRING_LITERAL reduce using rule 170 (jump_statement -> BREAK SEMI .)
    LP              reduce using rule 170 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 170 (jump_statement -> BREAK SEMI .)


state 319

    (165) iteration_statement -> DO statement . WHILE LP expression RP SEMI

    WHILE           shift and go to state 421


state 320

    (161) selection_statement -> IF LP . expression RP statement
    (162) selection_statement -> IF LP . expression RP statement ELSE statement
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 422

state 321

    (18) class_interface -> INTERFACE class_name instance_variables interface_declaration_list . END
    (53) interface_declaration_list -> interface_declaration_list . declaration
    (54) interface_declaration_list -> interface_declaration_list . method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 423
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    method_declaration             shift and go to state 204
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    enum_specifier                 shift and go to state 35
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 205

state 322

    (19) class_interface -> INTERFACE class_name COLON superclass_name . instance_variables interface_declaration_list END
    (21) class_interface -> INTERFACE class_name COLON superclass_name . protocol_reference_list instance_variables interface_declaration_list END
    (47) instance_variables -> . LBRACE struct_declaration_list RBRACE
    (48) instance_variables -> . LBRACE visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> . LBRACE struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> . LBRACE visibility_specification struct_declaration_list instance_variables RBRACE
    (55) protocol_reference_list -> . LT protocol_list GT

    LBRACE          shift and go to state 94
    LT              shift and go to state 77

    instance_variables             shift and go to state 424
    protocol_reference_list        shift and go to state 425

state 323

    (24) category_interface -> INTERFACE class_name ( category_name . ) interface_declaration_list END
    (25) category_interface -> INTERFACE class_name ( category_name . ) protocol_reference_list interface_declaration_list END

    )               shift and go to state 426


state 324

    (20) class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list . END
    (53) interface_declaration_list -> interface_declaration_list . declaration
    (54) interface_declaration_list -> interface_declaration_list . method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 427
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    enum_specifier                 shift and go to state 35
    method_declaration             shift and go to state 204
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 205

state 325

    (55) protocol_reference_list -> LT protocol_list GT .

    TYPEDEF         reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    ADD             reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    SUB             reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    EXTERN          reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    STATIC          reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    AUTO            reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    REGISTER        reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    VOID            reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    CHAR            reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    SHORT           reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    INT             reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    LONG            reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    FLOAT           reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    DOUBLE          reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    SIGNED          reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    UNSIGNED        reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    TYPE_NAME       reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    ENUM            reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    STRUCT          reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    UNION           reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)
    LBRACE          reduce using rule 55 (protocol_reference_list -> LT protocol_list GT .)


state 326

    (105) protocol_list -> protocol_list COMMA . protocol_name
    (63) protocol_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 48

    protocol_name                  shift and go to state 428

state 327

    (28) protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .

    INTERFACE       reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    IMPLEMENTATION  reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    PROTOCOL        reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    CLASS           reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    TYPEDEF         reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    EXTERN          reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    STATIC          reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    AUTO            reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    REGISTER        reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    VOID            reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    CHAR            reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    SHORT           reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    INT             reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    LONG            reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    FLOAT           reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    DOUBLE          reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    SIGNED          reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    UNSIGNED        reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    TYPE_NAME       reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    MUL             reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    IDENTIFIER      reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    LP              reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    ENUM            reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    STRUCT          reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    UNION           reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)
    $end            reduce using rule 28 (protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END .)


state 328

    (243) keyword_declarator -> COLON method_type . IDENTIFIER

    IDENTIFIER      shift and go to state 429


state 329

    (242) keyword_declarator -> COLON IDENTIFIER .

    COMMA           reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    COLON           reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    IDENTIFIER      reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    SEMI            reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    LBRACE          reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    TYPEDEF         reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    EXTERN          reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    STATIC          reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    AUTO            reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    REGISTER        reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    VOID            reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    CHAR            reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    SHORT           reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    INT             reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    LONG            reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    FLOAT           reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    DOUBLE          reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    SIGNED          reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    UNSIGNED        reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    TYPE_NAME       reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    ENUM            reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    STRUCT          reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)
    UNION           reduce using rule 242 (keyword_declarator -> COLON IDENTIFIER .)


state 330

    (139) class_method_declaration -> ADD method_type method_selector . SEMI

    SEMI            shift and go to state 430


state 331

    (138) class_method_declaration -> ADD method_selector SEMI .

    END             reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    TYPEDEF         reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    ADD             reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    SUB             reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    EXTERN          reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    STATIC          reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    AUTO            reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    REGISTER        reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    VOID            reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    CHAR            reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    SHORT           reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    INT             reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    LONG            reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    FLOAT           reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    DOUBLE          reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    SIGNED          reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    UNSIGNED        reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    TYPE_NAME       reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    ENUM            reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    STRUCT          reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)
    UNION           reduce using rule 138 (class_method_declaration -> ADD method_selector SEMI .)


state 332

    (219) keyword_selector -> keyword_selector keyword_declarator .

    COMMA           reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    COLON           reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    IDENTIFIER      reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    SEMI            reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    LBRACE          reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    TYPEDEF         reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    EXTERN          reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    STATIC          reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    AUTO            reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    REGISTER        reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    VOID            reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    CHAR            reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    SHORT           reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    INT             reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    LONG            reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    FLOAT           reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    DOUBLE          reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    SIGNED          reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    UNSIGNED        reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    TYPE_NAME       reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    ENUM            reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    STRUCT          reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)
    UNION           reduce using rule 219 (keyword_selector -> keyword_selector keyword_declarator .)


state 333

    (244) keyword_declarator -> selector . COLON IDENTIFIER
    (245) keyword_declarator -> selector . COLON method_type IDENTIFIER

    COLON           shift and go to state 335


state 334

    (183) method_selector -> keyword_selector COMMA . ELLIPSIS
    (184) method_selector -> keyword_selector COMMA . parameter_type_list
    (117) parameter_type_list -> . parameter_list
    (118) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (154) parameter_list -> . parameter_declaration
    (155) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 431
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    parameter_list                 shift and go to state 148
    parameter_type_list            shift and go to state 432
    parameter_declaration          shift and go to state 145
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 146

state 335

    (244) keyword_declarator -> selector COLON . IDENTIFIER
    (245) keyword_declarator -> selector COLON . method_type IDENTIFIER
    (185) method_type -> . LP type_name RP

    IDENTIFIER      shift and go to state 434
    LP              shift and go to state 199

    method_type                    shift and go to state 433

state 336

    (185) method_type -> LP type_name . RP

    RP              shift and go to state 435


state 337

    (140) instance_method_declaration -> SUB method_selector SEMI .

    END             reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    TYPEDEF         reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    ADD             reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    SUB             reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    EXTERN          reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    STATIC          reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    AUTO            reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    REGISTER        reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    VOID            reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    CHAR            reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    SHORT           reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    INT             reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    LONG            reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    FLOAT           reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    DOUBLE          reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    SIGNED          reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    UNSIGNED        reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    TYPE_NAME       reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    ENUM            reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    STRUCT          reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)
    UNION           reduce using rule 140 (instance_method_declaration -> SUB method_selector SEMI .)


state 338

    (141) instance_method_declaration -> SUB method_type method_selector . SEMI

    SEMI            shift and go to state 436


state 339

    (110) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .

    VOID            reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    TYPE_NAME       reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    MUL             reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LP              reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LBRACK          reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LBRACE          reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    RP              reduce using rule 110 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)


state 340

    (216) struct_declarator -> declarator COLON . constant_expression
    (116) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    and_expression                 shift and go to state 113
    unary_operator                 shift and go to state 138
    conditional_expression         shift and go to state 139
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    constant_expression            shift and go to state 437
    relational_expression          shift and go to state 120

state 341

    (215) struct_declarator -> COLON constant_expression .

    SEMI            reduce using rule 215 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 215 (struct_declarator -> COLON constant_expression .)


state 342

    (180) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (214) struct_declarator -> . declarator
    (215) struct_declarator -> . COLON constant_expression
    (216) struct_declarator -> . declarator COLON constant_expression
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP

    COLON           shift and go to state 212
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24

    struct_declarator              shift and go to state 438
    direct_declarator              shift and go to state 34
    declarator                     shift and go to state 211
    pointer                        shift and go to state 16

state 343

    (137) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    RBRACE          reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    TYPE_NAME       reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNION           reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LBRACE          reduce using rule 137 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 344

    (143) class_method_definition -> ADD method_type . method_selector compound_statement
    (145) class_method_definition -> ADD method_type . method_selector declaration_list compound_statement
    (181) method_selector -> . unary_selector
    (182) method_selector -> . keyword_selector
    (183) method_selector -> . keyword_selector COMMA ELLIPSIS
    (184) method_selector -> . keyword_selector COMMA parameter_type_list
    (217) unary_selector -> . selector
    (218) keyword_selector -> . keyword_declarator
    (219) keyword_selector -> . keyword_selector keyword_declarator
    (241) selector -> . IDENTIFIER
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER

    IDENTIFIER      shift and go to state 200
    COLON           shift and go to state 192

    keyword_declarator             shift and go to state 198
    unary_selector                 shift and go to state 194
    method_selector                shift and go to state 439
    keyword_selector               shift and go to state 196
    selector                       shift and go to state 197

state 345

    (142) class_method_definition -> ADD method_selector . compound_statement
    (144) class_method_definition -> ADD method_selector . declaration_list compound_statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (36) declaration_list -> . declaration
    (37) declaration_list -> . declaration_list declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 440
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_list               shift and go to state 441
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 72

state 346

    (60) implementation_definition_list -> implementation_definition_list declaration .

    END             reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    TYPEDEF         reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    ADD             reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    SUB             reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    EXTERN          reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    STATIC          reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    AUTO            reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    REGISTER        reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    VOID            reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    CHAR            reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    SHORT           reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    INT             reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    LONG            reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    FLOAT           reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    DOUBLE          reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    SIGNED          reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    UNSIGNED        reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    TYPE_NAME       reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    MUL             reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    IDENTIFIER      reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    LP              reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    ENUM            reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    STRUCT          reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)
    UNION           reduce using rule 60 (implementation_definition_list -> implementation_definition_list declaration .)


state 347

    (22) class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .

    INTERFACE       reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    IMPLEMENTATION  reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    PROTOCOL        reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    CLASS           reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    TYPEDEF         reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    EXTERN          reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    STATIC          reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    AUTO            reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    REGISTER        reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    VOID            reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    CHAR            reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    SHORT           reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    INT             reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    LONG            reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    FLOAT           reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    DOUBLE          reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    SIGNED          reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    UNSIGNED        reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    TYPE_NAME       reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    MUL             reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    IDENTIFIER      reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    LP              reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    ENUM            reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    STRUCT          reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    UNION           reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)
    $end            reduce using rule 22 (class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END .)


state 348

    (61) implementation_definition_list -> implementation_definition_list method_definition .

    END             reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    TYPEDEF         reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    ADD             reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    SUB             reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    EXTERN          reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    STATIC          reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    AUTO            reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    REGISTER        reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    VOID            reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    CHAR            reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    SHORT           reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    INT             reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    LONG            reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    FLOAT           reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    DOUBLE          reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    SIGNED          reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    UNSIGNED        reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    TYPE_NAME       reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    MUL             reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    IDENTIFIER      reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    LP              reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    ENUM            reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    STRUCT          reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)
    UNION           reduce using rule 61 (implementation_definition_list -> implementation_definition_list method_definition .)


state 349

    (59) implementation_definition_list -> implementation_definition_list function_definition .

    END             reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    TYPEDEF         reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    ADD             reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    SUB             reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    EXTERN          reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    STATIC          reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    AUTO            reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    REGISTER        reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    VOID            reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    CHAR            reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    SHORT           reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    INT             reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    LONG            reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    FLOAT           reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    DOUBLE          reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    SIGNED          reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    UNSIGNED        reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    TYPE_NAME       reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    MUL             reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    IDENTIFIER      reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    LP              reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    ENUM            reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    STRUCT          reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)
    UNION           reduce using rule 59 (implementation_definition_list -> implementation_definition_list function_definition .)


state 350

    (147) instance_method_definition -> SUB method_type . method_selector compound_statement
    (149) instance_method_definition -> SUB method_type . method_selector declaration_list compound_statement
    (181) method_selector -> . unary_selector
    (182) method_selector -> . keyword_selector
    (183) method_selector -> . keyword_selector COMMA ELLIPSIS
    (184) method_selector -> . keyword_selector COMMA parameter_type_list
    (217) unary_selector -> . selector
    (218) keyword_selector -> . keyword_declarator
    (219) keyword_selector -> . keyword_selector keyword_declarator
    (241) selector -> . IDENTIFIER
    (242) keyword_declarator -> . COLON IDENTIFIER
    (243) keyword_declarator -> . COLON method_type IDENTIFIER
    (244) keyword_declarator -> . selector COLON IDENTIFIER
    (245) keyword_declarator -> . selector COLON method_type IDENTIFIER

    IDENTIFIER      shift and go to state 200
    COLON           shift and go to state 192

    keyword_declarator             shift and go to state 198
    unary_selector                 shift and go to state 194
    method_selector                shift and go to state 442
    keyword_selector               shift and go to state 196
    selector                       shift and go to state 197

state 351

    (146) instance_method_definition -> SUB method_selector . compound_statement
    (148) instance_method_definition -> SUB method_selector . declaration_list compound_statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (36) declaration_list -> . declaration
    (37) declaration_list -> . declaration_list declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 443
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_list               shift and go to state 444
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 72

state 352

    (26) category_implementation -> IMPLEMENTATION class_name ( category_name ) . implementation_definition_list END
    (56) implementation_definition_list -> . function_definition
    (57) implementation_definition_list -> . declaration
    (58) implementation_definition_list -> . method_definition
    (59) implementation_definition_list -> . implementation_definition_list function_definition
    (60) implementation_definition_list -> . implementation_definition_list declaration
    (61) implementation_definition_list -> . implementation_definition_list method_definition
    (11) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (12) function_definition -> . declaration_specifiers declarator compound_statement
    (13) function_definition -> . declarator declaration_list compound_statement
    (14) function_definition -> . declarator compound_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (106) method_definition -> . class_method_definition
    (107) method_definition -> . instance_method_definition
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (142) class_method_definition -> . ADD method_selector compound_statement
    (143) class_method_definition -> . ADD method_type method_selector compound_statement
    (144) class_method_definition -> . ADD method_selector declaration_list compound_statement
    (145) class_method_definition -> . ADD method_type method_selector declaration_list compound_statement
    (146) instance_method_definition -> . SUB method_selector compound_statement
    (147) instance_method_definition -> . SUB method_type method_selector compound_statement
    (148) instance_method_definition -> . SUB method_selector declaration_list compound_statement
    (149) instance_method_definition -> . SUB method_type method_selector declaration_list compound_statement
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 215
    SUB             shift and go to state 217
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    declaration                    shift and go to state 214
    type_declaration               shift and go to state 8
    pointer                        shift and go to state 16
    type_specifier                 shift and go to state 11
    struct_or_union                shift and go to state 6
    direct_declarator              shift and go to state 34
    implementation_definition_list shift and go to state 445
    declaration_specifiers         shift and go to state 37
    instance_method_definition     shift and go to state 218
    method_definition              shift and go to state 219
    class_method_definition        shift and go to state 220
    function_definition            shift and go to state 221
    enum_specifier                 shift and go to state 35
    declarator                     shift and go to state 43

state 353

    (23) class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables . implementation_definition_list END
    (56) implementation_definition_list -> . function_definition
    (57) implementation_definition_list -> . declaration
    (58) implementation_definition_list -> . method_definition
    (59) implementation_definition_list -> . implementation_definition_list function_definition
    (60) implementation_definition_list -> . implementation_definition_list declaration
    (61) implementation_definition_list -> . implementation_definition_list method_definition
    (11) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (12) function_definition -> . declaration_specifiers declarator compound_statement
    (13) function_definition -> . declarator declaration_list compound_statement
    (14) function_definition -> . declarator compound_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (106) method_definition -> . class_method_definition
    (107) method_definition -> . instance_method_definition
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (142) class_method_definition -> . ADD method_selector compound_statement
    (143) class_method_definition -> . ADD method_type method_selector compound_statement
    (144) class_method_definition -> . ADD method_selector declaration_list compound_statement
    (145) class_method_definition -> . ADD method_type method_selector declaration_list compound_statement
    (146) instance_method_definition -> . SUB method_selector compound_statement
    (147) instance_method_definition -> . SUB method_type method_selector compound_statement
    (148) instance_method_definition -> . SUB method_selector declaration_list compound_statement
    (149) instance_method_definition -> . SUB method_type method_selector declaration_list compound_statement
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 215
    SUB             shift and go to state 217
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    declaration                    shift and go to state 214
    type_declaration               shift and go to state 8
    pointer                        shift and go to state 16
    type_specifier                 shift and go to state 11
    struct_or_union                shift and go to state 6
    direct_declarator              shift and go to state 34
    implementation_definition_list shift and go to state 446
    declaration_specifiers         shift and go to state 37
    instance_method_definition     shift and go to state 218
    method_definition              shift and go to state 219
    class_method_definition        shift and go to state 220
    function_definition            shift and go to state 221
    enum_specifier                 shift and go to state 35
    declarator                     shift and go to state 43

state 354

    (49) instance_variables -> LBRACE struct_declaration_list instance_variables . RBRACE

    RBRACE          shift and go to state 447


state 355

    (47) instance_variables -> LBRACE struct_declaration_list RBRACE .

    RBRACE          reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    ADD             reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    SUB             reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    TYPE_NAME       reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    MUL             reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)
    LP              reduce using rule 47 (instance_variables -> LBRACE struct_declaration_list RBRACE .)


state 356

    (48) instance_variables -> LBRACE visibility_specification struct_declaration_list . RBRACE
    (50) instance_variables -> LBRACE visibility_specification struct_declaration_list . instance_variables RBRACE
    (98) struct_declaration_list -> struct_declaration_list . struct_declaration
    (47) instance_variables -> . LBRACE struct_declaration_list RBRACE
    (48) instance_variables -> . LBRACE visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> . LBRACE struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> . LBRACE visibility_specification struct_declaration_list instance_variables RBRACE
    (137) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (177) specifier_qualifier_list -> . type_specifier
    (178) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RBRACE          shift and go to state 449
    LBRACE          shift and go to state 94
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 88
    struct_declaration             shift and go to state 207
    instance_variables             shift and go to state 448
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    specifier_qualifier_list       shift and go to state 90

state 357

    (128) type_direct_declarator -> LP type_declarator RP .

    LBRACK          reduce using rule 128 (type_direct_declarator -> LP type_declarator RP .)
    LP              reduce using rule 128 (type_direct_declarator -> LP type_declarator RP .)
    RP              reduce using rule 128 (type_direct_declarator -> LP type_declarator RP .)
    SEMI            reduce using rule 128 (type_direct_declarator -> LP type_declarator RP .)


state 358

    (129) type_direct_declarator -> type_direct_declarator LBRACK constant_expression . RBRACK

    RBRACK          shift and go to state 450


state 359

    (130) type_direct_declarator -> type_direct_declarator LBRACK RBRACK .

    LBRACK          reduce using rule 130 (type_direct_declarator -> type_direct_declarator LBRACK RBRACK .)
    LP              reduce using rule 130 (type_direct_declarator -> type_direct_declarator LBRACK RBRACK .)
    RP              reduce using rule 130 (type_direct_declarator -> type_direct_declarator LBRACK RBRACK .)
    SEMI            reduce using rule 130 (type_direct_declarator -> type_direct_declarator LBRACK RBRACK .)


state 360

    (133) type_direct_declarator -> type_direct_declarator LP RP .

    LBRACK          reduce using rule 133 (type_direct_declarator -> type_direct_declarator LP RP .)
    LP              reduce using rule 133 (type_direct_declarator -> type_direct_declarator LP RP .)
    RP              reduce using rule 133 (type_direct_declarator -> type_direct_declarator LP RP .)
    SEMI            reduce using rule 133 (type_direct_declarator -> type_direct_declarator LP RP .)


state 361

    (131) type_direct_declarator -> type_direct_declarator LP parameter_type_list . RP

    RP              shift and go to state 451


state 362

    (132) type_direct_declarator -> type_direct_declarator LP identifier_list . RP
    (120) identifier_list -> identifier_list . COMMA IDENTIFIER

    RP              shift and go to state 452
    COMMA           shift and go to state 283


state 363

    (114) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .

    EXTERN          reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    TYPE_NAME       reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    MUL             reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    IDENTIFIER      reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LP              reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LBRACK          reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    RP              reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LBRACE          reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 114 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)


state 364

    (151) enumerator_list -> enumerator_list COMMA enumerator .

    RBRACE          reduce using rule 151 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 151 (enumerator_list -> enumerator_list COMMA enumerator .)


state 365

    (189) enumerator -> IDENTIFIER ASSIGNMENT constant_expression .

    RBRACE          reduce using rule 189 (enumerator -> IDENTIFIER ASSIGNMENT constant_expression .)
    COMMA           reduce using rule 189 (enumerator -> IDENTIFIER ASSIGNMENT constant_expression .)


state 366

    (269) exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .
    (271) and_expression -> and_expression . BITAND equality_expression

    BITXOR          reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    BITOR           reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    AND             reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    QUESTION        reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    OR              reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    COLON           reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    COMMA           reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    RBRACK          reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    RP              reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    SEMI            reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    RBRACE          reduce using rule 269 (exclusive_or_expression -> exclusive_or_expression BITXOR and_expression .)
    BITAND          shift and go to state 245


state 367

    (202) unary_expression -> SIZEOF LP type_name . RP

    RP              shift and go to state 453


state 368

    (271) and_expression -> and_expression BITAND equality_expression .
    (273) equality_expression -> equality_expression . EQUAL relational_expression
    (274) equality_expression -> equality_expression . NOTEQUAL relational_expression

    BITAND          reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    BITXOR          reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    BITOR           reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    AND             reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    QUESTION        reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    OR              reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    SEMI            reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    COMMA           reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    RP              reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    RBRACK          reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    COLON           reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    RBRACE          reduce using rule 271 (and_expression -> and_expression BITAND equality_expression .)
    EQUAL           shift and go to state 269
    NOTEQUAL        shift and go to state 268


state 369

    (256) inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .
    (269) exclusive_or_expression -> exclusive_or_expression . BITXOR and_expression

    BITOR           reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    AND             reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    QUESTION        reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    OR              reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    RP              reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    COMMA           reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    SEMI            reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    RBRACK          reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    RBRACE          reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    COLON           reduce using rule 256 (inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression .)
    BITXOR          shift and go to state 240


state 370

    (284) additive_expression -> additive_expression ADD multiplicative_expression .
    (287) multiplicative_expression -> multiplicative_expression . MUL cast_expression
    (288) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (289) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    ADD             reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SUB             reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LSHIFT          reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RSHIFT          reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LT              reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GT              reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LE              reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GE              reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    EQUAL           reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    NOTEQUAL        reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITAND          reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITXOR          reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITOR           reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    AND             reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    QUESTION        reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    OR              reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SEMI            reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COMMA           reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RBRACK          reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RP              reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COLON           reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RBRACE          reduce using rule 284 (additive_expression -> additive_expression ADD multiplicative_expression .)
    MUL             shift and go to state 270
    DIV             shift and go to state 272
    MOD             shift and go to state 271


state 371

    (285) additive_expression -> additive_expression SUB multiplicative_expression .
    (287) multiplicative_expression -> multiplicative_expression . MUL cast_expression
    (288) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (289) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    ADD             reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    SUB             reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    LSHIFT          reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    RSHIFT          reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    LT              reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    GT              reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    LE              reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    GE              reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    EQUAL           reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    NOTEQUAL        reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    BITAND          reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    BITXOR          reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    BITOR           reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    AND             reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    QUESTION        reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    OR              reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    SEMI            reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    COMMA           reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    RBRACK          reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    RP              reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    COLON           reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    RBRACE          reduce using rule 285 (additive_expression -> additive_expression SUB multiplicative_expression .)
    MUL             shift and go to state 270
    DIV             shift and go to state 272
    MOD             shift and go to state 271


state 372

    (230) postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .

    LBRACK          reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    LP              reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    DOT             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    STRUCTACCESS    reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    INC             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    DEC             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    ASSIGNMENT      reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    AND_ASSIGN      reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    OR_ASSIGN       reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    MUL             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    DIV             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    MOD             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    ADD             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    SUB             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    LSHIFT          reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    RSHIFT          reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    LT              reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    GT              reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    LE              reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    GE              reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    EQUAL           reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    NOTEQUAL        reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    BITAND          reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    BITXOR          reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    BITOR           reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    AND             reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    QUESTION        reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    OR              reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    SEMI            reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    COMMA           reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    RP              reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    RBRACK          reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    COLON           reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)
    RBRACE          reduce using rule 230 (postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER .)


state 373

    (226) postfix_expression -> postfix_expression LBRACK expression . RBRACK
    (193) expression -> expression . COMMA assignment_expression

    RBRACK          shift and go to state 454
    COMMA           shift and go to state 311


state 374

    (227) postfix_expression -> postfix_expression LP RP .

    LBRACK          reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    LP              reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    DOT             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    STRUCTACCESS    reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    INC             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    DEC             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    ASSIGNMENT      reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    MUL_ASSIGN      reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    DIV_ASSIGN      reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    MOD_ASSIGN      reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    ADD_ASSIGN      reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    SUB_ASSIGN      reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    LSHIFT_ASSIGN   reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    RSHIFT_ASSIGN   reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    AND_ASSIGN      reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    XOR_ASSIGN      reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    OR_ASSIGN       reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    MUL             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    DIV             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    MOD             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    ADD             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    SUB             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    LSHIFT          reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    RSHIFT          reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    LT              reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    GT              reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    LE              reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    GE              reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    EQUAL           reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    NOTEQUAL        reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    BITAND          reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    BITXOR          reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    BITOR           reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    AND             reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    QUESTION        reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    OR              reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    SEMI            reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    COMMA           reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    RP              reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    RBRACK          reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    COLON           reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)
    RBRACE          reduce using rule 227 (postfix_expression -> postfix_expression LP RP .)


state 375

    (266) argument_expression_list -> assignment_expression .

    RP              reduce using rule 266 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 266 (argument_expression_list -> assignment_expression .)


state 376

    (228) postfix_expression -> postfix_expression LP argument_expression_list . RP
    (267) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RP              shift and go to state 455
    COMMA           shift and go to state 456


state 377

    (229) postfix_expression -> postfix_expression DOT IDENTIFIER .

    LBRACK          reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LP              reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STRUCTACCESS    reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INC             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DEC             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ASSIGNMENT      reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUB             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LSHIFT          reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RSHIFT          reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LT              reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GT              reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LE              reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GE              reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUAL           reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOTEQUAL        reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITAND          reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITXOR          reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITOR           reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND             reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUESTION        reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR              reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMI            reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RP              reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RBRACK          reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 229 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 378

    (278) relational_expression -> relational_expression LE shift_expression .
    (281) shift_expression -> shift_expression . LSHIFT additive_expression
    (282) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    EQUAL           reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    NOTEQUAL        reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    BITAND          reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    BITXOR          reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    BITOR           reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    QUESTION        reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    RBRACK          reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    SEMI            reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    RP              reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    COLON           reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 278 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 267
    RSHIFT          shift and go to state 266


state 379

    (279) relational_expression -> relational_expression GE shift_expression .
    (281) shift_expression -> shift_expression . LSHIFT additive_expression
    (282) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    EQUAL           reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    NOTEQUAL        reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    BITAND          reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    BITXOR          reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    BITOR           reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    QUESTION        reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    RBRACK          reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    SEMI            reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    RP              reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    COLON           reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 279 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 267
    RSHIFT          shift and go to state 266


state 380

    (276) relational_expression -> relational_expression LT shift_expression .
    (281) shift_expression -> shift_expression . LSHIFT additive_expression
    (282) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    EQUAL           reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    NOTEQUAL        reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    BITAND          reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    BITXOR          reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    BITOR           reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    QUESTION        reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    RBRACK          reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    SEMI            reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    RP              reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 276 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 267
    RSHIFT          shift and go to state 266


state 381

    (277) relational_expression -> relational_expression GT shift_expression .
    (281) shift_expression -> shift_expression . LSHIFT additive_expression
    (282) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    EQUAL           reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    NOTEQUAL        reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    BITAND          reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    BITXOR          reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    BITOR           reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    QUESTION        reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    RBRACK          reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    SEMI            reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    RP              reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 277 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 267
    RSHIFT          shift and go to state 266


state 382

    (240) cast_expression -> LP type_name RP . cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    postfix_expression             shift and go to state 118
    primary_expression             shift and go to state 129
    cast_expression                shift and go to state 457
    unary_operator                 shift and go to state 138

state 383

    (187) type_name -> specifier_qualifier_list abstract_declarator .

    RP              reduce using rule 187 (type_name -> specifier_qualifier_list abstract_declarator .)


state 384

    (246) direct_abstract_declarator -> LP . abstract_declarator RP
    (251) direct_abstract_declarator -> LP . RP
    (252) direct_abstract_declarator -> LP . parameter_type_list RP
    (220) abstract_declarator -> . pointer
    (221) abstract_declarator -> . direct_abstract_declarator
    (222) abstract_declarator -> . pointer direct_abstract_declarator
    (117) parameter_type_list -> . parameter_list
    (118) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (246) direct_abstract_declarator -> . LP abstract_declarator RP
    (247) direct_abstract_declarator -> . LBRACK RBRACK
    (248) direct_abstract_declarator -> . LBRACK constant_expression RBRACK
    (249) direct_abstract_declarator -> . direct_abstract_declarator LBRACK RBRACK
    (250) direct_abstract_declarator -> . direct_abstract_declarator LBRACK constant_expression RBRACK
    (251) direct_abstract_declarator -> . LP RP
    (252) direct_abstract_declarator -> . LP parameter_type_list RP
    (253) direct_abstract_declarator -> . direct_abstract_declarator LP RP
    (254) direct_abstract_declarator -> . direct_abstract_declarator LP parameter_type_list RP
    (154) parameter_list -> . parameter_declaration
    (155) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RP              shift and go to state 397
    MUL             shift and go to state 12
    LP              shift and go to state 384
    LBRACK          shift and go to state 277
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    parameter_list                 shift and go to state 148
    parameter_type_list            shift and go to state 398
    parameter_declaration          shift and go to state 145
    abstract_declarator            shift and go to state 399
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 146
    direct_abstract_declarator     shift and go to state 280
    pointer                        shift and go to state 385

state 385

    (220) abstract_declarator -> pointer .
    (222) abstract_declarator -> pointer . direct_abstract_declarator
    (246) direct_abstract_declarator -> . LP abstract_declarator RP
    (247) direct_abstract_declarator -> . LBRACK RBRACK
    (248) direct_abstract_declarator -> . LBRACK constant_expression RBRACK
    (249) direct_abstract_declarator -> . direct_abstract_declarator LBRACK RBRACK
    (250) direct_abstract_declarator -> . direct_abstract_declarator LBRACK constant_expression RBRACK
    (251) direct_abstract_declarator -> . LP RP
    (252) direct_abstract_declarator -> . LP parameter_type_list RP
    (253) direct_abstract_declarator -> . direct_abstract_declarator LP RP
    (254) direct_abstract_declarator -> . direct_abstract_declarator LP parameter_type_list RP

    RP              reduce using rule 220 (abstract_declarator -> pointer .)
    LP              shift and go to state 384
    LBRACK          shift and go to state 277

    direct_abstract_declarator     shift and go to state 404

state 386

    (265) primary_expression -> LP expression RP .

    LBRACK          reduce using rule 265 (primary_expression -> LP expression RP .)
    LP              reduce using rule 265 (primary_expression -> LP expression RP .)
    DOT             reduce using rule 265 (primary_expression -> LP expression RP .)
    STRUCTACCESS    reduce using rule 265 (primary_expression -> LP expression RP .)
    INC             reduce using rule 265 (primary_expression -> LP expression RP .)
    DEC             reduce using rule 265 (primary_expression -> LP expression RP .)
    ASSIGNMENT      reduce using rule 265 (primary_expression -> LP expression RP .)
    MUL_ASSIGN      reduce using rule 265 (primary_expression -> LP expression RP .)
    DIV_ASSIGN      reduce using rule 265 (primary_expression -> LP expression RP .)
    MOD_ASSIGN      reduce using rule 265 (primary_expression -> LP expression RP .)
    ADD_ASSIGN      reduce using rule 265 (primary_expression -> LP expression RP .)
    SUB_ASSIGN      reduce using rule 265 (primary_expression -> LP expression RP .)
    LSHIFT_ASSIGN   reduce using rule 265 (primary_expression -> LP expression RP .)
    RSHIFT_ASSIGN   reduce using rule 265 (primary_expression -> LP expression RP .)
    AND_ASSIGN      reduce using rule 265 (primary_expression -> LP expression RP .)
    XOR_ASSIGN      reduce using rule 265 (primary_expression -> LP expression RP .)
    OR_ASSIGN       reduce using rule 265 (primary_expression -> LP expression RP .)
    MUL             reduce using rule 265 (primary_expression -> LP expression RP .)
    DIV             reduce using rule 265 (primary_expression -> LP expression RP .)
    MOD             reduce using rule 265 (primary_expression -> LP expression RP .)
    ADD             reduce using rule 265 (primary_expression -> LP expression RP .)
    SUB             reduce using rule 265 (primary_expression -> LP expression RP .)
    LSHIFT          reduce using rule 265 (primary_expression -> LP expression RP .)
    RSHIFT          reduce using rule 265 (primary_expression -> LP expression RP .)
    LT              reduce using rule 265 (primary_expression -> LP expression RP .)
    GT              reduce using rule 265 (primary_expression -> LP expression RP .)
    LE              reduce using rule 265 (primary_expression -> LP expression RP .)
    GE              reduce using rule 265 (primary_expression -> LP expression RP .)
    EQUAL           reduce using rule 265 (primary_expression -> LP expression RP .)
    NOTEQUAL        reduce using rule 265 (primary_expression -> LP expression RP .)
    BITAND          reduce using rule 265 (primary_expression -> LP expression RP .)
    BITXOR          reduce using rule 265 (primary_expression -> LP expression RP .)
    BITOR           reduce using rule 265 (primary_expression -> LP expression RP .)
    AND             reduce using rule 265 (primary_expression -> LP expression RP .)
    QUESTION        reduce using rule 265 (primary_expression -> LP expression RP .)
    OR              reduce using rule 265 (primary_expression -> LP expression RP .)
    SEMI            reduce using rule 265 (primary_expression -> LP expression RP .)
    COMMA           reduce using rule 265 (primary_expression -> LP expression RP .)
    RP              reduce using rule 265 (primary_expression -> LP expression RP .)
    RBRACK          reduce using rule 265 (primary_expression -> LP expression RP .)
    COLON           reduce using rule 265 (primary_expression -> LP expression RP .)
    RBRACE          reduce using rule 265 (primary_expression -> LP expression RP .)


state 387

    (153) conditional_expression -> logical_or_expression QUESTION expression . COLON conditional_expression
    (193) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 458
    COMMA           shift and go to state 311


state 388

    (191) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (224) logical_and_expression -> logical_and_expression . AND inclusive_or_expression

    QUESTION        reduce using rule 191 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 191 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACK          reduce using rule 191 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    SEMI            reduce using rule 191 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 191 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RP              reduce using rule 191 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACE          reduce using rule 191 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COLON           reduce using rule 191 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 265


state 389

    (224) logical_and_expression -> logical_and_expression AND inclusive_or_expression .
    (256) inclusive_or_expression -> inclusive_or_expression . BITOR exclusive_or_expression

    AND             reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    QUESTION        reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    RP              reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    COMMA           reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    RBRACK          reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    SEMI            reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    COLON           reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    RBRACE          reduce using rule 224 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    BITOR           shift and go to state 246


state 390

    (282) shift_expression -> shift_expression RSHIFT additive_expression .
    (284) additive_expression -> additive_expression . ADD multiplicative_expression
    (285) additive_expression -> additive_expression . SUB multiplicative_expression

    LSHIFT          reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQUAL           reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NOTEQUAL        reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BITAND          reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BITXOR          reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BITOR           reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESTION        reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RP              reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACK          reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMI            reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 282 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ADD             shift and go to state 247
    SUB             shift and go to state 248


state 391

    (281) shift_expression -> shift_expression LSHIFT additive_expression .
    (284) additive_expression -> additive_expression . ADD multiplicative_expression
    (285) additive_expression -> additive_expression . SUB multiplicative_expression

    LSHIFT          reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQUAL           reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NOTEQUAL        reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BITAND          reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BITXOR          reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BITOR           reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESTION        reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RP              reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACK          reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMI            reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 281 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ADD             shift and go to state 247
    SUB             shift and go to state 248


state 392

    (274) equality_expression -> equality_expression NOTEQUAL relational_expression .
    (276) relational_expression -> relational_expression . LT shift_expression
    (277) relational_expression -> relational_expression . GT shift_expression
    (278) relational_expression -> relational_expression . LE shift_expression
    (279) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    NOTEQUAL        reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    BITAND          reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    BITXOR          reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    BITOR           reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    AND             reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    QUESTION        reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    OR              reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    SEMI            reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    COMMA           reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RP              reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RBRACK          reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    COLON           reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    RBRACE          reduce using rule 274 (equality_expression -> equality_expression NOTEQUAL relational_expression .)
    LT              shift and go to state 257
    GT              shift and go to state 258
    LE              shift and go to state 255
    GE              shift and go to state 256


state 393

    (273) equality_expression -> equality_expression EQUAL relational_expression .
    (276) relational_expression -> relational_expression . LT shift_expression
    (277) relational_expression -> relational_expression . GT shift_expression
    (278) relational_expression -> relational_expression . LE shift_expression
    (279) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOTEQUAL        reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    BITAND          reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    BITXOR          reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    BITOR           reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    QUESTION        reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEMI            reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    RP              reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACK          reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    COLON           reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACE          reduce using rule 273 (equality_expression -> equality_expression EQUAL relational_expression .)
    LT              shift and go to state 257
    GT              shift and go to state 258
    LE              shift and go to state 255
    GE              shift and go to state 256


state 394

    (287) multiplicative_expression -> multiplicative_expression MUL cast_expression .

    MUL             reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    DIV             reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    MOD             reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    ADD             reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    SUB             reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    LSHIFT          reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    RSHIFT          reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    LT              reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    GT              reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    LE              reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    GE              reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    EQUAL           reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    NOTEQUAL        reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    BITAND          reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    BITXOR          reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    BITOR           reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    AND             reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    QUESTION        reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    OR              reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    RP              reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    COMMA           reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    SEMI            reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    RBRACK          reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    COLON           reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)
    RBRACE          reduce using rule 287 (multiplicative_expression -> multiplicative_expression MUL cast_expression .)


state 395

    (289) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    MUL             reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIV             reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    ADD             reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SUB             reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE              reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE              reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQUAL           reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NOTEQUAL        reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    BITAND          reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    BITXOR          reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    BITOR           reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    QUESTION        reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RP              reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACK          reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 289 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 396

    (288) multiplicative_expression -> multiplicative_expression DIV cast_expression .

    MUL             reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    DIV             reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    MOD             reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    ADD             reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    SUB             reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LSHIFT          reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RSHIFT          reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LT              reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    GT              reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LE              reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    GE              reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    EQUAL           reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    NOTEQUAL        reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    BITAND          reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    BITXOR          reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    BITOR           reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    AND             reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    QUESTION        reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    OR              reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RP              reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    COMMA           reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    SEMI            reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RBRACK          reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    COLON           reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RBRACE          reduce using rule 288 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)


state 397

    (251) direct_abstract_declarator -> LP RP .

    LBRACK          reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    LP              reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    RP              reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    COMMA           reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    SEMI            reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    LBRACE          reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    TYPEDEF         reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    EXTERN          reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    STATIC          reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    AUTO            reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    REGISTER        reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    VOID            reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    CHAR            reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    SHORT           reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    INT             reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    LONG            reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    FLOAT           reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    DOUBLE          reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    SIGNED          reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    UNSIGNED        reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    TYPE_NAME       reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    ENUM            reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    STRUCT          reduce using rule 251 (direct_abstract_declarator -> LP RP .)
    UNION           reduce using rule 251 (direct_abstract_declarator -> LP RP .)


state 398

    (252) direct_abstract_declarator -> LP parameter_type_list . RP

    RP              shift and go to state 459


state 399

    (246) direct_abstract_declarator -> LP abstract_declarator . RP

    RP              shift and go to state 460


state 400

    (248) direct_abstract_declarator -> LBRACK constant_expression . RBRACK

    RBRACK          shift and go to state 461


state 401

    (247) direct_abstract_declarator -> LBRACK RBRACK .

    LBRACK          reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    LP              reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    RP              reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    COMMA           reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    SEMI            reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    LBRACE          reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    TYPEDEF         reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    EXTERN          reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    STATIC          reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    AUTO            reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    REGISTER        reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    VOID            reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    CHAR            reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    SHORT           reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    INT             reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    LONG            reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    FLOAT           reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    DOUBLE          reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    SIGNED          reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    UNSIGNED        reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    TYPE_NAME       reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    ENUM            reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    STRUCT          reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)
    UNION           reduce using rule 247 (direct_abstract_declarator -> LBRACK RBRACK .)


state 402

    (249) direct_abstract_declarator -> direct_abstract_declarator LBRACK . RBRACK
    (250) direct_abstract_declarator -> direct_abstract_declarator LBRACK . constant_expression RBRACK
    (116) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    RBRACK          shift and go to state 463
    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    and_expression                 shift and go to state 113
    unary_operator                 shift and go to state 138
    conditional_expression         shift and go to state 139
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    constant_expression            shift and go to state 462
    relational_expression          shift and go to state 120

state 403

    (253) direct_abstract_declarator -> direct_abstract_declarator LP . RP
    (254) direct_abstract_declarator -> direct_abstract_declarator LP . parameter_type_list RP
    (117) parameter_type_list -> . parameter_list
    (118) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (154) parameter_list -> . parameter_declaration
    (155) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    RP              shift and go to state 464
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    parameter_list                 shift and go to state 148
    parameter_type_list            shift and go to state 465
    parameter_declaration          shift and go to state 145
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_specifiers         shift and go to state 146

state 404

    (222) abstract_declarator -> pointer direct_abstract_declarator .
    (249) direct_abstract_declarator -> direct_abstract_declarator . LBRACK RBRACK
    (250) direct_abstract_declarator -> direct_abstract_declarator . LBRACK constant_expression RBRACK
    (253) direct_abstract_declarator -> direct_abstract_declarator . LP RP
    (254) direct_abstract_declarator -> direct_abstract_declarator . LP parameter_type_list RP

    RP              reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    SEMI            reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACE          reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    TYPEDEF         reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    EXTERN          reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    STATIC          reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    AUTO            reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    REGISTER        reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    VOID            reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    CHAR            reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    SHORT           reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    INT             reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    LONG            reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    FLOAT           reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    DOUBLE          reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    SIGNED          reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    UNSIGNED        reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    TYPE_NAME       reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    ENUM            reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    STRUCT          reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    UNION           reduce using rule 222 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACK          shift and go to state 402
    LP              shift and go to state 403


state 405

    (120) identifier_list -> identifier_list COMMA IDENTIFIER .

    RP              reduce using rule 120 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 120 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 406

    (118) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RP              reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    SEMI            reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    LBRACE          reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    TYPEDEF         reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    EXTERN          reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    STATIC          reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    AUTO            reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    REGISTER        reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    VOID            reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    CHAR            reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    SHORT           reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    INT             reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    LONG            reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    FLOAT           reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    DOUBLE          reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    SIGNED          reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    UNSIGNED        reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    TYPE_NAME       reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    ENUM            reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    STRUCT          reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)
    UNION           reduce using rule 118 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 407

    (155) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RP              reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    SEMI            reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    LBRACE          reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    TYPEDEF         reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    EXTERN          reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    STATIC          reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    AUTO            reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    REGISTER        reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    VOID            reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    CHAR            reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    SHORT           reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    INT             reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    LONG            reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    FLOAT           reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    DOUBLE          reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    SIGNED          reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    UNSIGNED        reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    TYPE_NAME       reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    ENUM            reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    STRUCT          reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)
    UNION           reduce using rule 155 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 408

    (175) initializer_list -> initializer .

    RBRACE          reduce using rule 175 (initializer_list -> initializer .)
    COMMA           reduce using rule 175 (initializer_list -> initializer .)


state 409

    (135) initializer -> LBRACE initializer_list . RBRACE
    (136) initializer -> LBRACE initializer_list . COMMA RBRACE
    (176) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 467
    COMMA           shift and go to state 466


state 410

    (168) jump_statement -> GOTO IDENTIFIER SEMI .

    WHILE           reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RBRACE          reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CASE            reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LBRACE          reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SEMI            reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IF              reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SWITCH          reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DO              reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FOR             reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    GOTO            reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BREAK           reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RETURN          reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INC             reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEC             reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SIZEOF          reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BITAND          reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    MUL             reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ADD             reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SUB             reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TILDE           reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BANG            reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    HEX_LITERAL     reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    OCTAL_LITERAL   reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BINARY_LITERAL  reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DECIMAL_LITERAL reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    C_STRING_LITERAL reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    OBJC_STRING_LITERAL reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LP              reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ELSE            reduce using rule 168 (jump_statement -> GOTO IDENTIFIER SEMI .)


state 411

    (41) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    END             reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TYPEDEF         reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ADD             reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SUB             reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    EXTERN          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STATIC          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AUTO            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    REGISTER        reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOID            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SHORT           reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LONG            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOAT           reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DOUBLE          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIGNED          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UNSIGNED        reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TYPE_NAME       reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MUL             reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IDENTIFIER      reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LP              reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ENUM            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRUCT          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UNION           reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CASE            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DEFAULT         reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SEMI            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SWITCH          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DO              reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    GOTO            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CONTINUE        reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INC             reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DEC             reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIZEOF          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BITAND          reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TILDE           reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BANG            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    HEX_LITERAL     reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    OCTAL_LITERAL   reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BINARY_LITERAL  reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DECIMAL_LITERAL reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOATING_POINT_LITERAL reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    C_STRING_LITERAL reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    OBJC_STRING_LITERAL reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INTERFACE       reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IMPLEMENTATION  reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PROTOCOL        reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CLASS           reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 41 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 412

    (172) jump_statement -> RETURN expression SEMI .

    WHILE           reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    IDENTIFIER      reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    INC             reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    DEC             reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    BITAND          reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    MUL             reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    ADD             reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    SUB             reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    TILDE           reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    BANG            reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    HEX_LITERAL     reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    OCTAL_LITERAL   reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    BINARY_LITERAL  reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    DECIMAL_LITERAL reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    C_STRING_LITERAL reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    OBJC_STRING_LITERAL reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    LP              reduce using rule 172 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 172 (jump_statement -> RETURN expression SEMI .)


state 413

    (174) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RP              reduce using rule 174 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 174 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 174 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 174 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACK          reduce using rule 174 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 174 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 414

    (166) iteration_statement -> FOR LP expression_statement . expression_statement RP statement
    (167) iteration_statement -> FOR LP expression_statement . expression_statement expression RP
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    SEMI            shift and go to state 177
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 468
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 415

    (193) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 193 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 193 (expression -> expression COMMA assignment_expression .)
    RP              reduce using rule 193 (expression -> expression COMMA assignment_expression .)
    RBRACK          reduce using rule 193 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 193 (expression -> expression COMMA assignment_expression .)


state 416

    (158) labeled_statement -> DEFAULT COLON statement .

    RBRACE          reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    INC             reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    DEC             reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    BITAND          reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    MUL             reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    ADD             reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    SUB             reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    TILDE           reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    BANG            reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    HEX_LITERAL     reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    OCTAL_LITERAL   reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    BINARY_LITERAL  reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    DECIMAL_LITERAL reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    FLOATING_POINT_LITERAL reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    C_STRING_LITERAL reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    OBJC_STRING_LITERAL reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    LP              reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 158 (labeled_statement -> DEFAULT COLON statement .)


state 417

    (164) iteration_statement -> WHILE LP expression . RP statement
    (193) expression -> expression . COMMA assignment_expression

    RP              shift and go to state 469
    COMMA           shift and go to state 311


state 418

    (157) labeled_statement -> CASE constant_expression COLON . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 470
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 419

    (163) selection_statement -> SWITCH LP expression . RP statement
    (193) expression -> expression . COMMA assignment_expression

    RP              shift and go to state 471
    COMMA           shift and go to state 311


state 420

    (156) labeled_statement -> IDENTIFIER COLON statement .

    RBRACE          reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    LBRACE          reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMI            reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    INC             reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC             reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    BITAND          reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    MUL             reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    ADD             reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    SUB             reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    TILDE           reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    BANG            reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    HEX_LITERAL     reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    OCTAL_LITERAL   reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    BINARY_LITERAL  reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    DECIMAL_LITERAL reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOATING_POINT_LITERAL reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    C_STRING_LITERAL reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    OBJC_STRING_LITERAL reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    LP              reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 156 (labeled_statement -> IDENTIFIER COLON statement .)


state 421

    (165) iteration_statement -> DO statement WHILE . LP expression RP SEMI

    LP              shift and go to state 472


state 422

    (161) selection_statement -> IF LP expression . RP statement
    (162) selection_statement -> IF LP expression . RP statement ELSE statement
    (193) expression -> expression . COMMA assignment_expression

    RP              shift and go to state 473
    COMMA           shift and go to state 311


state 423

    (18) class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .

    INTERFACE       reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    IMPLEMENTATION  reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    PROTOCOL        reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    CLASS           reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    TYPEDEF         reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    EXTERN          reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    STATIC          reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    AUTO            reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    REGISTER        reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    VOID            reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    CHAR            reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    SHORT           reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    INT             reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    LONG            reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    FLOAT           reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    DOUBLE          reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    SIGNED          reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    UNSIGNED        reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    TYPE_NAME       reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    MUL             reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    IDENTIFIER      reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    LP              reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    ENUM            reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    STRUCT          reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    UNION           reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)
    $end            reduce using rule 18 (class_interface -> INTERFACE class_name instance_variables interface_declaration_list END .)


state 424

    (19) class_interface -> INTERFACE class_name COLON superclass_name instance_variables . interface_declaration_list END
    (51) interface_declaration_list -> . declaration
    (52) interface_declaration_list -> . method_declaration
    (53) interface_declaration_list -> . interface_declaration_list declaration
    (54) interface_declaration_list -> . interface_declaration_list method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    interface_declaration_list     shift and go to state 474
    method_declaration             shift and go to state 79
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    enum_specifier                 shift and go to state 35
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 84

state 425

    (21) class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list . instance_variables interface_declaration_list END
    (47) instance_variables -> . LBRACE struct_declaration_list RBRACE
    (48) instance_variables -> . LBRACE visibility_specification struct_declaration_list RBRACE
    (49) instance_variables -> . LBRACE struct_declaration_list instance_variables RBRACE
    (50) instance_variables -> . LBRACE visibility_specification struct_declaration_list instance_variables RBRACE

    LBRACE          shift and go to state 94

    instance_variables             shift and go to state 475

state 426

    (24) category_interface -> INTERFACE class_name ( category_name ) . interface_declaration_list END
    (25) category_interface -> INTERFACE class_name ( category_name ) . protocol_reference_list interface_declaration_list END
    (51) interface_declaration_list -> . declaration
    (52) interface_declaration_list -> . method_declaration
    (53) interface_declaration_list -> . interface_declaration_list declaration
    (54) interface_declaration_list -> . interface_declaration_list method_declaration
    (55) protocol_reference_list -> . LT protocol_list GT
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LT              shift and go to state 77
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    class_method_declaration       shift and go to state 78
    type_specifier                 shift and go to state 11
    method_declaration             shift and go to state 79
    protocol_reference_list        shift and go to state 476
    struct_or_union                shift and go to state 6
    instance_method_declaration    shift and go to state 81
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 84
    enum_specifier                 shift and go to state 35
    interface_declaration_list     shift and go to state 477

state 427

    (20) class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .

    INTERFACE       reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    IMPLEMENTATION  reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    PROTOCOL        reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    CLASS           reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    TYPEDEF         reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    EXTERN          reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    STATIC          reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    AUTO            reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    REGISTER        reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    VOID            reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    CHAR            reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    SHORT           reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    INT             reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    LONG            reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    FLOAT           reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    DOUBLE          reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    SIGNED          reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    UNSIGNED        reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    TYPE_NAME       reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    MUL             reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    IDENTIFIER      reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    LP              reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    ENUM            reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    STRUCT          reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    UNION           reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)
    $end            reduce using rule 20 (class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END .)


state 428

    (105) protocol_list -> protocol_list COMMA protocol_name .

    GT              reduce using rule 105 (protocol_list -> protocol_list COMMA protocol_name .)
    COMMA           reduce using rule 105 (protocol_list -> protocol_list COMMA protocol_name .)


state 429

    (243) keyword_declarator -> COLON method_type IDENTIFIER .

    COMMA           reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    COLON           reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    IDENTIFIER      reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    SEMI            reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    LBRACE          reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    TYPEDEF         reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    EXTERN          reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    STATIC          reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    AUTO            reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    REGISTER        reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    VOID            reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    CHAR            reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    SHORT           reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    INT             reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    LONG            reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    FLOAT           reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    DOUBLE          reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    SIGNED          reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    UNSIGNED        reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    TYPE_NAME       reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    ENUM            reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    STRUCT          reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)
    UNION           reduce using rule 243 (keyword_declarator -> COLON method_type IDENTIFIER .)


state 430

    (139) class_method_declaration -> ADD method_type method_selector SEMI .

    END             reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    TYPEDEF         reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    ADD             reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    SUB             reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    EXTERN          reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    STATIC          reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    AUTO            reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    REGISTER        reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    VOID            reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    CHAR            reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    SHORT           reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    INT             reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    LONG            reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    FLOAT           reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    DOUBLE          reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    SIGNED          reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    UNSIGNED        reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    TYPE_NAME       reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    ENUM            reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    STRUCT          reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)
    UNION           reduce using rule 139 (class_method_declaration -> ADD method_type method_selector SEMI .)


state 431

    (183) method_selector -> keyword_selector COMMA ELLIPSIS .

    SEMI            reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    LBRACE          reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    TYPEDEF         reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    EXTERN          reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    STATIC          reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    AUTO            reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    REGISTER        reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    VOID            reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    CHAR            reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    SHORT           reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    INT             reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    LONG            reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    FLOAT           reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    DOUBLE          reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    SIGNED          reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    UNSIGNED        reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    TYPE_NAME       reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    ENUM            reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    STRUCT          reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)
    UNION           reduce using rule 183 (method_selector -> keyword_selector COMMA ELLIPSIS .)


state 432

    (184) method_selector -> keyword_selector COMMA parameter_type_list .

    SEMI            reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    LBRACE          reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    TYPEDEF         reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    EXTERN          reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    STATIC          reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    AUTO            reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    REGISTER        reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    VOID            reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    CHAR            reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    SHORT           reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    INT             reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    LONG            reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    FLOAT           reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    DOUBLE          reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    SIGNED          reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    UNSIGNED        reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    TYPE_NAME       reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    ENUM            reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    STRUCT          reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)
    UNION           reduce using rule 184 (method_selector -> keyword_selector COMMA parameter_type_list .)


state 433

    (245) keyword_declarator -> selector COLON method_type . IDENTIFIER

    IDENTIFIER      shift and go to state 478


state 434

    (244) keyword_declarator -> selector COLON IDENTIFIER .

    COMMA           reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    COLON           reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    IDENTIFIER      reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    SEMI            reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    LBRACE          reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    TYPEDEF         reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    EXTERN          reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    STATIC          reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    AUTO            reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    REGISTER        reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    VOID            reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    CHAR            reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    SHORT           reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    INT             reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    LONG            reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    FLOAT           reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    DOUBLE          reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    SIGNED          reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    UNSIGNED        reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    TYPE_NAME       reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    ENUM            reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    STRUCT          reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)
    UNION           reduce using rule 244 (keyword_declarator -> selector COLON IDENTIFIER .)


state 435

    (185) method_type -> LP type_name RP .

    IDENTIFIER      reduce using rule 185 (method_type -> LP type_name RP .)
    COLON           reduce using rule 185 (method_type -> LP type_name RP .)


state 436

    (141) instance_method_declaration -> SUB method_type method_selector SEMI .

    END             reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    TYPEDEF         reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    ADD             reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    SUB             reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    EXTERN          reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    STATIC          reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    AUTO            reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    REGISTER        reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    VOID            reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    CHAR            reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    SHORT           reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    INT             reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    LONG            reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    FLOAT           reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    DOUBLE          reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    SIGNED          reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    UNSIGNED        reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    TYPE_NAME       reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    ENUM            reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    STRUCT          reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)
    UNION           reduce using rule 141 (instance_method_declaration -> SUB method_type method_selector SEMI .)


state 437

    (216) struct_declarator -> declarator COLON constant_expression .

    SEMI            reduce using rule 216 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 216 (struct_declarator -> declarator COLON constant_expression .)


state 438

    (180) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI            reduce using rule 180 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 180 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 439

    (143) class_method_definition -> ADD method_type method_selector . compound_statement
    (145) class_method_definition -> ADD method_type method_selector . declaration_list compound_statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (36) declaration_list -> . declaration
    (37) declaration_list -> . declaration_list declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 479
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_list               shift and go to state 480
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 72

state 440

    (142) class_method_definition -> ADD method_selector compound_statement .

    END             reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    TYPEDEF         reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    ADD             reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    SUB             reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    EXTERN          reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    STATIC          reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    AUTO            reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    REGISTER        reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    VOID            reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    CHAR            reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    SHORT           reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    INT             reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    LONG            reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    FLOAT           reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    DOUBLE          reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    SIGNED          reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    UNSIGNED        reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    TYPE_NAME       reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    MUL             reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    IDENTIFIER      reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    LP              reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    ENUM            reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    STRUCT          reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)
    UNION           reduce using rule 142 (class_method_definition -> ADD method_selector compound_statement .)


state 441

    (144) class_method_definition -> ADD method_selector declaration_list . compound_statement
    (37) declaration_list -> declaration_list . declaration
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 481
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 184

state 442

    (147) instance_method_definition -> SUB method_type method_selector . compound_statement
    (149) instance_method_definition -> SUB method_type method_selector . declaration_list compound_statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (36) declaration_list -> . declaration
    (37) declaration_list -> . declaration_list declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 482
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    declaration_list               shift and go to state 483
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 72

state 443

    (146) instance_method_definition -> SUB method_selector compound_statement .

    END             reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    TYPEDEF         reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    ADD             reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    SUB             reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    EXTERN          reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    STATIC          reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    AUTO            reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    REGISTER        reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    VOID            reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    CHAR            reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    SHORT           reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    INT             reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    LONG            reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    FLOAT           reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    DOUBLE          reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    SIGNED          reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    UNSIGNED        reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    TYPE_NAME       reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    MUL             reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    IDENTIFIER      reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    LP              reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    ENUM            reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    STRUCT          reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)
    UNION           reduce using rule 146 (instance_method_definition -> SUB method_selector compound_statement .)


state 444

    (148) instance_method_definition -> SUB method_selector declaration_list . compound_statement
    (37) declaration_list -> declaration_list . declaration
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 484
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 184

state 445

    (26) category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list . END
    (59) implementation_definition_list -> implementation_definition_list . function_definition
    (60) implementation_definition_list -> implementation_definition_list . declaration
    (61) implementation_definition_list -> implementation_definition_list . method_definition
    (11) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (12) function_definition -> . declaration_specifiers declarator compound_statement
    (13) function_definition -> . declarator declaration_list compound_statement
    (14) function_definition -> . declarator compound_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (106) method_definition -> . class_method_definition
    (107) method_definition -> . instance_method_definition
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (142) class_method_definition -> . ADD method_selector compound_statement
    (143) class_method_definition -> . ADD method_type method_selector compound_statement
    (144) class_method_definition -> . ADD method_selector declaration_list compound_statement
    (145) class_method_definition -> . ADD method_type method_selector declaration_list compound_statement
    (146) instance_method_definition -> . SUB method_selector compound_statement
    (147) instance_method_definition -> . SUB method_type method_selector compound_statement
    (148) instance_method_definition -> . SUB method_selector declaration_list compound_statement
    (149) instance_method_definition -> . SUB method_type method_selector declaration_list compound_statement
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 485
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 215
    SUB             shift and go to state 217
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    declaration                    shift and go to state 346
    type_declaration               shift and go to state 8
    pointer                        shift and go to state 16
    type_specifier                 shift and go to state 11
    struct_or_union                shift and go to state 6
    direct_declarator              shift and go to state 34
    declaration_specifiers         shift and go to state 37
    instance_method_definition     shift and go to state 218
    method_definition              shift and go to state 348
    class_method_definition        shift and go to state 220
    function_definition            shift and go to state 349
    enum_specifier                 shift and go to state 35
    declarator                     shift and go to state 43

state 446

    (23) class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list . END
    (59) implementation_definition_list -> implementation_definition_list . function_definition
    (60) implementation_definition_list -> implementation_definition_list . declaration
    (61) implementation_definition_list -> implementation_definition_list . method_definition
    (11) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (12) function_definition -> . declaration_specifiers declarator compound_statement
    (13) function_definition -> . declarator declaration_list compound_statement
    (14) function_definition -> . declarator compound_statement
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (106) method_definition -> . class_method_definition
    (107) method_definition -> . instance_method_definition
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (34) declarator -> . pointer direct_declarator
    (35) declarator -> . direct_declarator
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (142) class_method_definition -> . ADD method_selector compound_statement
    (143) class_method_definition -> . ADD method_type method_selector compound_statement
    (144) class_method_definition -> . ADD method_selector declaration_list compound_statement
    (145) class_method_definition -> . ADD method_type method_selector declaration_list compound_statement
    (146) instance_method_definition -> . SUB method_selector compound_statement
    (147) instance_method_definition -> . SUB method_type method_selector compound_statement
    (148) instance_method_definition -> . SUB method_selector declaration_list compound_statement
    (149) instance_method_definition -> . SUB method_type method_selector declaration_list compound_statement
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (82) pointer -> . MUL
    (83) pointer -> . MUL pointer
    (84) direct_declarator -> . IDENTIFIER
    (85) direct_declarator -> . LP declarator RP
    (86) direct_declarator -> . direct_declarator LBRACK constant_expression RBRACK
    (87) direct_declarator -> . direct_declarator LBRACK RBRACK
    (88) direct_declarator -> . direct_declarator LP parameter_type_list RP
    (89) direct_declarator -> . direct_declarator LP identifier_list RP
    (90) direct_declarator -> . direct_declarator LP RP
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 486
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 215
    SUB             shift and go to state 217
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    MUL             shift and go to state 12
    IDENTIFIER      shift and go to state 26
    LP              shift and go to state 24
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    declaration                    shift and go to state 346
    type_declaration               shift and go to state 8
    pointer                        shift and go to state 16
    type_specifier                 shift and go to state 11
    struct_or_union                shift and go to state 6
    direct_declarator              shift and go to state 34
    declaration_specifiers         shift and go to state 37
    instance_method_definition     shift and go to state 218
    method_definition              shift and go to state 348
    class_method_definition        shift and go to state 220
    function_definition            shift and go to state 349
    enum_specifier                 shift and go to state 35
    declarator                     shift and go to state 43

state 447

    (49) instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .

    RBRACE          reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    TYPEDEF         reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    ADD             reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    SUB             reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    EXTERN          reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    STATIC          reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    AUTO            reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    REGISTER        reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    VOID            reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    CHAR            reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    SHORT           reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    INT             reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    LONG            reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    FLOAT           reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    DOUBLE          reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    SIGNED          reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    UNSIGNED        reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    TYPE_NAME       reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    ENUM            reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    STRUCT          reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    UNION           reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    MUL             reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    IDENTIFIER      reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)
    LP              reduce using rule 49 (instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE .)


state 448

    (50) instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables . RBRACE

    RBRACE          shift and go to state 487


state 449

    (48) instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .

    RBRACE          reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    ADD             reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    SUB             reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    STATIC          reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    AUTO            reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    VOID            reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    CHAR            reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    SHORT           reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    INT             reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    LONG            reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    TYPE_NAME       reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    ENUM            reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    UNION           reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    MUL             reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)
    LP              reduce using rule 48 (instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE .)


state 450

    (129) type_direct_declarator -> type_direct_declarator LBRACK constant_expression RBRACK .

    LBRACK          reduce using rule 129 (type_direct_declarator -> type_direct_declarator LBRACK constant_expression RBRACK .)
    LP              reduce using rule 129 (type_direct_declarator -> type_direct_declarator LBRACK constant_expression RBRACK .)
    RP              reduce using rule 129 (type_direct_declarator -> type_direct_declarator LBRACK constant_expression RBRACK .)
    SEMI            reduce using rule 129 (type_direct_declarator -> type_direct_declarator LBRACK constant_expression RBRACK .)


state 451

    (131) type_direct_declarator -> type_direct_declarator LP parameter_type_list RP .

    LBRACK          reduce using rule 131 (type_direct_declarator -> type_direct_declarator LP parameter_type_list RP .)
    LP              reduce using rule 131 (type_direct_declarator -> type_direct_declarator LP parameter_type_list RP .)
    RP              reduce using rule 131 (type_direct_declarator -> type_direct_declarator LP parameter_type_list RP .)
    SEMI            reduce using rule 131 (type_direct_declarator -> type_direct_declarator LP parameter_type_list RP .)


state 452

    (132) type_direct_declarator -> type_direct_declarator LP identifier_list RP .

    LBRACK          reduce using rule 132 (type_direct_declarator -> type_direct_declarator LP identifier_list RP .)
    LP              reduce using rule 132 (type_direct_declarator -> type_direct_declarator LP identifier_list RP .)
    RP              reduce using rule 132 (type_direct_declarator -> type_direct_declarator LP identifier_list RP .)
    SEMI            reduce using rule 132 (type_direct_declarator -> type_direct_declarator LP identifier_list RP .)


state 453

    (202) unary_expression -> SIZEOF LP type_name RP .

    MUL             reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    DIV             reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    MOD             reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    ADD             reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    SUB             reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    LSHIFT          reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    RSHIFT          reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    LT              reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    GT              reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    LE              reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    GE              reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    EQUAL           reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    NOTEQUAL        reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    BITAND          reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    BITXOR          reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    BITOR           reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    AND             reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    QUESTION        reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    OR              reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    RBRACK          reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    SEMI            reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    COMMA           reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    RP              reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    COLON           reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    RBRACE          reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    ASSIGNMENT      reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    MUL_ASSIGN      reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    DIV_ASSIGN      reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    MOD_ASSIGN      reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    ADD_ASSIGN      reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    SUB_ASSIGN      reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    LSHIFT_ASSIGN   reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    RSHIFT_ASSIGN   reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    AND_ASSIGN      reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    XOR_ASSIGN      reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)
    OR_ASSIGN       reduce using rule 202 (unary_expression -> SIZEOF LP type_name RP .)


state 454

    (226) postfix_expression -> postfix_expression LBRACK expression RBRACK .

    LBRACK          reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    LP              reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    DOT             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    STRUCTACCESS    reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    INC             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    DEC             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    ASSIGNMENT      reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    MUL_ASSIGN      reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    DIV_ASSIGN      reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    MOD_ASSIGN      reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    ADD_ASSIGN      reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    SUB_ASSIGN      reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    LSHIFT_ASSIGN   reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    RSHIFT_ASSIGN   reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    AND_ASSIGN      reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    XOR_ASSIGN      reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    OR_ASSIGN       reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    MUL             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    DIV             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    MOD             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    ADD             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    SUB             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    LSHIFT          reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    RSHIFT          reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    LT              reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    GT              reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    LE              reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    GE              reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    EQUAL           reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    BITAND          reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    BITXOR          reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    BITOR           reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    AND             reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    QUESTION        reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    OR              reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    SEMI            reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    COMMA           reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    RP              reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    RBRACK          reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    COLON           reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)
    RBRACE          reduce using rule 226 (postfix_expression -> postfix_expression LBRACK expression RBRACK .)


state 455

    (228) postfix_expression -> postfix_expression LP argument_expression_list RP .

    LBRACK          reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    LP              reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    DOT             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    STRUCTACCESS    reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    INC             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    DEC             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    ASSIGNMENT      reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    MUL_ASSIGN      reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    DIV_ASSIGN      reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    MOD_ASSIGN      reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    ADD_ASSIGN      reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    SUB_ASSIGN      reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    LSHIFT_ASSIGN   reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    RSHIFT_ASSIGN   reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    AND_ASSIGN      reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    XOR_ASSIGN      reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    OR_ASSIGN       reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    MUL             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    DIV             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    MOD             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    ADD             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    SUB             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    LSHIFT          reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    RSHIFT          reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    LT              reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    GT              reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    LE              reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    GE              reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    EQUAL           reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    NOTEQUAL        reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    BITAND          reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    BITXOR          reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    BITOR           reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    AND             reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    QUESTION        reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    OR              reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    SEMI            reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    COMMA           reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    RP              reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    RBRACK          reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    COLON           reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)
    RBRACE          reduce using rule 228 (postfix_expression -> postfix_expression LP argument_expression_list RP .)


state 456

    (267) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 120
    assignment_expression          shift and go to state 488
    unary_expression               shift and go to state 161
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    and_expression                 shift and go to state 113
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    primary_expression             shift and go to state 129

state 457

    (240) cast_expression -> LP type_name RP cast_expression .

    MUL             reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    DIV             reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    MOD             reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    ADD             reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    SUB             reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    LSHIFT          reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    RSHIFT          reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    LT              reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    GT              reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    LE              reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    GE              reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    EQUAL           reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    NOTEQUAL        reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    BITAND          reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    BITXOR          reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    BITOR           reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    AND             reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    QUESTION        reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    OR              reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    RBRACK          reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    SEMI            reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    COMMA           reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    RP              reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    COLON           reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    RBRACE          reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    ASSIGNMENT      reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    MUL_ASSIGN      reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    DIV_ASSIGN      reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    MOD_ASSIGN      reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    ADD_ASSIGN      reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    SUB_ASSIGN      reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    LSHIFT_ASSIGN   reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    RSHIFT_ASSIGN   reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    AND_ASSIGN      reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    XOR_ASSIGN      reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)
    OR_ASSIGN       reduce using rule 240 (cast_expression -> LP type_name RP cast_expression .)


state 458

    (153) conditional_expression -> logical_or_expression QUESTION expression COLON . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP

    LP              shift and go to state 121
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140

    unary_expression               shift and go to state 106
    multiplicative_expression      shift and go to state 136
    inclusive_or_expression        shift and go to state 116
    exclusive_or_expression        shift and go to state 109
    postfix_expression             shift and go to state 118
    shift_expression               shift and go to state 132
    additive_expression            shift and go to state 117
    equality_expression            shift and go to state 133
    unary_operator                 shift and go to state 138
    conditional_expression         shift and go to state 489
    cast_expression                shift and go to state 123
    logical_and_expression         shift and go to state 130
    primary_expression             shift and go to state 129
    logical_or_expression          shift and go to state 124
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120

state 459

    (252) direct_abstract_declarator -> LP parameter_type_list RP .

    LBRACK          reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    LP              reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    RP              reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    COMMA           reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    SEMI            reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    LBRACE          reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    TYPEDEF         reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    EXTERN          reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    STATIC          reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    AUTO            reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    REGISTER        reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    VOID            reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    CHAR            reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    SHORT           reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    INT             reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    LONG            reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    FLOAT           reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    DOUBLE          reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    SIGNED          reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    UNSIGNED        reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    TYPE_NAME       reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    ENUM            reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    STRUCT          reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)
    UNION           reduce using rule 252 (direct_abstract_declarator -> LP parameter_type_list RP .)


state 460

    (246) direct_abstract_declarator -> LP abstract_declarator RP .

    LBRACK          reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    LP              reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    RP              reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    COMMA           reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    SEMI            reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    LBRACE          reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    TYPEDEF         reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    EXTERN          reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    STATIC          reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    AUTO            reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    REGISTER        reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    VOID            reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    CHAR            reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    SHORT           reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    INT             reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    LONG            reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    FLOAT           reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    DOUBLE          reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    SIGNED          reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    UNSIGNED        reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    TYPE_NAME       reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    ENUM            reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    STRUCT          reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)
    UNION           reduce using rule 246 (direct_abstract_declarator -> LP abstract_declarator RP .)


state 461

    (248) direct_abstract_declarator -> LBRACK constant_expression RBRACK .

    LBRACK          reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    LP              reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    RP              reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    COMMA           reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    SEMI            reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    LBRACE          reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    TYPEDEF         reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    EXTERN          reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    STATIC          reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    AUTO            reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    REGISTER        reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    VOID            reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    CHAR            reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    SHORT           reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    INT             reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    LONG            reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    FLOAT           reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    DOUBLE          reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    SIGNED          reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    UNSIGNED        reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    TYPE_NAME       reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    ENUM            reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    STRUCT          reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)
    UNION           reduce using rule 248 (direct_abstract_declarator -> LBRACK constant_expression RBRACK .)


state 462

    (250) direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression . RBRACK

    RBRACK          shift and go to state 490


state 463

    (249) direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .

    LBRACK          reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    LP              reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    RP              reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    COMMA           reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    SEMI            reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    LBRACE          reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    TYPEDEF         reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    EXTERN          reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    STATIC          reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    AUTO            reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    REGISTER        reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    VOID            reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    CHAR            reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    SHORT           reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    INT             reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    LONG            reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    FLOAT           reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    DOUBLE          reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    SIGNED          reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    UNSIGNED        reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    TYPE_NAME       reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    ENUM            reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    STRUCT          reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)
    UNION           reduce using rule 249 (direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK .)


state 464

    (253) direct_abstract_declarator -> direct_abstract_declarator LP RP .

    LBRACK          reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    LP              reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    RP              reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    COMMA           reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    SEMI            reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    LBRACE          reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    TYPEDEF         reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    EXTERN          reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    STATIC          reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    AUTO            reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    REGISTER        reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    VOID            reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    CHAR            reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    SHORT           reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    INT             reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    LONG            reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    FLOAT           reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    DOUBLE          reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    SIGNED          reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    UNSIGNED        reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    TYPE_NAME       reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    ENUM            reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    STRUCT          reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)
    UNION           reduce using rule 253 (direct_abstract_declarator -> direct_abstract_declarator LP RP .)


state 465

    (254) direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list . RP

    RP              shift and go to state 491


state 466

    (136) initializer -> LBRACE initializer_list COMMA . RBRACE
    (176) initializer_list -> initializer_list COMMA . initializer
    (134) initializer -> . assignment_expression
    (135) initializer -> . LBRACE initializer_list RBRACE
    (136) initializer -> . LBRACE initializer_list COMMA RBRACE
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    RBRACE          shift and go to state 493
    LBRACE          shift and go to state 288
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    initializer                    shift and go to state 492
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 287
    multiplicative_expression      shift and go to state 136
    conditional_expression         shift and go to state 182
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133

state 467

    (135) initializer -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 135 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 135 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 135 (initializer -> LBRACE initializer_list RBRACE .)


state 468

    (166) iteration_statement -> FOR LP expression_statement expression_statement . RP statement
    (167) iteration_statement -> FOR LP expression_statement expression_statement . expression RP
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    RP              shift and go to state 494
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 495

state 469

    (164) iteration_statement -> WHILE LP expression RP . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 496
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 470

    (157) labeled_statement -> CASE constant_expression COLON statement .

    RBRACE          reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    INC             reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC             reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    BITAND          reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    MUL             reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    ADD             reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    SUB             reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    TILDE           reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    BANG            reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    HEX_LITERAL     reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    OCTAL_LITERAL   reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    BINARY_LITERAL  reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    DECIMAL_LITERAL reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOATING_POINT_LITERAL reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    C_STRING_LITERAL reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    OBJC_STRING_LITERAL reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    LP              reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 157 (labeled_statement -> CASE constant_expression COLON statement .)


state 471

    (163) selection_statement -> SWITCH LP expression RP . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 497
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 472

    (165) iteration_statement -> DO statement WHILE LP . expression RP SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    IDENTIFIER      shift and go to state 135
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    additive_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    and_expression                 shift and go to state 113
    relational_expression          shift and go to state 120
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 498

state 473

    (161) selection_statement -> IF LP expression RP . statement
    (162) selection_statement -> IF LP expression RP . statement ELSE statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 499
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 474

    (19) class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list . END
    (53) interface_declaration_list -> interface_declaration_list . declaration
    (54) interface_declaration_list -> interface_declaration_list . method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 500
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    method_declaration             shift and go to state 204
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    enum_specifier                 shift and go to state 35
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 205

state 475

    (21) class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables . interface_declaration_list END
    (51) interface_declaration_list -> . declaration
    (52) interface_declaration_list -> . method_declaration
    (53) interface_declaration_list -> . interface_declaration_list declaration
    (54) interface_declaration_list -> . interface_declaration_list method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    class_method_declaration       shift and go to state 78
    type_specifier                 shift and go to state 11
    method_declaration             shift and go to state 79
    struct_or_union                shift and go to state 6
    instance_method_declaration    shift and go to state 81
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 84
    enum_specifier                 shift and go to state 35
    interface_declaration_list     shift and go to state 501

state 476

    (25) category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list . interface_declaration_list END
    (51) interface_declaration_list -> . declaration
    (52) interface_declaration_list -> . method_declaration
    (53) interface_declaration_list -> . interface_declaration_list declaration
    (54) interface_declaration_list -> . interface_declaration_list method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    interface_declaration_list     shift and go to state 502
    method_declaration             shift and go to state 79
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    enum_specifier                 shift and go to state 35
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 84

state 477

    (24) category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list . END
    (53) interface_declaration_list -> interface_declaration_list . declaration
    (54) interface_declaration_list -> interface_declaration_list . method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 503
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    method_declaration             shift and go to state 204
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    enum_specifier                 shift and go to state 35
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 205

state 478

    (245) keyword_declarator -> selector COLON method_type IDENTIFIER .

    COMMA           reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    COLON           reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    IDENTIFIER      reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    SEMI            reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    LBRACE          reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    TYPEDEF         reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    EXTERN          reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    STATIC          reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    AUTO            reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    REGISTER        reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    VOID            reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    CHAR            reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    SHORT           reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    INT             reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    LONG            reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    FLOAT           reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    DOUBLE          reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    SIGNED          reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    UNSIGNED        reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    TYPE_NAME       reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    ENUM            reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    STRUCT          reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)
    UNION           reduce using rule 245 (keyword_declarator -> selector COLON method_type IDENTIFIER .)


state 479

    (143) class_method_definition -> ADD method_type method_selector compound_statement .

    END             reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    TYPEDEF         reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    ADD             reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    SUB             reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    EXTERN          reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    STATIC          reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    AUTO            reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    REGISTER        reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    VOID            reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    CHAR            reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    SHORT           reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    INT             reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    LONG            reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    FLOAT           reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    DOUBLE          reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    SIGNED          reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    UNSIGNED        reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    TYPE_NAME       reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    MUL             reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    IDENTIFIER      reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    LP              reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    ENUM            reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    STRUCT          reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)
    UNION           reduce using rule 143 (class_method_definition -> ADD method_type method_selector compound_statement .)


state 480

    (145) class_method_definition -> ADD method_type method_selector declaration_list . compound_statement
    (37) declaration_list -> declaration_list . declaration
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 504
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 184

state 481

    (144) class_method_definition -> ADD method_selector declaration_list compound_statement .

    END             reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    TYPEDEF         reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    ADD             reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    SUB             reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    EXTERN          reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    STATIC          reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    AUTO            reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    REGISTER        reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    VOID            reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    CHAR            reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    SHORT           reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    INT             reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    LONG            reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    FLOAT           reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    DOUBLE          reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    SIGNED          reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    UNSIGNED        reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    MUL             reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    LP              reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    ENUM            reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    STRUCT          reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)
    UNION           reduce using rule 144 (class_method_definition -> ADD method_selector declaration_list compound_statement .)


state 482

    (147) instance_method_definition -> SUB method_type method_selector compound_statement .

    END             reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    TYPEDEF         reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    ADD             reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    SUB             reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    EXTERN          reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    STATIC          reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    AUTO            reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    REGISTER        reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    VOID            reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    CHAR            reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    SHORT           reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    INT             reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    LONG            reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    FLOAT           reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    DOUBLE          reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    SIGNED          reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    UNSIGNED        reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    TYPE_NAME       reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    MUL             reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    IDENTIFIER      reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    LP              reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    ENUM            reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    STRUCT          reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)
    UNION           reduce using rule 147 (instance_method_definition -> SUB method_type method_selector compound_statement .)


state 483

    (149) instance_method_definition -> SUB method_type method_selector declaration_list . compound_statement
    (37) declaration_list -> declaration_list . declaration
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    LBRACE          shift and go to state 73
    TYPEDEF         shift and go to state 30
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 6
    type_specifier                 shift and go to state 11
    compound_statement             shift and go to state 505
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 184

state 484

    (148) instance_method_definition -> SUB method_selector declaration_list compound_statement .

    END             reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    TYPEDEF         reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    ADD             reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    SUB             reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    EXTERN          reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    STATIC          reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    AUTO            reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    REGISTER        reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    VOID            reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    CHAR            reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    SHORT           reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    INT             reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    LONG            reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    FLOAT           reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    DOUBLE          reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    SIGNED          reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    UNSIGNED        reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    MUL             reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    LP              reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    ENUM            reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    STRUCT          reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)
    UNION           reduce using rule 148 (instance_method_definition -> SUB method_selector declaration_list compound_statement .)


state 485

    (26) category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .

    INTERFACE       reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    IMPLEMENTATION  reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    PROTOCOL        reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    CLASS           reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    TYPEDEF         reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    EXTERN          reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    STATIC          reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    AUTO            reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    REGISTER        reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    VOID            reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    CHAR            reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    SHORT           reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    INT             reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    LONG            reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    FLOAT           reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    DOUBLE          reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    SIGNED          reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    UNSIGNED        reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    TYPE_NAME       reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    MUL             reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    IDENTIFIER      reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    LP              reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    ENUM            reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    STRUCT          reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    UNION           reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)
    $end            reduce using rule 26 (category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END .)


state 486

    (23) class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .

    INTERFACE       reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    IMPLEMENTATION  reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    PROTOCOL        reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    CLASS           reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    TYPEDEF         reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    EXTERN          reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    STATIC          reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    AUTO            reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    REGISTER        reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    VOID            reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    CHAR            reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    SHORT           reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    INT             reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    LONG            reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    FLOAT           reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    DOUBLE          reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    SIGNED          reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    UNSIGNED        reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    TYPE_NAME       reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    MUL             reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    IDENTIFIER      reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    LP              reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    ENUM            reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    STRUCT          reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    UNION           reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)
    $end            reduce using rule 23 (class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END .)


state 487

    (50) instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .

    RBRACE          reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    TYPEDEF         reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    ADD             reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    SUB             reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    EXTERN          reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    STATIC          reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    AUTO            reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    REGISTER        reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    VOID            reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    CHAR            reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    SHORT           reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    INT             reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    LONG            reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    FLOAT           reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    DOUBLE          reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    SIGNED          reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    UNSIGNED        reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    TYPE_NAME       reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    ENUM            reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    STRUCT          reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    UNION           reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    MUL             reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    IDENTIFIER      reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)
    LP              reduce using rule 50 (instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE .)


state 488

    (267) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RP              reduce using rule 267 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 267 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 489

    (153) conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .

    SEMI            reduce using rule 153 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COMMA           reduce using rule 153 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RP              reduce using rule 153 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RBRACK          reduce using rule 153 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COLON           reduce using rule 153 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RBRACE          reduce using rule 153 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)


state 490

    (250) direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .

    LBRACK          reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    LP              reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    RP              reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    COMMA           reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    SEMI            reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    LBRACE          reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    TYPEDEF         reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    EXTERN          reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    STATIC          reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    AUTO            reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    REGISTER        reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    VOID            reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    CHAR            reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    SHORT           reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    INT             reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    LONG            reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    FLOAT           reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    DOUBLE          reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    SIGNED          reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    UNSIGNED        reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    TYPE_NAME       reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    ENUM            reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    STRUCT          reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)
    UNION           reduce using rule 250 (direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK .)


state 491

    (254) direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .

    LBRACK          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    LP              reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    RP              reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    COMMA           reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    SEMI            reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    LBRACE          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    TYPEDEF         reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    EXTERN          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    STATIC          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    AUTO            reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    REGISTER        reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    VOID            reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    CHAR            reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    SHORT           reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    INT             reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    LONG            reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    FLOAT           reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    DOUBLE          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    SIGNED          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    UNSIGNED        reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    TYPE_NAME       reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    ENUM            reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    STRUCT          reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)
    UNION           reduce using rule 254 (direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP .)


state 492

    (176) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 176 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 176 (initializer_list -> initializer_list COMMA initializer .)


state 493

    (136) initializer -> LBRACE initializer_list COMMA RBRACE .

    RBRACE          reduce using rule 136 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 136 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 136 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 494

    (166) iteration_statement -> FOR LP expression_statement expression_statement RP . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 506
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 495

    (167) iteration_statement -> FOR LP expression_statement expression_statement expression . RP
    (193) expression -> expression . COMMA assignment_expression

    RP              shift and go to state 507
    COMMA           shift and go to state 311


state 496

    (164) iteration_statement -> WHILE LP expression RP statement .

    RBRACE          reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    IDENTIFIER      reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    CASE            reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    DEFAULT         reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    LBRACE          reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    SEMI            reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    IF              reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    SWITCH          reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    WHILE           reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    DO              reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    FOR             reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    GOTO            reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    CONTINUE        reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    BREAK           reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    RETURN          reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    INC             reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    DEC             reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    SIZEOF          reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    BITAND          reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    MUL             reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    ADD             reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    SUB             reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    TILDE           reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    BANG            reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    HEX_LITERAL     reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    OCTAL_LITERAL   reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    BINARY_LITERAL  reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    DECIMAL_LITERAL reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    FLOATING_POINT_LITERAL reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    C_STRING_LITERAL reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    OBJC_STRING_LITERAL reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    LP              reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)
    ELSE            reduce using rule 164 (iteration_statement -> WHILE LP expression RP statement .)


state 497

    (163) selection_statement -> SWITCH LP expression RP statement .

    RBRACE          reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    IDENTIFIER      reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    CASE            reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    DEFAULT         reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    LBRACE          reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    SEMI            reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    IF              reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    SWITCH          reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    WHILE           reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    DO              reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    FOR             reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    GOTO            reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    CONTINUE        reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    BREAK           reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    RETURN          reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    INC             reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    DEC             reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    SIZEOF          reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    BITAND          reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    MUL             reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    ADD             reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    SUB             reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    TILDE           reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    BANG            reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    HEX_LITERAL     reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    OCTAL_LITERAL   reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    BINARY_LITERAL  reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    DECIMAL_LITERAL reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    FLOATING_POINT_LITERAL reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    C_STRING_LITERAL reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    OBJC_STRING_LITERAL reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    LP              reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)
    ELSE            reduce using rule 163 (selection_statement -> SWITCH LP expression RP statement .)


state 498

    (165) iteration_statement -> DO statement WHILE LP expression . RP SEMI
    (193) expression -> expression . COMMA assignment_expression

    RP              shift and go to state 508
    COMMA           shift and go to state 311


state 499

    (161) selection_statement -> IF LP expression RP statement .
    (162) selection_statement -> IF LP expression RP statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    IDENTIFIER      reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    CASE            reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    DEFAULT         reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    LBRACE          reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    SEMI            reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    IF              reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    SWITCH          reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    WHILE           reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    DO              reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    FOR             reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    GOTO            reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    CONTINUE        reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    BREAK           reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    RETURN          reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    INC             reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    DEC             reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    SIZEOF          reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    BITAND          reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    MUL             reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    ADD             reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    SUB             reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    TILDE           reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    BANG            reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    HEX_LITERAL     reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    OCTAL_LITERAL   reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    BINARY_LITERAL  reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    DECIMAL_LITERAL reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    FLOATING_POINT_LITERAL reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    C_STRING_LITERAL reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    OBJC_STRING_LITERAL reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    LP              reduce using rule 161 (selection_statement -> IF LP expression RP statement .)
    ELSE            shift and go to state 509

  ! ELSE            [ reduce using rule 161 (selection_statement -> IF LP expression RP statement .) ]


state 500

    (19) class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .

    INTERFACE       reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    IMPLEMENTATION  reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    PROTOCOL        reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    CLASS           reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    TYPEDEF         reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    EXTERN          reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    STATIC          reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    AUTO            reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    REGISTER        reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    VOID            reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    CHAR            reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    SHORT           reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    INT             reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    LONG            reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    FLOAT           reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    DOUBLE          reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    SIGNED          reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    UNSIGNED        reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    TYPE_NAME       reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    MUL             reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    IDENTIFIER      reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    LP              reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    ENUM            reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    STRUCT          reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    UNION           reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)
    $end            reduce using rule 19 (class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END .)


state 501

    (21) class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list . END
    (53) interface_declaration_list -> interface_declaration_list . declaration
    (54) interface_declaration_list -> interface_declaration_list . method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 510
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 3
    type_declaration               shift and go to state 8
    class_method_declaration       shift and go to state 78
    type_specifier                 shift and go to state 11
    method_declaration             shift and go to state 204
    struct_or_union                shift and go to state 6
    instance_method_declaration    shift and go to state 81
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 205
    enum_specifier                 shift and go to state 35

state 502

    (25) category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list . END
    (53) interface_declaration_list -> interface_declaration_list . declaration
    (54) interface_declaration_list -> interface_declaration_list . method_declaration
    (15) declaration -> . declaration_specifiers SEMI
    (16) declaration -> . type_declaration SEMI
    (17) declaration -> . declaration_specifiers init_declarator_list SEMI
    (102) method_declaration -> . class_method_declaration
    (103) method_declaration -> . instance_method_declaration
    (30) declaration_specifiers -> . storage_class_specifier
    (31) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (32) declaration_specifiers -> . type_specifier
    (33) declaration_specifiers -> . type_specifier declaration_specifiers
    (42) type_declaration -> . TYPEDEF declaration_specifiers type_declarator
    (138) class_method_declaration -> . ADD method_selector SEMI
    (139) class_method_declaration -> . ADD method_type method_selector SEMI
    (140) instance_method_declaration -> . SUB method_selector SEMI
    (141) instance_method_declaration -> . SUB method_type method_selector SEMI
    (66) storage_class_specifier -> . EXTERN
    (67) storage_class_specifier -> . STATIC
    (68) storage_class_specifier -> . AUTO
    (69) storage_class_specifier -> . REGISTER
    (70) type_specifier -> . VOID
    (71) type_specifier -> . CHAR
    (72) type_specifier -> . SHORT
    (73) type_specifier -> . INT
    (74) type_specifier -> . LONG
    (75) type_specifier -> . FLOAT
    (76) type_specifier -> . DOUBLE
    (77) type_specifier -> . SIGNED
    (78) type_specifier -> . UNSIGNED
    (79) type_specifier -> . struct_or_union_specifier
    (80) type_specifier -> . enum_specifier
    (81) type_specifier -> . TYPE_NAME
    (110) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (111) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (112) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (113) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (114) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (115) enum_specifier -> . ENUM IDENTIFIER
    (108) struct_or_union -> . STRUCT
    (109) struct_or_union -> . UNION

    END             shift and go to state 511
    TYPEDEF         shift and go to state 30
    ADD             shift and go to state 82
    SUB             shift and go to state 83
    EXTERN          shift and go to state 13
    STATIC          shift and go to state 10
    AUTO            shift and go to state 33
    REGISTER        shift and go to state 22
    VOID            shift and go to state 4
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 40
    LONG            shift and go to state 45
    FLOAT           shift and go to state 41
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 23
    TYPE_NAME       shift and go to state 15
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 19
    UNION           shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_method_declaration       shift and go to state 78
    struct_or_union_specifier      shift and go to state 3
    type_specifier                 shift and go to state 11
    instance_method_declaration    shift and go to state 81
    method_declaration             shift and go to state 204
    struct_or_union                shift and go to state 6
    type_declaration               shift and go to state 8
    enum_specifier                 shift and go to state 35
    declaration_specifiers         shift and go to state 71
    declaration                    shift and go to state 205

state 503

    (24) category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .

    INTERFACE       reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    IMPLEMENTATION  reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    PROTOCOL        reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    CLASS           reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    TYPEDEF         reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    EXTERN          reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    STATIC          reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    AUTO            reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    REGISTER        reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    VOID            reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    CHAR            reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    SHORT           reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    INT             reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    LONG            reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    FLOAT           reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    DOUBLE          reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    SIGNED          reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    UNSIGNED        reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    TYPE_NAME       reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    MUL             reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    IDENTIFIER      reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    LP              reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    ENUM            reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    STRUCT          reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    UNION           reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)
    $end            reduce using rule 24 (category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END .)


state 504

    (145) class_method_definition -> ADD method_type method_selector declaration_list compound_statement .

    END             reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    TYPEDEF         reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    ADD             reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    SUB             reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    EXTERN          reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    STATIC          reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    AUTO            reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    REGISTER        reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    VOID            reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    CHAR            reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    SHORT           reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    INT             reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    LONG            reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    FLOAT           reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    DOUBLE          reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    SIGNED          reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    UNSIGNED        reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    MUL             reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    LP              reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    ENUM            reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    STRUCT          reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)
    UNION           reduce using rule 145 (class_method_definition -> ADD method_type method_selector declaration_list compound_statement .)


state 505

    (149) instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .

    END             reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    TYPEDEF         reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    ADD             reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    SUB             reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    EXTERN          reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    STATIC          reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    AUTO            reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    REGISTER        reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    VOID            reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    CHAR            reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    SHORT           reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    INT             reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    LONG            reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    FLOAT           reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    DOUBLE          reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    SIGNED          reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    UNSIGNED        reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    MUL             reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    LP              reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    ENUM            reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    STRUCT          reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)
    UNION           reduce using rule 149 (instance_method_definition -> SUB method_type method_selector declaration_list compound_statement .)


state 506

    (166) iteration_statement -> FOR LP expression_statement expression_statement RP statement .

    RBRACE          reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    IDENTIFIER      reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    CASE            reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    DEFAULT         reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    LBRACE          reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    SEMI            reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    IF              reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    SWITCH          reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    WHILE           reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    DO              reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    FOR             reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    GOTO            reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    CONTINUE        reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    BREAK           reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    RETURN          reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    INC             reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    DEC             reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    SIZEOF          reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    BITAND          reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    MUL             reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    ADD             reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    SUB             reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    TILDE           reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    BANG            reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    HEX_LITERAL     reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    OCTAL_LITERAL   reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    BINARY_LITERAL  reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    DECIMAL_LITERAL reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    FLOATING_POINT_LITERAL reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    C_STRING_LITERAL reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    OBJC_STRING_LITERAL reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    LP              reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)
    ELSE            reduce using rule 166 (iteration_statement -> FOR LP expression_statement expression_statement RP statement .)


state 507

    (167) iteration_statement -> FOR LP expression_statement expression_statement expression RP .

    RBRACE          reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    IDENTIFIER      reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    CASE            reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    DEFAULT         reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    LBRACE          reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    SEMI            reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    IF              reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    SWITCH          reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    WHILE           reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    DO              reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    FOR             reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    GOTO            reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    CONTINUE        reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    BREAK           reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    RETURN          reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    INC             reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    DEC             reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    SIZEOF          reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    BITAND          reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    MUL             reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    ADD             reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    SUB             reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    TILDE           reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    BANG            reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    HEX_LITERAL     reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    OCTAL_LITERAL   reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    BINARY_LITERAL  reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    DECIMAL_LITERAL reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    FLOATING_POINT_LITERAL reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    C_STRING_LITERAL reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    OBJC_STRING_LITERAL reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    LP              reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)
    ELSE            reduce using rule 167 (iteration_statement -> FOR LP expression_statement expression_statement expression RP .)


state 508

    (165) iteration_statement -> DO statement WHILE LP expression RP . SEMI

    SEMI            shift and go to state 512


state 509

    (162) selection_statement -> IF LP expression RP statement ELSE . statement
    (121) statement -> . labeled_statement
    (122) statement -> . compound_statement
    (123) statement -> . expression_statement
    (124) statement -> . selection_statement
    (125) statement -> . iteration_statement
    (126) statement -> . jump_statement
    (156) labeled_statement -> . IDENTIFIER COLON statement
    (157) labeled_statement -> . CASE constant_expression COLON statement
    (158) labeled_statement -> . DEFAULT COLON statement
    (38) compound_statement -> . LBRACE RBRACE
    (39) compound_statement -> . LBRACE statement_list RBRACE
    (40) compound_statement -> . LBRACE declaration_list RBRACE
    (41) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (159) expression_statement -> . SEMI
    (160) expression_statement -> . expression SEMI
    (161) selection_statement -> . IF LP expression RP statement
    (162) selection_statement -> . IF LP expression RP statement ELSE statement
    (163) selection_statement -> . SWITCH LP expression RP statement
    (164) iteration_statement -> . WHILE LP expression RP statement
    (165) iteration_statement -> . DO statement WHILE LP expression RP SEMI
    (166) iteration_statement -> . FOR LP expression_statement expression_statement RP statement
    (167) iteration_statement -> . FOR LP expression_statement expression_statement expression RP
    (168) jump_statement -> . GOTO IDENTIFIER SEMI
    (169) jump_statement -> . CONTINUE SEMI
    (170) jump_statement -> . BREAK SEMI
    (171) jump_statement -> . RETURN SEMI
    (172) jump_statement -> . RETURN expression SEMI
    (192) expression -> . assignment_expression
    (193) expression -> . expression COMMA assignment_expression
    (173) assignment_expression -> . conditional_expression
    (174) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (197) unary_expression -> . postfix_expression
    (198) unary_expression -> . INC unary_expression
    (199) unary_expression -> . DEC unary_expression
    (200) unary_expression -> . unary_operator cast_expression
    (201) unary_expression -> . SIZEOF unary_expression
    (202) unary_expression -> . SIZEOF LP type_name RP
    (190) logical_or_expression -> . logical_and_expression
    (191) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (225) postfix_expression -> . primary_expression
    (226) postfix_expression -> . postfix_expression LBRACK expression RBRACK
    (227) postfix_expression -> . postfix_expression LP RP
    (228) postfix_expression -> . postfix_expression LP argument_expression_list RP
    (229) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (230) postfix_expression -> . postfix_expression STRUCTACCESS IDENTIFIER
    (231) postfix_expression -> . postfix_expression INC
    (232) postfix_expression -> . postfix_expression DEC
    (233) unary_operator -> . BITAND
    (234) unary_operator -> . MUL
    (235) unary_operator -> . ADD
    (236) unary_operator -> . SUB
    (237) unary_operator -> . TILDE
    (238) unary_operator -> . BANG
    (223) logical_and_expression -> . inclusive_or_expression
    (224) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (257) primary_expression -> . IDENTIFIER
    (258) primary_expression -> . HEX_LITERAL
    (259) primary_expression -> . OCTAL_LITERAL
    (260) primary_expression -> . BINARY_LITERAL
    (261) primary_expression -> . DECIMAL_LITERAL
    (262) primary_expression -> . FLOATING_POINT_LITERAL
    (263) primary_expression -> . C_STRING_LITERAL
    (264) primary_expression -> . OBJC_STRING_LITERAL
    (265) primary_expression -> . LP expression RP
    (255) inclusive_or_expression -> . exclusive_or_expression
    (256) inclusive_or_expression -> . inclusive_or_expression BITOR exclusive_or_expression
    (268) exclusive_or_expression -> . and_expression
    (269) exclusive_or_expression -> . exclusive_or_expression BITXOR and_expression
    (270) and_expression -> . equality_expression
    (271) and_expression -> . and_expression BITAND equality_expression
    (272) equality_expression -> . relational_expression
    (273) equality_expression -> . equality_expression EQUAL relational_expression
    (274) equality_expression -> . equality_expression NOTEQUAL relational_expression
    (275) relational_expression -> . shift_expression
    (276) relational_expression -> . relational_expression LT shift_expression
    (277) relational_expression -> . relational_expression GT shift_expression
    (278) relational_expression -> . relational_expression LE shift_expression
    (279) relational_expression -> . relational_expression GE shift_expression
    (280) shift_expression -> . additive_expression
    (281) shift_expression -> . shift_expression LSHIFT additive_expression
    (282) shift_expression -> . shift_expression RSHIFT additive_expression
    (283) additive_expression -> . multiplicative_expression
    (284) additive_expression -> . additive_expression ADD multiplicative_expression
    (285) additive_expression -> . additive_expression SUB multiplicative_expression
    (286) multiplicative_expression -> . cast_expression
    (287) multiplicative_expression -> . multiplicative_expression MUL cast_expression
    (288) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (289) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (239) cast_expression -> . unary_expression
    (240) cast_expression -> . LP type_name RP cast_expression

    IDENTIFIER      shift and go to state 172
    CASE            shift and go to state 169
    DEFAULT         shift and go to state 167
    LBRACE          shift and go to state 73
    SEMI            shift and go to state 177
    IF              shift and go to state 181
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 168
    DO              shift and go to state 175
    FOR             shift and go to state 163
    GOTO            shift and go to state 157
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC             shift and go to state 141
    DEC             shift and go to state 111
    SIZEOF          shift and go to state 112
    BITAND          shift and go to state 128
    MUL             shift and go to state 110
    ADD             shift and go to state 131
    SUB             shift and go to state 114
    TILDE           shift and go to state 122
    BANG            shift and go to state 137
    HEX_LITERAL     shift and go to state 119
    OCTAL_LITERAL   shift and go to state 115
    BINARY_LITERAL  shift and go to state 108
    DECIMAL_LITERAL shift and go to state 126
    FLOATING_POINT_LITERAL shift and go to state 134
    C_STRING_LITERAL shift and go to state 107
    OBJC_STRING_LITERAL shift and go to state 140
    LP              shift and go to state 179

    expression_statement           shift and go to state 155
    selection_statement            shift and go to state 178
    unary_expression               shift and go to state 161
    exclusive_or_expression        shift and go to state 109
    iteration_statement            shift and go to state 156
    and_expression                 shift and go to state 113
    compound_statement             shift and go to state 162
    inclusive_or_expression        shift and go to state 116
    postfix_expression             shift and go to state 118
    relational_expression          shift and go to state 120
    statement                      shift and go to state 513
    cast_expression                shift and go to state 123
    logical_or_expression          shift and go to state 124
    unary_operator                 shift and go to state 138
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 136
    additive_expression            shift and go to state 117
    primary_expression             shift and go to state 129
    logical_and_expression         shift and go to state 130
    shift_expression               shift and go to state 132
    equality_expression            shift and go to state 133
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 158
    conditional_expression         shift and go to state 182
    expression                     shift and go to state 166

state 510

    (21) class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .

    INTERFACE       reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    IMPLEMENTATION  reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    PROTOCOL        reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    CLASS           reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    TYPEDEF         reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    EXTERN          reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    STATIC          reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    AUTO            reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    REGISTER        reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    VOID            reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    CHAR            reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    SHORT           reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    INT             reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    LONG            reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    FLOAT           reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    DOUBLE          reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    SIGNED          reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    UNSIGNED        reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    TYPE_NAME       reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    MUL             reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    IDENTIFIER      reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    LP              reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    ENUM            reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    STRUCT          reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    UNION           reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)
    $end            reduce using rule 21 (class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END .)


state 511

    (25) category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .

    INTERFACE       reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    IMPLEMENTATION  reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    PROTOCOL        reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    CLASS           reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    TYPEDEF         reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    EXTERN          reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    STATIC          reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    AUTO            reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    REGISTER        reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    VOID            reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    CHAR            reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    SHORT           reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    INT             reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    LONG            reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    FLOAT           reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    DOUBLE          reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    SIGNED          reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    UNSIGNED        reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    TYPE_NAME       reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    MUL             reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    IDENTIFIER      reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    LP              reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    ENUM            reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    STRUCT          reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    UNION           reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)
    $end            reduce using rule 25 (category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END .)


state 512

    (165) iteration_statement -> DO statement WHILE LP expression RP SEMI .

    RBRACE          reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    IDENTIFIER      reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    CASE            reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    DEFAULT         reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    LBRACE          reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    SEMI            reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    IF              reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    SWITCH          reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    WHILE           reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    DO              reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    FOR             reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    GOTO            reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    CONTINUE        reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    BREAK           reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    RETURN          reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    INC             reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    DEC             reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    SIZEOF          reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    BITAND          reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    MUL             reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    ADD             reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    SUB             reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    TILDE           reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    BANG            reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    HEX_LITERAL     reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    OCTAL_LITERAL   reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    BINARY_LITERAL  reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    DECIMAL_LITERAL reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    FLOATING_POINT_LITERAL reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    C_STRING_LITERAL reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    OBJC_STRING_LITERAL reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    LP              reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)
    ELSE            reduce using rule 165 (iteration_statement -> DO statement WHILE LP expression RP SEMI .)


state 513

    (162) selection_statement -> IF LP expression RP statement ELSE statement .

    RBRACE          reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    IDENTIFIER      reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    CASE            reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    DEFAULT         reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    LBRACE          reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    SEMI            reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    IF              reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    SWITCH          reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    WHILE           reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    DO              reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    FOR             reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    GOTO            reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    CONTINUE        reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    BREAK           reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    RETURN          reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    INC             reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    DEC             reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    SIZEOF          reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    BITAND          reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    MUL             reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    ADD             reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    SUB             reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    TILDE           reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    BANG            reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    HEX_LITERAL     reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    OCTAL_LITERAL   reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    BINARY_LITERAL  reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    DECIMAL_LITERAL reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    FLOATING_POINT_LITERAL reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    C_STRING_LITERAL reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    OBJC_STRING_LITERAL reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    LP              reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)
    ELSE            reduce using rule 162 (selection_statement -> IF LP expression RP statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EXTERN in state 1 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 1 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 1 resolved as shift
WARNING: shift/reduce conflict for REGISTER in state 1 resolved as shift
WARNING: shift/reduce conflict for VOID in state 1 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 1 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 1 resolved as shift
WARNING: shift/reduce conflict for INT in state 1 resolved as shift
WARNING: shift/reduce conflict for LONG in state 1 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 1 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 1 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 1 resolved as shift
WARNING: shift/reduce conflict for UNSIGNED in state 1 resolved as shift
WARNING: shift/reduce conflict for TYPE_NAME in state 1 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 1 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 1 resolved as shift
WARNING: shift/reduce conflict for UNION in state 1 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 11 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 11 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 11 resolved as shift
WARNING: shift/reduce conflict for REGISTER in state 11 resolved as shift
WARNING: shift/reduce conflict for VOID in state 11 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 11 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 11 resolved as shift
WARNING: shift/reduce conflict for INT in state 11 resolved as shift
WARNING: shift/reduce conflict for LONG in state 11 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 11 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 11 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 11 resolved as shift
WARNING: shift/reduce conflict for UNSIGNED in state 11 resolved as shift
WARNING: shift/reduce conflict for TYPE_NAME in state 11 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 11 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 11 resolved as shift
WARNING: shift/reduce conflict for UNION in state 11 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 49 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 62 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 499 resolved as shift
