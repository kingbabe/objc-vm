
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitADD ADD_ASSIGN AND AND_ASSIGN ASSIGN ASSIGNMENT AT ATOMIC ATTRIBUTE AUTO AUTORELEASEPOOL AUTORELEASING_QUALIFIER BANG BINARY_LITERAL BITAND BITOR BITXOR BLOCK BOOL BOOL_ BREAK BRIDGE BRIDGE_RETAINED BRIDGE_TRANSFER BYCOPY BYREF CASE CATCH CHAR CLASS COLON COMMA COMPLEX CONST CONTINUE CONTRAVARIANT CONVARIANT COPY C_STRING_LITERAL Class DEC DECIMAL_LITERAL DECLSPEC DEFAULT DEPRECATED DIV DIV_ASSIGN DLLEXPORT DLLIMPORT DO DOT DOUBLE DYNAMIC ELLIPSIS ELSE ENCODE END ENUM EQUAL EXTERN EXTERN_SUFFIX FALSE FINALLY FLOAT FLOATING_POINT_LITERAL FOR GE GETTER GOTO GT HEX_LITERAL IB_DESIGNABLE IB_INSPECTABLE IB_OUTLET IB_OUTLET_COLLECTION ID IDENTIFIER IF IMAGINERY IMP IMPLEMENTATION IMPORT IN INC INLINE INOUT INT INTERFACE IOS_SUFFIX KINDOF LBRACE LBRACK LE LONG LP LSHIFT LSHIFT_ASSIGN LT MAC_SUFFIX MOD MOD_ASSIGN MUL MUL_ASSIGN NIL NO NONATOMIC NONULL NOTEQUAL NS_ASSUME_NONULL_BEGINE NS_ASSUME_NONULL_END NS_ENUM NS_INLINE NS_OPTIONS NULL NULLABLE NULL_RESETTABLE NULL_UNSPECIFIED OBJC_STRING_LITERAL OCTAL_LITERAL ONEWAY OPTIONAL OR OR_ASSIGN OUT PACKAGE PRIVATE PROPERTY PROTECTED PROTOCOL PROTOCOL_ PUBLIC QUESTION RBRACE RBRACK READONLY READWRITE REGISTER REQUIRED RESTRICT RETAIN RETURN RP RSHIFT RSHIFT_ASSIGN SEL SELECTOR SELF SEMI SETTER SHORT SIGNED SIZEOF STATIC STRING_QUALIFIER STRONG STRUCT STRUCTACCESS SUB SUB_ASSIGN SUPER SWITCH SYNCHRONIZED SYNTHESIZE THROW TILDE TRUE TRY TVOS_PROHIBITED TYPEDEF TYPEOF TYPE_NAME UNION UNSAFE_UNRETAINED UNSAFE_UNRETAINED_QUALIFIER UNSIGNED UNUSED VOID VOLATILE WEAK WEAK_QUALIFIER WHILE WS XOR_ASSIGN YEStranslation_unit : external_declaration\n                        | translation_unit external_declaration\n    external_declaration : function_definition\n                            | declaration\n                            | class_interface\n                            | class_implementation\n                            | category_interface\n                            | category_implementation\n                            | protocol_declaration\n                            | class_declaration_list\n    function_definition : declaration_specifiers declarator declaration_list compound_statement\n                           | declaration_specifiers declarator compound_statement\n                           | declarator declaration_list compound_statement\n                           | declarator compound_statement\n    declaration : declaration_specifiers SEMI\n                   | type_declaration SEMI\n                   | declaration_specifiers init_declarator_list SEMI\n    class_interface : INTERFACE class_name instance_variables interface_declaration_list END\n                       | INTERFACE class_name ':' superclass_name instance_variables interface_declaration_list END\n                       | INTERFACE protocol_reference_list instance_variables interface_declaration_list END\n                       | INTERFACE class_name ':' superclass_name protocol_reference_list instance_variables interface_declaration_list END\n    class_implementation : IMPLEMENTATION class_name instance_variables implementation_definition_list END\n                            | IMPLEMENTATION class_name ':' superclass_name instance_variables implementation_definition_list END\n    category_interface : INTERFACE class_name '(' category_name ')' interface_declaration_list END\n                          | INTERFACE class_name '(' category_name ')' protocol_reference_list interface_declaration_list END\n    category_implementation : IMPLEMENTATION class_name '(' category_name ')' implementation_definition_list END\n    protocol_declaration : PROTOCOL protocol_name interface_declaration_list END\n                            | PROTOCOL protocol_name protocol_reference_list interface_declaration_list END\n    class_declaration_list : CLASS class_list\n    declaration_specifiers : storage_class_specifier\n                              | storage_class_specifier declaration_specifiers\n                              | type_specifier\n                              | type_specifier declaration_specifiers\n                              | type_qualifier\n                              | type_qualifier declaration_specifiers\n                              | declspec storage_class_specifier\n                              | declspec storage_class_specifier declaration_specifiers\n                              | declspec type_specifier\n                              | declspec type_specifier declaration_specifiers\n                              | declspec type_qualifier\n                              | declspec type_qualifier declaration_specifiers\n    declarator : pointer direct_declarator\n                  | direct_declarator\n    declaration_list : declaration\n                        | declaration_list declaration\n    compound_statement : LBRACE RBRACE\n                          | LBRACE statement_list RBRACE\n                          | LBRACE declaration_list RBRACE\n                          | LBRACE declaration_list statement_list RBRACE\n    type_declaration : TYPEDEF declaration_specifiers type_declarator\n    init_declarator_list : init_declarator\n                            | init_declarator_list ',' init_declarator\n    class_name : IDENTIFIER\n    superclass_name : IDENTIFIER\n    instance_variables : LBRACE struct_declaration_list RBRACE\n                          | LBRACE visibility_specification struct_declaration_list RBRACE\n                          | LBRACE struct_declaration_list instance_variables RBRACE\n                          | LBRACE visibility_specification struct_declaration_list instance_variables RBRACE\n    interface_declaration_list : declaration\n                                  | method_declaration\n                                  | interface_declaration_list declaration\n                                  | interface_declaration_list method_declaration\n    protocol_reference_list : LT protocol_list GT\n    implementation_definition_list : function_definition\n                                      | declaration\n                                      | method_definition\n                                      | implementation_definition_list function_definition\n                                      | implementation_definition_list declaration\n                                      | implementation_definition_list method_definition\n    category_name : IDENTIFIER\n    protocol_name : IDENTIFIER\n    class_list : class_name\n                  | class_list ',' class_name\n    storage_class_specifier : EXTERN\n                               | STATIC\n                               | AUTO\n                               | REGISTER\n    type_specifier : VOID\n                      | CHAR\n                      | SHORT\n                      | INT\n                      | LONG\n                      | FLOAT\n                      | DOUBLE\n                      | SIGNED\n                      | UNSIGNED\n                      | struct_or_union_specifier\n                      | enum_specifier\n                      | TYPE_NAME\n    type_qualifier : CONST\n                      | VOLATILE\n    declspec : DECLSPEC '(' declspec_type ')'\n    declspec_type : DLLIMPORT\n                     | DLLEXPORT\n    pointer : '*'\n               | '*' type_qualifier_list\n               | '*' pointer\n               | '*' type_qualifier_list pointer\n    direct_declarator : IDENTIFIER\n                         | LP declarator RP\n                         | direct_declarator LBRACK constant_expression RBRACK\n                         | direct_declarator LBRACK RBRACK\n                         | direct_declarator LP parameter_type_list RP\n                         | direct_declarator LP identifier_list RP\n                         | direct_declarator LP RP\n    statement_list : statement\n                      | statement_list statement\n    type_declarator : pointer type_direct_declarator\n                       | type_direct_declarator\n    init_declarator : declarator\n                       | declarator ASSIGNMENT initializer\n    struct_declaration_list : struct_declaration\n                               | struct_declaration_list struct_declaration\n    visibility_specification : PRIVATE\n                                | PUBLIC\n                                | PROTECTED\n    method_declaration : class_method_declaration\n                          | instance_method_declaration\n    protocol_list : protocol_name\n                     | protocol_list ',' protocol_name\n    method_definition : class_method_definition\n                         | instance_method_definition\n    struct_or_union : STRUCT\n                       | UNION\n    struct_or_union_specifier : struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE\n                                 | struct_or_union LBRACE struct_declaration_list RBRACE\n                                 | struct_or_union IDENTIFIER\n    enum_specifier : ENUM LBRACE enumerator_list RBRACE\n                      | ENUM IDENTIFIER LBRACE enumerator_list RBRACE\n                      | ENUM IDENTIFIER\n    type_qualifier_list : type_qualifier\n                           | type_qualifier_list type_qualifier\n    constant_expression : conditional_expression\n    parameter_type_list : parameter_list\n                           | parameter_list COMMA ELLIPSIS\n    identifier_list : IDENTIFIER\n                       | identifier_list COMMA IDENTIFIER\n    statement : labeled_statement\n                 | compound_statement\n                 | expression_statement\n                 | selection_statement\n                 | iteration_statement\n                 | jump_statement\n    type_direct_declarator : IDENTIFIER\n                              | LP type_declarator RP\n                              | type_direct_declarator LBRACK constant_expression RBRACK\n                              | type_direct_declarator LBRACK RBRACK\n                              | type_direct_declarator LP parameter_type_list RP\n                              | type_direct_declarator LP identifier_list RP\n                              | type_direct_declarator LP RP\n    initializer : assignment_expression\n                   | LBRACE initializer_list RBRACE\n                   | LBRACE initializer_list COMMA RBRACE\n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI\n    class_method_declaration : ADD method_selector SEMI\n                                | ADD method_type method_selector SEMI\n    instance_method_declaration : SUB method_selector SEMI\n                                   | SUB method_type method_selector SEMI\n    class_method_definition : ADD method_selector compound_statement\n                               | ADD method_type method_selector compound_statement\n                               | ADD method_selector declaration_list compound_statement\n                               | ADD method_type method_selector declaration_list compound_statement\n    instance_method_definition : SUB method_selector compound_statement\n                                  | SUB method_type method_selector compound_statement\n                                  | SUB method_selector declaration_list compound_statement\n                                  | SUB method_type method_selector declaration_list compound_statement\n    enumerator_list : enumerator\n                       | enumerator_list COMMA enumerator\n    conditional_expression : logical_or_expression\n                              | logical_or_expression QUESTION expression COLON conditional_expression\n    parameter_list : parameter_declaration\n                      | parameter_list ',' parameter_declaration\n    labeled_statement : IDENTIFIER COLON statement\n                         | CASE constant_expression COLON statement\n                         | DEFAULT COLON statement\n    expression_statement : SEMI\n                            | expression SEMI\n    selection_statement : IF LP expression RP statement\n                           | IF LP expression RP statement ELSE statement\n                           | SWITCH LP expression RP statement\n    iteration_statement : WHILE LP expression RP statement\n                           | DO statement WHILE LP expression RP SEMI\n                           | FOR LP expression_statement expression_statement RP statement\n                           | FOR LP expression_statement expression_statement expression RP\n    jump_statement : GOTO IDENTIFIER SEMI\n                      | CONTINUE SEMI\n                      | BREAK SEMI\n                      | RETURN SEMI\n                      | RETURN expression SEMI\n    assignment_expression : conditional_expression\n                             | unary_expression assignment_operator assignment_expression\n    initializer_list : initializer\n                        | initializer_list COMMA initializer\n    specifier_qualifier_list : type_specifier specifier_qualifier_list\n                                | type_specifier\n                                | type_qualifier specifier_qualifier_list\n                                | type_qualifier\n    struct_declarator_list : struct_declarator\n                              | struct_declarator_list COMMA struct_declarator\n    method_selector : unary_selector\n                       | keyword_selector\n                       | keyword_selector COMMA ELLIPSIS\n                       | keyword_selector COMMA parameter_type_list\n    method_type : LP type_name RP\n    type_name : specifier_qualifier_list\n                 | specifier_qualifier_list abstract_declarator\n    enumerator : IDENTIFIER\n                  | IDENTIFIER ASSIGNMENT constant_expression\n    logical_or_expression : logical_and_expression\n                             | logical_or_expression OR logical_and_expression\n    expression : assignment_expression\n                  | expression COMMA assignment_expression\n    parameter_declaration : declaration_specifiers declarator\n                             | declaration_specifiers abstract_declarator\n                             | declaration_specifiers\n    unary_expression : postfix_expression\n                        | INC unary_expression\n                        | DEC unary_expression\n                        | unary_operator cast_expression\n                        | SIZEOF unary_expression\n                        | SIZEOF LP type_name RP\n    assignment_operator : ASSIGNMENT\n                           | MUL_ASSIGN\n                           | DIV_ASSIGN\n                           | MOD_ASSIGN\n                           | ADD_ASSIGN\n                           | SUB_ASSIGN\n                           | LSHIFT_ASSIGN\n                           | RSHIFT_ASSIGN\n                           | AND_ASSIGN\n                           | XOR_ASSIGN\n                           | OR_ASSIGN\n    struct_declarator : declarator\n                         | COLON constant_expression\n                         | declarator COLON constant_expression\n    unary_selector : selector\n    keyword_selector : keyword_declarator\n                        | keyword_selector keyword_declarator\n    abstract_declarator : pointer\n                           | direct_abstract_declarator\n                           | pointer direct_abstract_declarator\n    logical_and_expression : inclusive_or_expression\n                              | logical_and_expression AND inclusive_or_expression\n    postfix_expression : primary_expression\n                          | postfix_expression LBRACK expression RBRACK\n                          | postfix_expression LP RP\n                          | postfix_expression LP argument_expression_list RP\n                          | postfix_expression DOT IDENTIFIER\n                          | postfix_expression STRUCTACCESS IDENTIFIER\n                          | postfix_expression INC\n                          | postfix_expression DEC\n    unary_operator : BITAND\n                      | MUL\n                      | ADD\n                      | SUB\n                      | TILDE\n                      | BANG\n    cast_expression : unary_expression\n                       | LP type_name RP cast_expression\n    selector : IDENTIFIER\n    keyword_declarator : COLON IDENTIFIER\n                          | COLON method_type IDENTIFIER\n                          | selector COLON IDENTIFIER\n                          | selector COLON method_type IDENTIFIER\n    direct_abstract_declarator : LP abstract_declarator RP\n                                  | LBRACK RBRACK\n                                  | LBRACK constant_expression RBRACK\n                                  | direct_abstract_declarator LBRACK RBRACK\n                                  | direct_abstract_declarator LBRACK constant_expression RBRACK\n                                  | LP RP\n                                  | LP parameter_type_list RP\n                                  | direct_abstract_declarator LP RP\n                                  | direct_abstract_declarator LP parameter_type_list RP\n    inclusive_or_expression : exclusive_or_expression\n                               | inclusive_or_expression BITOR exclusive_or_expression\n    primary_expression : IDENTIFIER\n                          | HEX_LITERAL\n                          | OCTAL_LITERAL\n                          | BINARY_LITERAL\n                          | DECIMAL_LITERAL\n                          | FLOATING_POINT_LITERAL\n                          | C_STRING_LITERAL\n                          | OBJC_STRING_LITERAL\n                          | LP expression RP\n    argument_expression_list : assignment_expression\n                                | argument_expression_list COMMA assignment_expression\n    exclusive_or_expression : and_expression\n                               | exclusive_or_expression BITXOR and_expression\n    and_expression : equality_expression\n                      | and_expression BITAND equality_expression\n    equality_expression : relational_expression\n                           | equality_expression EQUAL relational_expression\n                           | equality_expression NOTEQUAL relational_expression\n    relational_expression : shift_expression\n                             | relational_expression LT shift_expression\n                             | relational_expression GT shift_expression\n                             | relational_expression LE shift_expression\n                             | relational_expression GE shift_expression\n    shift_expression : additive_expression\n                        | shift_expression LSHIFT additive_expression\n                        | shift_expression RSHIFT additive_expressionadditive_expression : multiplicative_expression\n                           | additive_expression ADD multiplicative_expression\n                           | additive_expression SUB multiplicative_expression\n    multiplicative_expression : cast_expression\n                                 | multiplicative_expression MUL cast_expression\n                                 | multiplicative_expression DIV cast_expression\n                                 | multiplicative_expression MOD cast_expression\n    "
    
_lr_action_items = {'C_STRING_LITERAL':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,119,-15,-44,119,-253,119,119,-255,119,-256,-252,-254,-257,119,119,-17,119,-140,-142,-138,119,119,-139,119,119,-106,-143,119,-46,-176,-141,119,-45,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,119,119,-186,-107,-47,119,-177,119,119,119,119,-187,119,119,119,119,-185,-49,-189,119,-175,119,-173,119,119,119,119,119,119,-174,119,119,119,119,-181,-180,-178,-183,-184,119,-182,-179,]),'HEX_LITERAL':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,131,-15,-44,131,-253,131,131,-255,131,-256,-252,-254,-257,131,131,-17,131,-140,-142,-138,131,131,-139,131,131,-106,-143,131,-46,-176,-141,131,-45,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,131,131,-186,-107,-47,131,-177,131,131,131,131,-187,131,131,131,131,-185,-49,-189,131,-175,131,-173,131,131,131,131,131,131,-174,131,131,131,131,-181,-180,-178,-183,-184,131,-182,-179,]),'NOTEQUAL':([118,119,120,127,129,130,131,132,135,138,141,144,145,146,147,148,152,176,187,254,256,263,267,286,287,387,389,390,391,393,396,397,398,399,400,401,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,-278,-299,-216,-277,-291,-305,-280,-244,-294,281,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,281,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-301,-300,-293,-292,-306,-308,-307,-221,-245,-247,-259,]),'BINARY_LITERAL':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,120,-15,-44,120,-253,120,120,-255,120,-256,-252,-254,-257,120,120,-17,120,-140,-142,-138,120,120,-139,120,120,-106,-143,120,-46,-176,-141,120,-45,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,120,120,-186,-107,-47,120,-177,120,120,120,120,-187,120,120,120,120,-185,-49,-189,120,-175,120,-173,120,120,120,120,120,120,-174,120,120,120,120,-181,-180,-178,-183,-184,120,-182,-179,]),'VOID':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[5,5,-80,-90,-87,-78,-86,-95,-79,-7,-75,5,-74,-6,-89,-5,-1,-8,-77,5,-9,5,5,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,5,-85,-91,5,-82,-31,5,-71,-96,-131,-97,-16,-130,-33,-42,-53,5,5,5,-72,-29,-2,5,-15,5,-35,-14,-44,5,5,-127,5,-117,-60,5,-118,-59,5,-132,-98,5,5,-37,-39,-41,-100,5,-102,-105,-171,-215,-134,-17,-12,5,5,-46,5,-13,-45,5,5,5,5,5,-112,5,5,-200,-201,-236,-237,5,-260,-27,-62,-61,-128,-65,5,-122,-66,-121,-64,5,-116,-114,5,-115,-73,5,5,-101,-103,5,-214,-213,-240,-239,-104,5,-11,-92,-48,-47,5,5,-63,5,-113,-126,-28,-261,-155,-238,5,-157,-129,5,-68,-22,-69,-67,5,5,-55,5,5,5,-270,-266,5,-241,-135,-172,-49,-18,5,5,-20,-125,-154,-262,-156,-202,-203,-263,-158,5,-159,5,5,-163,5,5,-57,-56,5,-271,-265,-267,-268,-272,5,5,5,5,-264,-160,5,-161,-164,5,-165,-26,-58,-23,-269,-273,5,-24,-19,5,-162,-166,-25,-21,]),'DECLSPEC':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,90,91,92,93,96,97,98,99,104,108,109,110,111,139,154,157,158,160,162,164,165,174,191,198,199,200,203,212,215,217,218,219,221,224,225,226,228,231,233,235,236,237,238,248,251,277,288,289,291,292,293,294,295,298,303,307,325,336,339,340,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,378,404,416,420,422,423,425,426,430,442,443,444,446,448,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[39,39,-80,-90,-87,-78,-86,-95,-79,-7,-75,39,-74,-6,-89,-5,-1,-8,-77,-9,39,39,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,39,-85,-91,39,-82,-31,39,-71,-96,-131,-97,-16,-130,-33,-42,-53,39,39,39,-72,-29,-2,39,-15,39,-35,-14,-44,39,39,-127,-117,-60,39,-118,-59,39,-132,-98,39,-37,-39,-41,-100,-102,-105,-171,-215,-134,-17,-12,39,39,-46,-13,-45,39,39,39,-200,-201,-236,-237,-260,-27,-62,-61,-128,-65,39,-122,-66,-121,-64,-73,39,-101,-103,39,-214,-213,-240,-239,-104,39,-11,-48,-47,39,39,-63,-126,-28,-261,-155,-238,39,-157,-129,39,-68,-22,-69,-67,39,39,-55,39,39,-270,-266,39,-241,-135,-172,-49,-18,39,39,-20,-125,-262,-156,-202,-203,-263,-158,39,-159,39,39,-163,39,39,-57,-56,39,-271,-265,-267,-268,-272,39,39,39,39,-264,-160,39,-161,-164,39,-165,-26,-58,-23,-269,-273,39,-24,-19,39,-162,-166,-25,-21,]),'PROTECTED':([106,],[242,]),'DIV_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,319,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'RP':([1,2,3,4,5,6,8,9,13,14,15,17,23,31,32,33,34,38,40,43,44,45,46,49,51,54,55,56,58,60,61,64,65,66,67,73,79,88,98,99,108,109,110,111,115,116,118,119,120,121,125,127,128,129,130,131,132,135,136,138,139,141,142,144,145,146,147,148,152,154,155,156,157,158,159,160,176,192,195,197,208,210,228,249,251,252,254,256,263,265,267,272,273,274,277,286,287,288,289,291,292,293,294,295,327,344,345,346,360,363,379,381,382,383,384,385,386,387,388,389,390,391,393,394,395,396,397,398,399,400,401,403,404,405,407,408,409,410,411,412,413,414,415,416,417,418,420,422,423,424,425,426,432,434,436,438,441,448,472,473,474,475,476,477,479,481,482,483,485,486,487,490,512,513,514,515,519,522,],[-30,-80,-90,-87,-78,-86,-95,-79,-75,-32,-74,-89,-77,-84,-76,-43,-88,-99,-83,-81,-34,-85,-91,-82,-31,-96,-131,-97,-130,-33,-42,-36,-38,-40,111,154,-35,-127,-132,-98,-37,-39,-41,-100,-109,-144,-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,-169,-280,-102,-244,-209,-294,-289,-281,-276,-302,-283,-105,-136,288,-171,-215,295,-134,-258,-176,-211,-190,-195,-197,-128,379,382,-108,-218,-220,-251,393,-250,401,402,-205,-101,-219,-217,-103,416,-214,-213,-240,-239,-104,-177,-126,-194,-196,459,-129,-145,-147,-150,473,474,-288,475,-290,-275,-303,-304,-249,-246,-285,477,-248,-297,-298,-295,-296,-284,-206,416,-239,-210,-243,-301,-300,-293,-292,-306,-308,-307,-270,481,482,-266,486,-241,-137,-135,-172,-191,-212,491,493,495,-125,-146,-148,-149,-221,-245,-247,-259,-271,-265,-267,-268,-272,515,518,-286,-170,-269,-273,531,532,]),'LSHIFT':([118,119,120,127,129,130,131,135,138,141,144,146,147,148,152,176,187,254,256,263,267,286,287,389,390,391,393,396,397,398,399,400,401,409,410,413,414,415,475,476,477,479,],[-258,-282,-279,-278,-299,-216,-277,-305,-280,-244,280,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-303,-304,-249,-246,-248,280,280,280,280,-284,-301,-300,-306,-308,-307,-221,-245,-247,-259,]),'IMPLEMENTATION':([0,11,16,19,20,22,26,29,35,37,41,57,63,68,69,70,74,80,162,164,191,198,224,248,303,307,325,351,369,430,442,446,509,511,525,526,534,535,],[21,-7,-6,-5,-1,-8,-9,21,-10,-4,-3,-16,-53,-72,-29,-2,-15,-14,-17,-12,-46,-13,-27,-73,-11,-48,-47,-28,-22,-49,-18,-20,-26,-23,-24,-19,-25,-21,]),'(':([39,62,63,85,],[78,105,-53,201,]),',':([1,2,3,4,5,6,8,9,13,14,15,17,23,31,32,33,34,38,40,43,44,45,46,49,51,53,54,55,56,58,60,61,63,64,65,66,68,69,75,76,77,79,88,98,99,108,109,110,111,118,119,120,121,125,127,128,129,130,131,132,135,136,138,139,141,142,144,145,146,147,148,152,154,157,158,160,169,176,197,204,205,228,248,254,256,263,267,277,286,287,288,291,292,293,294,295,299,300,301,344,363,385,387,388,389,390,391,393,396,397,398,399,400,401,407,408,409,410,411,412,413,414,415,416,420,423,426,432,447,448,475,476,477,479,481,482,483,485,486,489,513,514,515,517,],[-30,-80,-90,-87,-78,-86,-95,-79,-75,-32,-74,-89,-77,-84,-76,-43,-88,-99,-83,-81,-34,-85,-91,-82,-31,-71,-96,-131,-97,-130,-33,-42,-53,-36,-38,-40,-72,112,-51,161,-110,-35,-127,-132,-98,-37,-39,-41,-100,-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,-169,-280,-102,-244,-209,-294,-289,-281,-276,-302,-283,-105,-171,-215,298,-110,-258,-190,341,-119,-128,-73,-218,-220,-251,-250,-101,-219,-217,-103,-214,-213,-240,-239,-104,-52,-111,-151,-126,-129,-288,-290,-275,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-210,-243,-301,-300,-293,-292,-306,-308,-307,-270,-266,-241,-172,-191,-120,-125,-221,-245,-247,-259,-271,-265,-267,-268,-272,-152,-170,-269,-273,-153,]),'LONG':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[49,49,-80,-90,-87,-78,-86,-95,-79,-7,-75,49,-74,-6,-89,-5,-1,-8,-77,49,-9,49,49,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,49,-85,-91,49,-82,-31,49,-71,-96,-131,-97,-16,-130,-33,-42,-53,49,49,49,-72,-29,-2,49,-15,49,-35,-14,-44,49,49,-127,49,-117,-60,49,-118,-59,49,-132,-98,49,49,-37,-39,-41,-100,49,-102,-105,-171,-215,-134,-17,-12,49,49,-46,49,-13,-45,49,49,49,49,49,-112,49,49,-200,-201,-236,-237,49,-260,-27,-62,-61,-128,-65,49,-122,-66,-121,-64,49,-116,-114,49,-115,-73,49,49,-101,-103,49,-214,-213,-240,-239,-104,49,-11,-92,-48,-47,49,49,-63,49,-113,-126,-28,-261,-155,-238,49,-157,-129,49,-68,-22,-69,-67,49,49,-55,49,49,49,-270,-266,49,-241,-135,-172,-49,-18,49,49,-20,-125,-154,-262,-156,-202,-203,-263,-158,49,-159,49,49,-163,49,49,-57,-56,49,-271,-265,-267,-268,-272,49,49,49,49,-264,-160,49,-161,-164,49,-165,-26,-58,-23,-269,-273,49,-24,-19,49,-162,-166,-25,-21,]),'ELLIPSIS':([297,358,],[425,455,]),'BITOR':([118,119,120,121,125,127,128,129,130,131,132,135,138,141,144,145,146,147,148,152,176,187,254,256,263,267,286,287,385,387,388,389,390,391,393,396,397,398,399,400,401,408,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,-274,-287,-278,259,-299,-216,-277,-291,-305,-280,-244,-294,-289,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-288,-290,-275,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,259,-301,-300,-293,-292,-306,-308,-307,-221,-245,-247,-259,]),'GT':([53,118,119,120,127,129,130,131,132,135,138,141,144,146,147,148,152,176,187,204,205,254,256,263,267,286,287,389,390,391,393,396,397,398,399,400,401,409,410,411,412,413,414,415,447,475,476,477,479,],[-71,-258,-282,-279,-278,-299,-216,-277,271,-305,-280,-244,-294,-281,-276,-302,-283,-258,-276,340,-119,-218,-220,-251,-250,-219,-217,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-301,-300,271,271,-306,-308,-307,-120,-221,-245,-247,-259,]),'RBRACE':([57,74,82,83,101,102,103,118,119,120,121,125,127,128,129,130,131,132,135,136,138,141,142,144,145,146,147,148,151,152,162,170,171,173,174,176,177,180,186,188,191,192,193,197,199,207,209,227,241,254,256,263,267,286,287,301,306,307,308,323,324,325,327,333,342,343,364,365,375,376,377,385,387,388,389,390,391,393,396,397,398,399,400,401,407,408,409,410,411,412,413,414,415,427,428,429,430,431,432,435,439,452,468,469,470,475,476,477,479,488,489,492,510,513,516,517,520,521,523,530,531,536,537,],[-16,-15,-44,191,-167,228,-207,-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,-169,-280,-244,-209,-294,-289,-281,-276,-302,-133,-283,-17,-140,-142,-138,307,-258,-139,325,-106,-143,-46,-176,-141,-190,-45,344,-112,363,376,-218,-220,-251,-250,-219,-217,-151,430,-48,-188,-186,-107,-47,-177,-187,448,-113,-168,-208,468,-55,470,-288,-290,-275,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-210,-243,-301,-300,-293,-292,-306,-308,-307,-192,489,-185,-49,-189,-191,-175,-173,-154,-57,510,-56,-221,-245,-247,-259,517,-152,-174,-58,-170,-193,-153,-181,-180,-178,-183,-184,-182,-179,]),'RBRACK':([72,118,119,120,121,125,127,128,129,130,131,132,135,136,137,138,141,142,144,145,146,147,148,151,152,176,195,197,250,254,256,263,267,286,287,290,380,385,387,388,389,390,391,392,393,396,397,398,399,400,401,407,408,409,410,411,412,413,414,415,419,421,432,434,475,476,477,479,484,513,],[139,-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,-169,277,-280,-244,-209,-294,-289,-281,-276,-302,-133,-283,-258,-211,-190,381,-218,-220,-251,-250,-219,-217,420,472,-288,-290,-275,-303,-304,-249,476,-246,-248,-297,-298,-295,-296,-284,-210,-243,-301,-300,-293,-292,-306,-308,-307,483,485,-191,-212,-221,-245,-247,-259,514,-170,]),'GE':([118,119,120,127,129,130,131,132,135,138,141,144,146,147,148,152,176,187,254,256,263,267,286,287,389,390,391,393,396,397,398,399,400,401,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,-278,-299,-216,-277,269,-305,-280,-244,-294,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-301,-300,269,269,-306,-308,-307,-221,-245,-247,-259,]),'FLOATING_POINT_LITERAL':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,146,-15,-44,146,-253,146,146,-255,146,-256,-252,-254,-257,146,146,-17,146,-140,-142,-138,146,146,-139,146,146,-106,-143,146,-46,-176,-141,146,-45,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,146,146,-186,-107,-47,146,-177,146,146,146,146,-187,146,146,146,146,-185,-49,-189,146,-175,146,-173,146,146,146,146,146,146,-174,146,146,146,146,-181,-180,-178,-183,-184,146,-182,-179,]),'STRUCTACCESS':([119,120,127,130,131,138,141,146,147,152,187,263,267,391,393,396,401,476,477,],[-282,-279,-278,262,-277,-280,-244,-281,-276,-283,-276,-251,-250,-249,-246,-248,-284,-245,-247,]),'DOUBLE':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[31,31,-80,-90,-87,-78,-86,-95,-79,-7,-75,31,-74,-6,-89,-5,-1,-8,-77,31,-9,31,31,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,31,-85,-91,31,-82,-31,31,-71,-96,-131,-97,-16,-130,-33,-42,-53,31,31,31,-72,-29,-2,31,-15,31,-35,-14,-44,31,31,-127,31,-117,-60,31,-118,-59,31,-132,-98,31,31,-37,-39,-41,-100,31,-102,-105,-171,-215,-134,-17,-12,31,31,-46,31,-13,-45,31,31,31,31,31,-112,31,31,-200,-201,-236,-237,31,-260,-27,-62,-61,-128,-65,31,-122,-66,-121,-64,31,-116,-114,31,-115,-73,31,31,-101,-103,31,-214,-213,-240,-239,-104,31,-11,-92,-48,-47,31,31,-63,31,-113,-126,-28,-261,-155,-238,31,-157,-129,31,-68,-22,-69,-67,31,31,-55,31,31,31,-270,-266,31,-241,-135,-172,-49,-18,31,31,-20,-125,-154,-262,-156,-202,-203,-263,-158,31,-159,31,31,-163,31,31,-57,-56,31,-271,-265,-267,-268,-272,31,31,31,31,-264,-160,31,-161,-164,31,-165,-26,-58,-23,-269,-273,31,-24,-19,31,-162,-166,-25,-21,]),'INTERFACE':([0,11,16,19,20,22,26,29,35,37,41,57,63,68,69,70,74,80,162,164,191,198,224,248,303,307,325,351,369,430,442,446,509,511,525,526,534,535,],[48,-7,-6,-5,-1,-8,-9,48,-10,-4,-3,-16,-53,-72,-29,-2,-15,-14,-17,-12,-46,-13,-27,-73,-11,-48,-47,-28,-22,-49,-18,-20,-26,-23,-24,-19,-25,-21,]),'OBJC_STRING_LITERAL':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,152,-15,-44,152,-253,152,152,-255,152,-256,-252,-254,-257,152,152,-17,152,-140,-142,-138,152,152,-139,152,152,-106,-143,152,-46,-176,-141,152,-45,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,152,152,-186,-107,-47,152,-177,152,152,152,152,-187,152,152,152,152,-185,-49,-189,152,-175,152,-173,152,152,152,152,152,152,-174,152,152,152,152,-181,-180,-178,-183,-184,152,-182,-179,]),'OR':([118,119,120,121,125,127,128,129,130,131,132,135,136,138,141,142,144,145,146,147,148,152,176,187,254,256,263,267,286,287,385,387,388,389,390,391,393,396,397,398,399,400,401,407,408,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,276,-280,-244,-209,-294,-289,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-288,-290,-275,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-210,-243,-301,-300,-293,-292,-306,-308,-307,-221,-245,-247,-259,]),'SHORT':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[2,2,-80,-90,-87,-78,-86,-95,-79,-7,-75,2,-74,-6,-89,-5,-1,-8,-77,2,-9,2,2,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,2,-85,-91,2,-82,-31,2,-71,-96,-131,-97,-16,-130,-33,-42,-53,2,2,2,-72,-29,-2,2,-15,2,-35,-14,-44,2,2,-127,2,-117,-60,2,-118,-59,2,-132,-98,2,2,-37,-39,-41,-100,2,-102,-105,-171,-215,-134,-17,-12,2,2,-46,2,-13,-45,2,2,2,2,2,-112,2,2,-200,-201,-236,-237,2,-260,-27,-62,-61,-128,-65,2,-122,-66,-121,-64,2,-116,-114,2,-115,-73,2,2,-101,-103,2,-214,-213,-240,-239,-104,2,-11,-92,-48,-47,2,2,-63,2,-113,-126,-28,-261,-155,-238,2,-157,-129,2,-68,-22,-69,-67,2,2,-55,2,2,2,-270,-266,2,-241,-135,-172,-49,-18,2,2,-20,-125,-154,-262,-156,-202,-203,-263,-158,2,-159,2,2,-163,2,2,-57,-56,2,-271,-265,-267,-268,-272,2,2,2,2,-264,-160,2,-161,-164,2,-165,-26,-58,-23,-269,-273,2,-24,-19,2,-162,-166,-25,-21,]),'RETURN':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,175,-17,-140,-142,-138,175,-139,175,-106,-143,175,-46,-176,-141,-45,175,-48,-188,-186,-107,-47,-177,175,175,-187,-185,-49,-189,-175,175,-173,175,-174,175,175,175,-181,-180,-178,-183,-184,175,-182,-179,]),'ASSIGNMENT':([33,38,61,77,103,111,118,119,120,127,130,131,138,139,141,146,147,152,154,169,176,187,254,256,263,267,277,286,287,288,295,391,393,396,401,475,476,477,479,],[-43,-99,-42,163,230,-100,-258,-282,-279,-278,-216,-277,-280,-102,-244,-281,-276,-283,-105,163,313,-276,-218,-220,-251,-250,-101,-219,-217,-103,-104,-249,-246,-248,-284,-221,-245,-247,-259,]),'STATIC':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,90,91,92,93,96,97,98,99,104,108,109,110,111,139,154,157,158,160,162,164,165,174,191,198,199,200,203,212,215,217,218,219,221,224,225,226,228,231,233,235,236,237,238,248,251,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,378,404,416,420,422,423,425,426,430,442,443,444,446,448,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[13,13,-80,-90,-87,-78,-86,-95,-79,-7,-75,13,-74,-6,-89,-5,-1,-8,-77,13,-9,13,13,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,13,-85,-91,13,-82,-31,13,-71,-96,-131,-97,-16,-130,-33,-42,-53,13,13,13,-72,-29,-2,13,-15,13,-35,-14,-44,13,13,-127,-117,-60,13,-118,-59,13,-132,-98,13,-37,-39,-41,-100,-102,-105,-171,-215,-134,-17,-12,13,13,-46,-13,-45,13,13,13,-200,-201,-236,-237,-260,-27,-62,-61,-128,-65,13,-122,-66,-121,-64,-73,13,-101,-103,13,-214,-213,-240,-239,-104,13,-11,-92,-48,-47,13,13,-63,-126,-28,-261,-155,-238,13,-157,-129,13,-68,-22,-69,-67,13,13,-55,13,13,-270,-266,13,-241,-135,-172,-49,-18,13,13,-20,-125,-262,-156,-202,-203,-263,-158,13,-159,13,13,-163,13,13,-57,-56,13,-271,-265,-267,-268,-272,13,13,13,13,-264,-160,13,-161,-164,13,-165,-26,-58,-23,-269,-273,13,-24,-19,13,-162,-166,-25,-21,]),'SIZEOF':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,124,-15,-44,124,-253,124,124,-255,124,-256,-252,-254,-257,124,124,-17,124,-140,-142,-138,124,124,-139,124,124,-106,-143,124,-46,-176,-141,124,-45,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,124,124,-186,-107,-47,124,-177,124,124,124,124,-187,124,124,124,124,-185,-49,-189,124,-175,124,-173,124,124,124,124,124,124,-174,124,124,124,124,-181,-180,-178,-183,-184,124,-182,-179,]),'DEC':([57,72,74,82,83,119,120,122,123,124,126,127,130,131,133,134,138,140,141,143,146,147,149,150,152,153,162,163,170,171,173,174,175,177,180,184,186,187,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,263,264,265,267,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,391,393,396,401,402,421,429,430,431,433,435,437,439,449,476,477,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,123,-15,-44,123,-282,-279,-253,123,123,-255,-278,263,-277,123,-256,-280,-252,-244,-254,-281,-276,-257,123,-283,123,-17,123,-140,-142,-138,123,123,-139,123,123,-106,-276,-143,123,-46,-176,-141,123,-45,123,123,123,123,123,123,123,123,123,-251,123,123,-250,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,123,123,-186,-107,-47,123,-177,123,123,123,123,-187,123,123,-249,-246,-248,-284,123,123,-185,-49,-189,123,-175,123,-173,123,-245,-247,123,123,123,123,123,-174,123,123,123,123,-181,-180,-178,-183,-184,123,-182,-179,]),'UNSIGNED':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[6,6,-80,-90,-87,-78,-86,-95,-79,-7,-75,6,-74,-6,-89,-5,-1,-8,-77,6,-9,6,6,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,6,-85,-91,6,-82,-31,6,-71,-96,-131,-97,-16,-130,-33,-42,-53,6,6,6,-72,-29,-2,6,-15,6,-35,-14,-44,6,6,-127,6,-117,-60,6,-118,-59,6,-132,-98,6,6,-37,-39,-41,-100,6,-102,-105,-171,-215,-134,-17,-12,6,6,-46,6,-13,-45,6,6,6,6,6,-112,6,6,-200,-201,-236,-237,6,-260,-27,-62,-61,-128,-65,6,-122,-66,-121,-64,6,-116,-114,6,-115,-73,6,6,-101,-103,6,-214,-213,-240,-239,-104,6,-11,-92,-48,-47,6,6,-63,6,-113,-126,-28,-261,-155,-238,6,-157,-129,6,-68,-22,-69,-67,6,6,-55,6,6,6,-270,-266,6,-241,-135,-172,-49,-18,6,6,-20,-125,-154,-262,-156,-202,-203,-263,-158,6,-159,6,6,-163,6,6,-57,-56,6,-271,-265,-267,-268,-272,6,6,6,6,-264,-160,6,-161,-164,6,-165,-26,-58,-23,-269,-273,6,-24,-19,6,-162,-166,-25,-21,]),'COLON':([2,3,4,5,6,9,17,31,33,34,38,40,43,45,46,49,58,61,88,94,95,111,118,119,120,121,125,127,128,129,130,131,132,135,136,138,139,141,142,144,145,146,147,148,151,152,154,176,182,187,195,197,208,210,211,214,217,218,219,221,223,228,232,234,254,256,263,267,277,286,287,288,295,330,344,345,346,348,353,356,357,363,366,372,385,387,388,389,390,391,393,396,397,398,399,400,401,406,407,408,409,410,411,412,413,414,415,432,434,448,451,453,458,459,475,476,477,479,502,513,],[-80,-90,-87,-78,-86,-79,-89,-84,-43,-88,-99,-83,-81,-85,-91,-82,-130,-42,-127,213,213,-100,-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,-169,-280,-102,-244,-209,-294,-289,-281,-276,-302,-133,-283,-105,-258,328,332,-211,-190,-195,-197,349,213,213,359,-237,-260,213,-128,213,213,-218,-220,-251,-250,-101,-219,-217,-103,-104,437,-126,-194,-196,449,-261,-238,359,-129,213,213,-288,-290,-275,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,480,-210,-243,-301,-300,-293,-292,-306,-308,-307,-191,-212,-125,349,-262,-263,-204,-221,-245,-247,-259,-264,-170,]),'$end':([11,16,19,20,22,26,29,35,37,41,57,63,68,69,70,74,80,162,164,191,198,224,248,303,307,325,351,369,430,442,446,509,511,525,526,534,535,],[-7,-6,-5,-1,-8,-9,0,-10,-4,-3,-16,-53,-72,-29,-2,-15,-14,-17,-12,-46,-13,-27,-73,-11,-48,-47,-28,-22,-49,-18,-20,-26,-23,-24,-19,-25,-21,]),'END':([57,74,80,90,91,93,96,97,162,164,191,198,212,225,226,231,233,235,236,237,238,303,307,325,336,339,355,361,368,370,371,430,454,460,462,465,467,471,497,498,503,505,506,508,524,527,528,529,],[-16,-15,-14,-117,-60,-118,-59,224,-17,-12,-46,-13,351,-62,-61,-65,369,-122,-66,-121,-64,-11,-48,-47,442,446,-155,-157,-68,-69,-67,-49,-156,-158,-159,-163,509,511,525,526,-160,-161,-164,-165,534,535,-162,-166,]),'FOR':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,178,-17,-140,-142,-138,178,-139,178,-106,-143,178,-46,-176,-141,-45,178,-48,-188,-186,-107,-47,-177,178,178,-187,-185,-49,-189,-175,178,-173,178,-174,178,178,178,-181,-180,-178,-183,-184,178,-182,-179,]),'UNION':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[27,27,-80,-90,-87,-78,-86,-95,-79,-7,-75,27,-74,-6,-89,-5,-1,-8,-77,27,-9,27,27,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,27,-85,-91,27,-82,-31,27,-71,-96,-131,-97,-16,-130,-33,-42,-53,27,27,27,-72,-29,-2,27,-15,27,-35,-14,-44,27,27,-127,27,-117,-60,27,-118,-59,27,-132,-98,27,27,-37,-39,-41,-100,27,-102,-105,-171,-215,-134,-17,-12,27,27,-46,27,-13,-45,27,27,27,27,27,-112,27,27,-200,-201,-236,-237,27,-260,-27,-62,-61,-128,-65,27,-122,-66,-121,-64,27,-116,-114,27,-115,-73,27,27,-101,-103,27,-214,-213,-240,-239,-104,27,-11,-92,-48,-47,27,27,-63,27,-113,-126,-28,-261,-155,-238,27,-157,-129,27,-68,-22,-69,-67,27,27,-55,27,27,27,-270,-266,27,-241,-135,-172,-49,-18,27,27,-20,-125,-154,-262,-156,-202,-203,-263,-158,27,-159,27,27,-163,27,27,-57,-56,27,-271,-265,-267,-268,-272,27,27,27,27,-264,-160,27,-161,-164,27,-165,-26,-58,-23,-269,-273,27,-24,-19,27,-162,-166,-25,-21,]),'ELSE':([170,171,173,177,188,191,192,193,307,308,323,325,327,333,429,430,431,435,439,492,520,521,523,530,531,536,537,],[-140,-142,-138,-139,-143,-46,-176,-141,-48,-188,-186,-47,-177,-187,-185,-49,-189,-175,-173,-174,-181,-180,533,-183,-184,-182,-179,]),'SUB_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,310,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'LBRACE':([1,2,3,4,5,6,8,9,12,13,14,15,17,23,27,31,32,33,34,38,40,42,43,44,45,46,47,49,50,51,54,55,56,57,58,60,61,62,63,64,65,66,74,77,79,82,83,84,85,86,88,98,99,108,109,110,111,139,154,157,158,160,162,163,165,170,171,173,174,177,180,186,188,190,191,192,193,199,209,215,217,218,219,221,228,241,246,247,277,288,291,292,293,294,295,302,306,307,308,323,324,325,327,328,332,333,338,340,343,344,353,356,363,367,373,377,416,420,423,425,426,429,430,431,435,437,439,445,448,452,453,455,456,458,461,463,464,466,481,482,483,485,486,488,491,492,493,495,502,504,507,514,515,518,520,521,523,530,531,533,536,537,],[-30,-80,-90,-87,-78,-86,-95,-79,59,-75,-32,-74,-89,-77,-124,-84,-76,-43,-88,-99,-83,-123,-81,-34,-85,-91,83,-82,89,-31,-96,-131,-97,-16,100,-33,-42,106,-53,-36,-38,-40,-15,83,-35,-44,83,83,106,106,206,-132,-98,-37,-39,-41,-100,-102,-105,-171,-215,-134,-17,302,83,-140,-142,-138,83,-139,83,-106,-143,83,-46,-176,-141,-45,-112,-200,-201,-236,-237,-260,-128,106,-54,106,-101,-103,-214,-213,-240,-239,-104,302,83,-48,-188,-186,-107,-47,-177,83,83,-187,106,-63,-113,-126,-261,-238,-129,83,83,106,-270,-266,-241,-135,-172,-185,-49,-189,-175,83,-173,106,-125,-154,-262,-202,-203,-263,83,83,83,83,-271,-265,-267,-268,-272,302,83,-174,83,83,-264,83,83,-269,-273,83,-181,-180,-178,-183,-184,83,-182,-179,]),'XOR_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,312,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'INT':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[43,43,-80,-90,-87,-78,-86,-95,-79,-7,-75,43,-74,-6,-89,-5,-1,-8,-77,43,-9,43,43,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,43,-85,-91,43,-82,-31,43,-71,-96,-131,-97,-16,-130,-33,-42,-53,43,43,43,-72,-29,-2,43,-15,43,-35,-14,-44,43,43,-127,43,-117,-60,43,-118,-59,43,-132,-98,43,43,-37,-39,-41,-100,43,-102,-105,-171,-215,-134,-17,-12,43,43,-46,43,-13,-45,43,43,43,43,43,-112,43,43,-200,-201,-236,-237,43,-260,-27,-62,-61,-128,-65,43,-122,-66,-121,-64,43,-116,-114,43,-115,-73,43,43,-101,-103,43,-214,-213,-240,-239,-104,43,-11,-92,-48,-47,43,43,-63,43,-113,-126,-28,-261,-155,-238,43,-157,-129,43,-68,-22,-69,-67,43,43,-55,43,43,43,-270,-266,43,-241,-135,-172,-49,-18,43,43,-20,-125,-154,-262,-156,-202,-203,-263,-158,43,-159,43,43,-163,43,43,-57,-56,43,-271,-265,-267,-268,-272,43,43,43,43,-264,-160,43,-161,-164,43,-165,-26,-58,-23,-269,-273,43,-24,-19,43,-162,-166,-25,-21,]),'RSHIFT_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,314,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'LBRACK':([1,2,3,4,5,6,8,9,13,14,15,17,23,31,32,33,34,38,40,43,44,45,46,49,51,54,55,56,58,60,61,64,65,66,79,88,98,99,108,109,110,111,115,116,119,120,127,130,131,138,139,141,146,147,152,154,158,187,208,210,228,252,263,267,274,277,288,289,293,294,295,344,345,346,363,379,381,382,391,393,396,401,404,405,416,420,423,448,472,473,474,476,477,481,482,483,485,486,514,515,],[-30,-80,-90,-87,-78,-86,-95,-79,-75,-32,-74,-89,-77,-84,-76,72,-88,-99,-83,-81,-34,-85,-91,-82,-31,-96,-131,-97,-130,-33,72,-36,-38,-40,-35,-127,-132,-98,-37,-39,-41,-100,250,-144,-282,-279,-278,264,-277,-280,-102,-244,-281,-276,-283,-105,290,-276,-195,-197,-128,250,-251,-250,290,-101,-103,290,421,290,-104,-126,-194,-196,-129,-145,-147,-150,-249,-246,-248,-284,290,290,-270,-266,421,-125,-146,-148,-149,-245,-247,-271,-265,-267,-268,-272,-269,-273,]),'SIGNED':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[45,45,-80,-90,-87,-78,-86,-95,-79,-7,-75,45,-74,-6,-89,-5,-1,-8,-77,45,-9,45,45,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,45,-85,-91,45,-82,-31,45,-71,-96,-131,-97,-16,-130,-33,-42,-53,45,45,45,-72,-29,-2,45,-15,45,-35,-14,-44,45,45,-127,45,-117,-60,45,-118,-59,45,-132,-98,45,45,-37,-39,-41,-100,45,-102,-105,-171,-215,-134,-17,-12,45,45,-46,45,-13,-45,45,45,45,45,45,-112,45,45,-200,-201,-236,-237,45,-260,-27,-62,-61,-128,-65,45,-122,-66,-121,-64,45,-116,-114,45,-115,-73,45,45,-101,-103,45,-214,-213,-240,-239,-104,45,-11,-92,-48,-47,45,45,-63,45,-113,-126,-28,-261,-155,-238,45,-157,-129,45,-68,-22,-69,-67,45,45,-55,45,45,45,-270,-266,45,-241,-135,-172,-49,-18,45,45,-20,-125,-154,-262,-156,-202,-203,-263,-158,45,-159,45,45,-163,45,45,-57,-56,45,-271,-265,-267,-268,-272,45,45,45,45,-264,-160,45,-161,-164,45,-165,-26,-58,-23,-269,-273,45,-24,-19,45,-162,-166,-25,-21,]),'OCTAL_LITERAL':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,127,-15,-44,127,-253,127,127,-255,127,-256,-252,-254,-257,127,127,-17,127,-140,-142,-138,127,127,-139,127,127,-106,-143,127,-46,-176,-141,127,-45,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,127,127,-186,-107,-47,127,-177,127,127,127,127,-187,127,127,127,127,-185,-49,-189,127,-175,127,-173,127,127,127,127,127,127,-174,127,127,127,127,-181,-180,-178,-183,-184,127,-182,-179,]),'CONTINUE':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,179,-17,-140,-142,-138,179,-139,179,-106,-143,179,-46,-176,-141,-45,179,-48,-188,-186,-107,-47,-177,179,179,-187,-185,-49,-189,-175,179,-173,179,-174,179,179,179,-181,-180,-178,-183,-184,179,-182,-179,]),'MUL_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,318,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'INC':([57,72,74,82,83,119,120,122,123,124,126,127,130,131,133,134,138,140,141,143,146,147,149,150,152,153,162,163,170,171,173,174,175,177,180,184,186,187,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,263,264,265,267,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,391,393,396,401,402,421,429,430,431,433,435,437,439,449,476,477,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,153,-15,-44,153,-282,-279,-253,153,153,-255,-278,267,-277,153,-256,-280,-252,-244,-254,-281,-276,-257,153,-283,153,-17,153,-140,-142,-138,153,153,-139,153,153,-106,-276,-143,153,-46,-176,-141,153,-45,153,153,153,153,153,153,153,153,153,-251,153,153,-250,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,153,153,-186,-107,-47,153,-177,153,153,153,153,-187,153,153,-249,-246,-248,-284,153,153,-185,-49,-189,153,-175,153,-173,153,-245,-247,153,153,153,153,153,-174,153,153,153,153,-181,-180,-178,-183,-184,153,-182,-179,]),'REGISTER':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,90,91,92,93,96,97,98,99,104,108,109,110,111,139,154,157,158,160,162,164,165,174,191,198,199,200,203,212,215,217,218,219,221,224,225,226,228,231,233,235,236,237,238,248,251,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,378,404,416,420,422,423,425,426,430,442,443,444,446,448,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[23,23,-80,-90,-87,-78,-86,-95,-79,-7,-75,23,-74,-6,-89,-5,-1,-8,-77,23,-9,23,23,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,23,-85,-91,23,-82,-31,23,-71,-96,-131,-97,-16,-130,-33,-42,-53,23,23,23,-72,-29,-2,23,-15,23,-35,-14,-44,23,23,-127,-117,-60,23,-118,-59,23,-132,-98,23,-37,-39,-41,-100,-102,-105,-171,-215,-134,-17,-12,23,23,-46,-13,-45,23,23,23,-200,-201,-236,-237,-260,-27,-62,-61,-128,-65,23,-122,-66,-121,-64,-73,23,-101,-103,23,-214,-213,-240,-239,-104,23,-11,-92,-48,-47,23,23,-63,-126,-28,-261,-155,-238,23,-157,-129,23,-68,-22,-69,-67,23,23,-55,23,23,-270,-266,23,-241,-135,-172,-49,-18,23,23,-20,-125,-262,-156,-202,-203,-263,-158,23,-159,23,23,-163,23,23,-57,-56,23,-271,-265,-267,-268,-272,23,23,23,23,-264,-160,23,-161,-164,23,-165,-26,-58,-23,-269,-273,23,-24,-19,23,-162,-166,-25,-21,]),'RSHIFT':([118,119,120,127,129,130,131,135,138,141,144,146,147,148,152,176,187,254,256,263,267,286,287,389,390,391,393,396,397,398,399,400,401,409,410,413,414,415,475,476,477,479,],[-258,-282,-279,-278,-299,-216,-277,-305,-280,-244,279,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-303,-304,-249,-246,-248,279,279,279,279,-284,-301,-300,-306,-308,-307,-221,-245,-247,-259,]),'SUB':([52,53,57,72,74,80,82,83,90,91,92,93,96,97,104,118,119,120,122,123,124,126,127,129,130,131,133,134,135,138,140,141,143,146,147,148,149,150,152,153,162,163,164,170,171,173,174,175,176,177,180,184,186,187,188,190,191,192,193,194,198,199,200,203,212,225,226,230,231,233,235,236,237,238,250,253,254,255,256,257,258,259,260,261,263,264,265,267,268,269,270,271,275,276,278,279,280,281,282,283,284,285,286,287,290,302,303,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,336,339,340,349,355,361,368,370,371,374,376,378,389,390,391,393,396,401,402,409,410,413,414,415,421,429,430,431,433,435,437,439,443,444,449,454,460,462,465,467,468,470,471,475,476,477,478,479,480,488,490,491,492,493,494,495,496,497,498,499,503,505,506,508,510,518,520,521,523,524,527,528,529,530,531,533,536,537,],[95,-71,-16,126,-15,-14,-44,126,-117,-60,95,-118,-59,95,234,-258,-282,-279,-253,126,126,-255,-278,261,-216,-277,126,-256,-305,-280,-252,-244,-254,-281,-276,-302,-257,126,-283,126,-17,126,-12,-140,-142,-138,126,126,-258,-139,126,126,-106,-276,-143,126,-46,-176,-141,126,-13,-45,95,95,95,-62,-61,126,-65,234,-122,-66,-121,-64,126,126,-218,126,-220,126,126,126,126,126,-251,126,126,-250,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-219,-217,126,126,-11,126,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,126,126,-186,-107,-47,126,-177,126,126,126,126,-187,126,95,95,-63,126,-155,-157,-68,-69,-67,234,-55,234,-303,-304,-249,-246,-248,-284,126,261,261,-306,-308,-307,126,-185,-49,-189,126,-175,126,-173,95,95,126,-156,-158,-159,-163,234,-57,-56,234,-221,-245,-247,126,-259,126,126,126,126,-174,126,126,126,95,95,95,95,-160,-161,-164,-165,-58,126,-181,-180,-178,95,95,-162,-166,-183,-184,126,-182,-179,]),'DEFAULT':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,182,-17,-140,-142,-138,182,-139,182,-106,-143,182,-46,-176,-141,-45,182,-48,-188,-186,-107,-47,-177,182,182,-187,-185,-49,-189,-175,182,-173,182,-174,182,182,182,-181,-180,-178,-183,-184,182,-182,-179,]),'CHAR':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[9,9,-80,-90,-87,-78,-86,-95,-79,-7,-75,9,-74,-6,-89,-5,-1,-8,-77,9,-9,9,9,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,9,-85,-91,9,-82,-31,9,-71,-96,-131,-97,-16,-130,-33,-42,-53,9,9,9,-72,-29,-2,9,-15,9,-35,-14,-44,9,9,-127,9,-117,-60,9,-118,-59,9,-132,-98,9,9,-37,-39,-41,-100,9,-102,-105,-171,-215,-134,-17,-12,9,9,-46,9,-13,-45,9,9,9,9,9,-112,9,9,-200,-201,-236,-237,9,-260,-27,-62,-61,-128,-65,9,-122,-66,-121,-64,9,-116,-114,9,-115,-73,9,9,-101,-103,9,-214,-213,-240,-239,-104,9,-11,-92,-48,-47,9,9,-63,9,-113,-126,-28,-261,-155,-238,9,-157,-129,9,-68,-22,-69,-67,9,9,-55,9,9,9,-270,-266,9,-241,-135,-172,-49,-18,9,9,-20,-125,-154,-262,-156,-202,-203,-263,-158,9,-159,9,9,-163,9,9,-57,-56,9,-271,-265,-267,-268,-272,9,9,9,9,-264,-160,9,-161,-164,9,-165,-26,-58,-23,-269,-273,9,-24,-19,9,-162,-166,-25,-21,]),'LSHIFT_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,316,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'WHILE':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,334,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,183,-17,-140,-142,-138,183,-139,183,-106,-143,183,-46,-176,-141,-45,183,-48,-188,-186,-107,-47,-177,183,183,-187,440,-185,-49,-189,-175,183,-173,183,-174,183,183,183,-181,-180,-178,-183,-184,183,-182,-179,]),'EXTERN':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,90,91,92,93,96,97,98,99,104,108,109,110,111,139,154,157,158,160,162,164,165,174,191,198,199,200,203,212,215,217,218,219,221,224,225,226,228,231,233,235,236,237,238,248,251,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,378,404,416,420,422,423,425,426,430,442,443,444,446,448,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[15,15,-80,-90,-87,-78,-86,-95,-79,-7,-75,15,-74,-6,-89,-5,-1,-8,-77,15,-9,15,15,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,15,-85,-91,15,-82,-31,15,-71,-96,-131,-97,-16,-130,-33,-42,-53,15,15,15,-72,-29,-2,15,-15,15,-35,-14,-44,15,15,-127,-117,-60,15,-118,-59,15,-132,-98,15,-37,-39,-41,-100,-102,-105,-171,-215,-134,-17,-12,15,15,-46,-13,-45,15,15,15,-200,-201,-236,-237,-260,-27,-62,-61,-128,-65,15,-122,-66,-121,-64,-73,15,-101,-103,15,-214,-213,-240,-239,-104,15,-11,-92,-48,-47,15,15,-63,-126,-28,-261,-155,-238,15,-157,-129,15,-68,-22,-69,-67,15,15,-55,15,15,-270,-266,15,-241,-135,-172,-49,-18,15,15,-20,-125,-262,-156,-202,-203,-263,-158,15,-159,15,15,-163,15,15,-57,-56,15,-271,-265,-267,-268,-272,15,15,15,15,-264,-160,15,-161,-164,15,-165,-26,-58,-23,-269,-273,15,-24,-19,15,-162,-166,-25,-21,]),'MUL':([57,72,74,82,83,118,119,120,122,123,124,126,127,130,131,133,134,135,138,140,141,143,146,147,148,149,150,152,153,162,163,170,171,173,174,175,176,177,180,184,186,187,188,190,191,192,193,194,199,230,250,253,254,255,256,257,258,259,260,261,263,264,265,267,268,269,270,271,275,276,278,279,280,281,282,283,284,285,286,287,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,389,390,391,393,396,401,402,413,414,415,421,429,430,431,433,435,437,439,449,475,476,477,478,479,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,122,-15,-44,122,-258,-282,-279,-253,122,122,-255,-278,-216,-277,122,-256,-305,-280,-252,-244,-254,-281,-276,283,-257,122,-283,122,-17,122,-140,-142,-138,122,122,-258,-139,122,122,-106,-276,-143,122,-46,-176,-141,122,-45,122,122,122,-218,122,-220,122,122,122,122,122,-251,122,122,-250,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-219,-217,122,122,122,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,122,122,-186,-107,-47,122,-177,122,122,122,122,-187,122,122,283,283,-249,-246,-248,-284,122,-306,-308,-307,122,-185,-49,-189,122,-175,122,-173,122,-221,-245,-247,122,-259,122,122,122,122,-174,122,122,122,122,-181,-180,-178,-183,-184,122,-182,-179,]),'DOT':([119,120,127,130,131,138,141,146,147,152,187,263,267,391,393,396,401,476,477,],[-282,-279,-278,266,-277,-280,-244,-281,-276,-283,-276,-251,-250,-249,-246,-248,-284,-245,-247,]),'CASE':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,184,-17,-140,-142,-138,184,-139,184,-106,-143,184,-46,-176,-141,-45,184,-48,-188,-186,-107,-47,-177,184,184,-187,-185,-49,-189,-175,184,-173,184,-174,184,184,184,-181,-180,-178,-183,-184,184,-182,-179,]),'*':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,25,26,29,31,32,34,35,36,37,40,41,43,44,45,46,49,51,54,55,57,58,60,63,64,65,66,68,69,70,71,74,79,80,81,88,98,104,108,109,110,114,158,161,162,164,191,198,208,210,211,224,228,231,233,235,236,237,238,248,274,289,303,307,325,344,345,346,351,363,368,369,370,371,374,376,378,404,430,442,446,448,451,462,465,467,468,470,471,503,505,506,508,509,510,511,525,526,528,529,534,535,],[8,-30,-80,-90,-87,-78,-86,8,-79,-7,-75,-32,-74,-6,-89,-5,-1,-8,-77,8,-9,8,-84,-76,-88,-10,8,-4,-83,-3,-81,-34,-85,-91,-82,-31,8,-131,-16,-130,-33,-53,-36,-38,-40,-72,-29,-2,8,-15,-35,-14,8,-127,-132,8,-37,-39,-41,8,8,8,-17,-12,-46,-13,-195,-197,8,-27,-128,-65,8,-122,-66,-121,-64,-73,8,8,-11,-48,-47,-126,-194,-196,-28,-129,-68,-22,-69,-67,8,-55,8,8,-49,-18,-20,-125,8,-159,-163,8,-57,-56,8,-160,-161,-164,-165,-26,-58,-23,-24,-19,-162,-166,-25,-21,]),'SWITCH':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,185,-17,-140,-142,-138,185,-139,185,-106,-143,185,-46,-176,-141,-45,185,-48,-188,-186,-107,-47,-177,185,185,-187,-185,-49,-189,-175,185,-173,185,-174,185,185,185,-181,-180,-178,-183,-184,185,-182,-179,]),'AND_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,317,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'TILDE':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,134,-15,-44,134,-253,134,134,-255,134,-256,-252,-254,-257,134,134,-17,134,-140,-142,-138,134,134,-139,134,134,-106,-143,134,-46,-176,-141,134,-45,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,134,134,-186,-107,-47,134,-177,134,134,134,134,-187,134,134,134,134,-185,-49,-189,134,-175,134,-173,134,134,134,134,134,134,-174,134,134,134,134,-181,-180,-178,-183,-184,134,-182,-179,]),':':([62,63,85,],[107,-53,202,]),'ADD_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,320,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'AND':([118,119,120,121,125,127,128,129,130,131,132,135,138,141,142,144,145,146,147,148,152,176,187,254,256,263,267,286,287,385,387,388,389,390,391,393,396,397,398,399,400,401,407,408,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,-280,-244,278,-294,-289,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-288,-290,-275,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,278,-243,-301,-300,-293,-292,-306,-308,-307,-221,-245,-247,-259,]),'DECIMAL_LITERAL':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,138,-15,-44,138,-253,138,138,-255,138,-256,-252,-254,-257,138,138,-17,138,-140,-142,-138,138,138,-139,138,138,-106,-143,138,-46,-176,-141,138,-45,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,138,138,-186,-107,-47,138,-177,138,138,138,138,-187,138,138,138,138,-185,-49,-189,138,-175,138,-173,138,138,138,138,138,138,-174,138,138,138,138,-181,-180,-178,-183,-184,138,-182,-179,]),'BITAND':([57,72,74,82,83,118,119,120,122,123,124,125,126,127,129,130,131,132,133,134,135,138,140,141,143,144,145,146,147,148,149,150,152,153,162,163,170,171,173,174,175,176,177,180,184,186,187,188,190,191,192,193,194,199,230,250,253,254,255,256,257,258,259,260,261,263,264,265,267,268,269,270,271,275,276,278,279,280,281,282,283,284,285,286,287,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,385,387,389,390,391,393,396,397,398,399,400,401,402,409,410,411,412,413,414,415,421,429,430,431,433,435,437,439,449,475,476,477,478,479,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,140,-15,-44,140,-258,-282,-279,-253,140,140,258,-255,-278,-299,-216,-277,-291,140,-256,-305,-280,-252,-244,-254,-294,-289,-281,-276,-302,-257,140,-283,140,-17,140,-140,-142,-138,140,140,-258,-139,140,140,-106,-276,-143,140,-46,-176,-141,140,-45,140,140,140,-218,140,-220,140,140,140,140,140,-251,140,140,-250,140,140,140,140,140,140,140,140,140,140,140,140,140,140,-219,-217,140,140,140,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,140,140,-186,-107,-47,140,-177,140,140,140,140,-187,140,140,258,-290,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,140,-301,-300,-293,-292,-306,-308,-307,140,-185,-49,-189,140,-175,140,-173,140,-221,-245,-247,140,-259,140,140,140,140,-174,140,140,140,140,-181,-180,-178,-183,-184,140,-182,-179,]),'MOD_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,311,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,31,32,34,35,36,37,40,41,42,43,44,45,46,48,49,50,51,54,55,56,57,58,59,60,63,64,65,66,68,69,70,71,72,73,74,79,80,81,82,83,87,88,94,95,98,99,100,104,105,107,108,109,110,112,114,117,122,123,124,126,133,134,140,143,149,150,153,158,161,162,163,164,170,171,172,173,174,175,177,180,184,186,188,190,191,192,193,194,198,199,201,202,208,210,211,213,214,217,219,223,224,228,229,230,231,232,233,234,235,236,237,238,248,250,251,253,255,257,258,259,260,261,262,264,265,266,268,269,270,271,275,276,278,279,280,281,282,283,284,285,289,290,294,296,302,303,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,341,344,345,346,349,351,352,353,356,359,363,366,368,369,370,371,372,374,376,378,402,421,429,430,431,433,435,437,439,442,446,448,449,451,453,457,458,459,462,465,467,468,470,471,478,480,488,490,491,492,493,494,495,502,503,505,506,508,509,510,511,518,520,521,523,525,526,528,529,530,531,533,534,535,536,537,],[38,-30,-80,-90,-87,-78,-86,53,-95,-79,-7,58,-75,-32,-74,-6,-89,38,-5,-1,63,-8,-77,38,-9,-124,63,38,-84,-76,-88,-10,38,-4,-83,-3,-123,-81,-34,-85,-91,63,-82,88,-31,-96,-131,-97,-16,-130,103,-33,-53,-36,-38,-40,-72,-29,-2,116,147,155,-15,-35,-14,38,-44,187,53,-127,221,221,-132,-98,103,38,239,246,-37,-39,-41,63,116,116,-253,147,147,-255,147,-256,-252,-254,-257,147,147,38,38,-17,147,-12,-140,-142,305,-138,187,147,-139,187,147,-106,-143,187,-46,-176,-141,147,-13,-45,239,246,-195,-197,38,353,221,221,-237,221,-27,-128,103,147,-65,221,38,221,-122,-66,-121,-64,-73,147,155,147,147,147,147,147,147,147,391,147,147,396,147,147,147,147,147,147,147,147,147,147,147,147,147,147,38,147,38,424,147,-11,187,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,147,147,-186,-107,-47,147,-177,187,147,147,187,-187,147,53,-126,-194,-196,147,-28,453,-261,-238,458,-129,221,-68,-22,-69,-67,221,38,-55,38,147,147,-185,-49,-189,147,-175,187,-173,-18,-20,-125,147,38,-262,502,-263,-204,-159,-163,38,-57,-56,38,147,147,147,147,187,-174,187,147,187,-264,-160,-161,-164,-165,-26,-58,-23,187,-181,-180,-178,-24,-19,-162,-166,-183,-184,187,-25,-21,-182,-179,]),'DLLIMPORT':([78,],[167,]),'TYPE_NAME':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[17,17,-80,-90,-87,-78,-86,-95,-79,-7,-75,17,-74,-6,-89,-5,-1,-8,-77,17,-9,17,17,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,17,-85,-91,17,-82,-31,17,-71,-96,-131,-97,-16,-130,-33,-42,-53,17,17,17,-72,-29,-2,17,-15,17,-35,-14,-44,17,17,-127,17,-117,-60,17,-118,-59,17,-132,-98,17,17,-37,-39,-41,-100,17,-102,-105,-171,-215,-134,-17,-12,17,17,-46,17,-13,-45,17,17,17,17,17,-112,17,17,-200,-201,-236,-237,17,-260,-27,-62,-61,-128,-65,17,-122,-66,-121,-64,17,-116,-114,17,-115,-73,17,17,-101,-103,17,-214,-213,-240,-239,-104,17,-11,-92,-48,-47,17,17,-63,17,-113,-126,-28,-261,-155,-238,17,-157,-129,17,-68,-22,-69,-67,17,17,-55,17,17,17,-270,-266,17,-241,-135,-172,-49,-18,17,17,-20,-125,-154,-262,-156,-202,-203,-263,-158,17,-159,17,17,-163,17,17,-57,-56,17,-271,-265,-267,-268,-272,17,17,17,17,-264,-160,17,-161,-164,17,-165,-26,-58,-23,-269,-273,17,-24,-19,17,-162,-166,-25,-21,]),'OR_ASSIGN':([118,119,120,127,130,131,138,141,146,147,152,176,187,254,256,263,267,286,287,391,393,396,401,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-280,-244,-281,-276,-283,315,-276,-218,-220,-251,-250,-219,-217,-249,-246,-248,-284,-221,-245,-247,-259,]),'BREAK':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,189,-17,-140,-142,-138,189,-139,189,-106,-143,189,-46,-176,-141,-45,189,-48,-188,-186,-107,-47,-177,189,189,-187,-185,-49,-189,-175,189,-173,189,-174,189,189,189,-181,-180,-178,-183,-184,189,-182,-179,]),'VOLATILE':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[46,46,-80,-90,-87,-78,-86,46,-79,-7,-75,46,-74,-6,-89,-5,-1,-8,-77,46,-9,46,46,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,46,-85,-91,46,-82,-31,46,-71,46,-131,-97,-16,-130,-33,-42,-53,46,46,46,-72,-29,-2,46,-15,46,-35,-14,-44,46,46,-127,46,-117,-60,46,-118,-59,46,-132,-98,46,46,-37,-39,-41,-100,46,-102,-105,-171,-215,-134,-17,-12,46,46,-46,46,-13,-45,46,46,46,46,46,-112,46,46,-200,-201,-236,-237,46,-260,-27,-62,-61,-128,-65,46,-122,-66,-121,-64,46,-116,-114,46,-115,-73,46,46,-101,-103,46,-214,-213,-240,-239,-104,46,-11,-92,-48,-47,46,46,-63,46,-113,-126,-28,-261,-155,-238,46,-157,-129,46,-68,-22,-69,-67,46,46,-55,46,46,46,-270,-266,46,-241,-135,-172,-49,-18,46,46,-20,-125,-154,-262,-156,-202,-203,-263,-158,46,-159,46,46,-163,46,46,-57,-56,46,-271,-265,-267,-268,-272,46,46,46,46,-264,-160,46,-161,-164,46,-165,-26,-58,-23,-269,-273,46,-24,-19,46,-162,-166,-25,-21,]),'PUBLIC':([106,],[245,]),'DO':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,190,-17,-140,-142,-138,190,-139,190,-106,-143,190,-46,-176,-141,-45,190,-48,-188,-186,-107,-47,-177,190,190,-187,-185,-49,-189,-175,190,-173,190,-174,190,190,190,-181,-180,-178,-183,-184,190,-182,-179,]),'CONST':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[3,3,-80,-90,-87,-78,-86,3,-79,-7,-75,3,-74,-6,-89,-5,-1,-8,-77,3,-9,3,3,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,3,-85,-91,3,-82,-31,3,-71,3,-131,-97,-16,-130,-33,-42,-53,3,3,3,-72,-29,-2,3,-15,3,-35,-14,-44,3,3,-127,3,-117,-60,3,-118,-59,3,-132,-98,3,3,-37,-39,-41,-100,3,-102,-105,-171,-215,-134,-17,-12,3,3,-46,3,-13,-45,3,3,3,3,3,-112,3,3,-200,-201,-236,-237,3,-260,-27,-62,-61,-128,-65,3,-122,-66,-121,-64,3,-116,-114,3,-115,-73,3,3,-101,-103,3,-214,-213,-240,-239,-104,3,-11,-92,-48,-47,3,3,-63,3,-113,-126,-28,-261,-155,-238,3,-157,-129,3,-68,-22,-69,-67,3,3,-55,3,3,3,-270,-266,3,-241,-135,-172,-49,-18,3,3,-20,-125,-154,-262,-156,-202,-203,-263,-158,3,-159,3,3,-163,3,3,-57,-56,3,-271,-265,-267,-268,-272,3,3,3,3,-264,-160,3,-161,-164,3,-165,-26,-58,-23,-269,-273,3,-24,-19,3,-162,-166,-25,-21,]),'BITXOR':([118,119,120,121,125,127,129,130,131,132,135,138,141,144,145,146,147,148,152,176,187,254,256,263,267,286,287,385,387,388,389,390,391,393,396,397,398,399,400,401,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,253,-287,-278,-299,-216,-277,-291,-305,-280,-244,-294,-289,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-288,-290,253,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-301,-300,-293,-292,-306,-308,-307,-221,-245,-247,-259,]),'EQUAL':([118,119,120,127,129,130,131,132,135,138,141,144,145,146,147,148,152,176,187,254,256,263,267,286,287,387,389,390,391,393,396,397,398,399,400,401,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,-278,-299,-216,-277,-291,-305,-280,-244,-294,282,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,282,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-301,-300,-293,-292,-306,-308,-307,-221,-245,-247,-259,]),'IF':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,196,-17,-140,-142,-138,196,-139,196,-106,-143,196,-46,-176,-141,-45,196,-48,-188,-186,-107,-47,-177,196,196,-187,-185,-49,-189,-175,196,-173,196,-174,196,196,196,-181,-180,-178,-183,-184,196,-182,-179,]),'DIV':([118,119,120,127,130,131,135,138,141,146,147,148,152,176,187,254,256,263,267,286,287,389,390,391,393,396,401,413,414,415,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-305,-280,-244,-281,-276,285,-283,-258,-276,-218,-220,-251,-250,-219,-217,285,285,-249,-246,-248,-284,-306,-308,-307,-221,-245,-247,-259,]),'GOTO':([57,74,82,83,162,170,171,173,174,177,180,186,188,190,191,192,193,199,306,307,308,323,324,325,327,328,332,333,429,430,431,435,437,439,491,492,493,495,518,520,521,523,530,531,533,536,537,],[-16,-15,-44,172,-17,-140,-142,-138,172,-139,172,-106,-143,172,-46,-176,-141,-45,172,-48,-188,-186,-107,-47,-177,172,172,-187,-185,-49,-189,-175,172,-173,172,-174,172,172,172,-181,-180,-178,-183,-184,172,-182,-179,]),'LE':([118,119,120,127,129,130,131,132,135,138,141,144,146,147,148,152,176,187,254,256,263,267,286,287,389,390,391,393,396,397,398,399,400,401,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,-278,-299,-216,-277,268,-305,-280,-244,-294,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-301,-300,268,268,-306,-308,-307,-221,-245,-247,-259,]),'SEMI':([1,2,3,4,5,6,8,9,10,13,14,15,17,23,31,32,33,34,36,38,40,43,44,45,46,49,51,54,55,56,57,58,60,61,64,65,66,74,75,76,77,79,81,82,83,88,98,99,108,109,110,111,113,115,116,118,119,120,121,125,127,128,129,130,131,132,135,136,138,139,141,142,144,145,146,147,148,151,152,154,157,158,160,162,169,170,171,173,174,175,176,177,179,180,181,186,187,188,189,190,191,192,193,195,197,199,215,216,217,218,219,221,222,228,252,254,256,263,267,277,286,287,288,291,292,293,294,295,299,300,301,305,306,307,308,309,322,323,324,325,327,328,332,333,344,347,348,350,353,354,356,362,363,379,381,382,385,387,388,389,390,391,393,396,397,398,399,400,401,407,408,409,410,411,412,413,414,415,416,420,423,425,426,429,430,431,432,433,434,435,437,439,448,450,453,455,456,458,472,473,474,475,476,477,479,481,482,483,485,486,489,491,492,493,495,500,501,502,513,514,515,517,518,520,521,523,530,531,532,533,536,537,],[-30,-80,-90,-87,-78,-86,-95,-79,57,-75,-32,-74,-89,-77,-84,-76,-43,-88,74,-99,-83,-81,-34,-85,-91,-82,-31,-96,-131,-97,-16,-130,-33,-42,-36,-38,-40,-15,-51,162,-110,-35,74,-44,192,-127,-132,-98,-37,-39,-41,-100,-50,-109,-144,-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,-169,-280,-102,-244,-209,-294,-289,-281,-276,-302,-133,-283,-105,-171,-215,-134,-17,-110,-140,-142,-138,192,308,-258,-139,323,192,327,-106,-276,-143,333,192,-46,-176,-141,-211,-190,-45,-200,355,-201,-236,-237,-260,361,-128,-108,-218,-220,-251,-250,-101,-219,-217,-103,-214,-213,-240,-239,-104,-52,-111,-151,429,192,-48,-188,431,192,-186,-107,-47,-177,192,192,-187,-126,-198,-233,452,-261,454,-238,460,-129,-145,-147,-150,-288,-290,-275,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-210,-243,-301,-300,-293,-292,-306,-308,-307,-270,-266,-241,-135,-172,-185,-49,-189,-191,192,-212,-175,192,-173,-125,-234,-262,-202,-203,-263,-146,-148,-149,-221,-245,-247,-259,-271,-265,-267,-268,-272,-152,192,-174,192,192,-235,-199,-264,-170,-269,-273,-153,192,-181,-180,-178,-183,-184,536,192,-182,-179,]),')':([166,167,168,239,240,337,],[304,-93,-94,-70,374,443,]),'QUESTION':([118,119,120,121,125,127,128,129,130,131,132,135,136,138,141,142,144,145,146,147,148,152,176,187,254,256,263,267,286,287,385,387,388,389,390,391,393,396,397,398,399,400,401,407,408,409,410,411,412,413,414,415,475,476,477,479,],[-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,275,-280,-244,-209,-294,-289,-281,-276,-302,-283,-258,-276,-218,-220,-251,-250,-219,-217,-288,-290,-275,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-210,-243,-301,-300,-293,-292,-306,-308,-307,-221,-245,-247,-259,]),'PRIVATE':([106,],[243,]),'LT':([48,52,53,118,119,120,127,129,130,131,132,135,138,141,144,146,147,148,152,176,187,246,254,256,263,267,286,287,338,389,390,391,393,396,397,398,399,400,401,409,410,411,412,413,414,415,443,475,476,477,479,],[87,87,-71,-258,-282,-279,-278,-299,-216,-277,270,-305,-280,-244,-294,-281,-276,-302,-283,-258,-276,-54,-218,-220,-251,-250,-219,-217,87,-303,-304,-249,-246,-248,-297,-298,-295,-296,-284,-301,-300,270,270,-306,-308,-307,87,-221,-245,-247,-259,]),'COMMA':([1,2,3,4,5,6,8,9,13,14,15,17,23,31,32,33,34,38,40,43,44,45,46,49,51,54,55,56,58,60,61,64,65,66,79,88,98,99,101,102,103,108,109,110,111,118,119,120,121,125,127,128,129,130,131,132,135,136,138,139,141,142,144,145,146,147,148,151,152,154,155,157,158,159,160,176,181,187,195,197,217,219,227,228,254,256,263,267,272,277,286,287,288,291,292,293,294,295,301,309,344,347,348,350,353,356,363,364,365,384,385,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,406,407,408,409,410,411,412,413,414,415,416,420,423,424,426,427,428,432,434,436,438,441,448,450,453,458,475,476,477,479,481,482,483,485,486,489,500,501,502,512,513,514,515,516,517,519,522,],[-30,-80,-90,-87,-78,-86,-95,-79,-75,-32,-74,-89,-77,-84,-76,-43,-88,-99,-83,-81,-34,-85,-91,-82,-31,-96,-131,-97,-130,-33,-42,-36,-38,-40,-35,-127,-132,-98,-167,229,-207,-37,-39,-41,-100,-258,-282,-279,-274,-287,-278,-242,-299,-216,-277,-291,-305,-169,-280,-102,-244,-209,-294,-289,-281,-276,-302,-133,-283,-105,-136,-171,-215,296,297,-258,326,-276,-211,-190,358,-237,229,-128,-218,-220,-251,-250,326,-101,-219,-217,-103,-214,-213,-240,-239,-104,-151,326,-126,-198,-233,451,-261,-238,-129,-168,-208,296,-288,-290,-275,-303,-304,-249,326,-246,-285,478,-248,-297,-298,-295,-296,-284,326,-210,-243,-301,-300,-293,-292,-306,-308,-307,-270,-266,-241,-137,-172,-192,488,-191,-212,326,326,326,-125,-234,-262,-263,-221,-245,-247,-259,-271,-265,-267,-268,-272,-152,-235,-199,-264,-286,-170,-269,-273,-193,-153,326,326,]),'LP':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,18,19,20,22,23,25,26,29,31,32,33,34,35,36,37,38,40,41,43,44,45,46,49,51,54,55,56,57,58,60,61,63,64,65,66,68,69,70,71,72,74,79,80,81,82,83,88,94,95,98,99,104,108,109,110,111,114,115,116,117,119,120,122,123,124,126,127,130,131,133,134,138,139,140,141,143,146,147,149,150,152,153,154,158,161,162,163,164,170,171,173,174,175,177,178,180,183,184,185,186,187,188,190,191,192,193,194,196,198,199,208,210,211,213,224,228,230,231,232,233,234,235,236,237,238,248,250,252,253,255,257,258,259,260,261,263,264,265,267,268,269,270,271,274,275,276,277,278,279,280,281,282,283,284,285,288,289,290,293,294,295,302,303,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,344,345,346,349,351,359,363,368,369,370,371,374,376,378,379,381,382,391,393,396,401,402,404,405,416,420,421,423,429,430,431,433,435,437,439,440,442,446,448,449,451,462,465,467,468,470,471,472,473,474,476,477,478,480,481,482,483,485,486,488,490,491,492,493,494,495,503,505,506,508,509,510,511,514,515,518,520,521,523,525,526,528,529,530,531,533,534,535,536,537,],[25,-30,-80,-90,-87,-78,-86,-95,-79,-7,-75,-32,-74,-6,-89,25,-5,-1,-8,-77,25,-9,25,-84,-76,73,-88,-10,25,-4,-99,-83,-3,-81,-34,-85,-91,-82,-31,-96,-131,-97,-16,-130,-33,73,-53,-36,-38,-40,-72,-29,-2,114,133,-15,-35,-14,25,-44,194,-127,220,220,-132,-98,25,-37,-39,-41,-100,114,251,-144,114,-282,-279,-253,255,257,-255,-278,265,-277,194,-256,-280,-102,-252,-244,-254,-281,-276,-257,133,-283,255,-105,289,25,-17,194,-12,-140,-142,-138,194,194,-139,322,194,329,133,331,-106,-276,-143,194,-46,-176,-141,194,335,-13,-45,-195,-197,25,220,-27,-128,133,-65,220,25,220,-122,-66,-121,-64,-73,133,251,133,194,194,133,133,133,133,-251,194,194,-250,133,133,133,133,404,194,133,-101,133,133,133,133,133,133,133,133,-103,289,133,422,289,-104,194,-11,194,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,194,194,-186,-107,-47,194,-177,194,194,194,194,-187,194,-126,-194,-196,133,-28,220,-129,-68,-22,-69,-67,25,-55,25,-145,-147,-150,-249,-246,-248,-284,133,404,404,-270,-266,133,422,-185,-49,-189,194,-175,194,-173,494,-18,-20,-125,133,25,-159,-163,25,-57,-56,25,-146,-148,-149,-245,-247,194,133,-271,-265,-267,-268,-272,194,194,194,-174,194,194,194,-160,-161,-164,-165,-26,-58,-23,-269,-273,194,-181,-180,-178,-24,-19,-162,-166,-183,-184,194,-25,-21,-182,-179,]),'CLASS':([0,11,16,19,20,22,26,29,35,37,41,57,63,68,69,70,74,80,162,164,191,198,224,248,303,307,325,351,369,430,442,446,509,511,525,526,534,535,],[28,-7,-6,-5,-1,-8,-9,28,-10,-4,-3,-16,-53,-72,-29,-2,-15,-14,-17,-12,-46,-13,-27,-73,-11,-48,-47,-28,-22,-49,-18,-20,-26,-23,-24,-19,-25,-21,]),'TYPEDEF':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,26,29,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,74,77,79,80,82,83,84,88,90,91,92,93,96,97,98,99,104,108,109,110,111,139,154,157,158,160,162,164,165,174,191,198,199,200,203,212,215,217,218,219,221,224,225,226,228,231,233,235,236,237,238,248,277,288,291,292,293,294,295,303,307,325,336,339,340,344,351,353,355,356,361,363,367,368,369,370,371,373,374,376,378,416,420,423,425,426,430,442,443,444,446,448,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[30,-30,-80,-90,-87,-78,-86,-95,-79,-7,-75,-32,-74,-6,-89,-5,-1,-8,-77,-9,30,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,-34,-85,-91,30,-82,-31,30,-71,-96,-131,-97,-16,-130,-33,-42,-53,-36,-38,-40,-72,-29,-2,-15,30,-35,-14,-44,30,30,-127,-117,-60,30,-118,-59,30,-132,-98,30,-37,-39,-41,-100,-102,-105,-171,-215,-134,-17,-12,30,30,-46,-13,-45,30,30,30,-200,-201,-236,-237,-260,-27,-62,-61,-128,-65,30,-122,-66,-121,-64,-73,-101,-103,-214,-213,-240,-239,-104,-11,-48,-47,30,30,-63,-126,-28,-261,-155,-238,-157,-129,30,-68,-22,-69,-67,30,30,-55,30,-270,-266,-241,-135,-172,-49,-18,30,30,-20,-125,-262,-156,-202,-203,-263,-158,30,-159,30,30,-163,30,30,-57,-56,30,-271,-265,-267,-268,-272,30,30,30,30,-264,-160,30,-161,-164,30,-165,-26,-58,-23,-269,-273,30,-24,-19,30,-162,-166,-25,-21,]),'ENUM':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[12,12,-80,-90,-87,-78,-86,-95,-79,-7,-75,12,-74,-6,-89,-5,-1,-8,-77,12,-9,12,12,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,12,-85,-91,12,-82,-31,12,-71,-96,-131,-97,-16,-130,-33,-42,-53,12,12,12,-72,-29,-2,12,-15,12,-35,-14,-44,12,12,-127,12,-117,-60,12,-118,-59,12,-132,-98,12,12,-37,-39,-41,-100,12,-102,-105,-171,-215,-134,-17,-12,12,12,-46,12,-13,-45,12,12,12,12,12,-112,12,12,-200,-201,-236,-237,12,-260,-27,-62,-61,-128,-65,12,-122,-66,-121,-64,12,-116,-114,12,-115,-73,12,12,-101,-103,12,-214,-213,-240,-239,-104,12,-11,-92,-48,-47,12,12,-63,12,-113,-126,-28,-261,-155,-238,12,-157,-129,12,-68,-22,-69,-67,12,12,-55,12,12,12,-270,-266,12,-241,-135,-172,-49,-18,12,12,-20,-125,-154,-262,-156,-202,-203,-263,-158,12,-159,12,12,-163,12,12,-57,-56,12,-271,-265,-267,-268,-272,12,12,12,12,-264,-160,12,-161,-164,12,-165,-26,-58,-23,-269,-273,12,-24,-19,12,-162,-166,-25,-21,]),'PROTOCOL':([0,11,16,19,20,22,26,29,35,37,41,57,63,68,69,70,74,80,162,164,191,198,224,248,303,307,325,351,369,430,442,446,509,511,525,526,534,535,],[7,-7,-6,-5,-1,-8,-9,7,-10,-4,-3,-16,-53,-72,-29,-2,-15,-14,-17,-12,-46,-13,-27,-73,-11,-48,-47,-28,-22,-49,-18,-20,-26,-23,-24,-19,-25,-21,]),'AUTO':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,90,91,92,93,96,97,98,99,104,108,109,110,111,139,154,157,158,160,162,164,165,174,191,198,199,200,203,212,215,217,218,219,221,224,225,226,228,231,233,235,236,237,238,248,251,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,378,404,416,420,422,423,425,426,430,442,443,444,446,448,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[32,32,-80,-90,-87,-78,-86,-95,-79,-7,-75,32,-74,-6,-89,-5,-1,-8,-77,32,-9,32,32,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,32,-85,-91,32,-82,-31,32,-71,-96,-131,-97,-16,-130,-33,-42,-53,32,32,32,-72,-29,-2,32,-15,32,-35,-14,-44,32,32,-127,-117,-60,32,-118,-59,32,-132,-98,32,-37,-39,-41,-100,-102,-105,-171,-215,-134,-17,-12,32,32,-46,-13,-45,32,32,32,-200,-201,-236,-237,-260,-27,-62,-61,-128,-65,32,-122,-66,-121,-64,-73,32,-101,-103,32,-214,-213,-240,-239,-104,32,-11,-92,-48,-47,32,32,-63,-126,-28,-261,-155,-238,32,-157,-129,32,-68,-22,-69,-67,32,32,-55,32,32,-270,-266,32,-241,-135,-172,-49,-18,32,32,-20,-125,-262,-156,-202,-203,-263,-158,32,-159,32,32,-163,32,32,-57,-56,32,-271,-265,-267,-268,-272,32,32,32,32,-264,-160,32,-161,-164,32,-165,-26,-58,-23,-269,-273,32,-24,-19,32,-162,-166,-25,-21,]),'BANG':([57,72,74,82,83,122,123,124,126,133,134,140,143,149,150,153,162,163,170,171,173,174,175,177,180,184,186,188,190,191,192,193,194,199,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,349,402,421,429,430,431,433,435,437,439,449,478,480,488,490,491,492,493,494,495,518,520,521,523,530,531,533,536,537,],[-16,149,-15,-44,149,-253,149,149,-255,149,-256,-252,-254,-257,149,149,-17,149,-140,-142,-138,149,149,-139,149,149,-106,-143,149,-46,-176,-141,149,-45,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,149,149,-186,-107,-47,149,-177,149,149,149,149,-187,149,149,149,149,-185,-49,-189,149,-175,149,-173,149,149,149,149,149,149,-174,149,149,149,149,-181,-180,-178,-183,-184,149,-182,-179,]),'DLLEXPORT':([78,],[168,]),'STRUCT':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[42,42,-80,-90,-87,-78,-86,-95,-79,-7,-75,42,-74,-6,-89,-5,-1,-8,-77,42,-9,42,42,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,42,-85,-91,42,-82,-31,42,-71,-96,-131,-97,-16,-130,-33,-42,-53,42,42,42,-72,-29,-2,42,-15,42,-35,-14,-44,42,42,-127,42,-117,-60,42,-118,-59,42,-132,-98,42,42,-37,-39,-41,-100,42,-102,-105,-171,-215,-134,-17,-12,42,42,-46,42,-13,-45,42,42,42,42,42,-112,42,42,-200,-201,-236,-237,42,-260,-27,-62,-61,-128,-65,42,-122,-66,-121,-64,42,-116,-114,42,-115,-73,42,42,-101,-103,42,-214,-213,-240,-239,-104,42,-11,-92,-48,-47,42,42,-63,42,-113,-126,-28,-261,-155,-238,42,-157,-129,42,-68,-22,-69,-67,42,42,-55,42,42,42,-270,-266,42,-241,-135,-172,-49,-18,42,42,-20,-125,-154,-262,-156,-202,-203,-263,-158,42,-159,42,42,-163,42,42,-57,-56,42,-271,-265,-267,-268,-272,42,42,42,42,-264,-160,42,-161,-164,42,-165,-26,-58,-23,-269,-273,42,-24,-19,42,-162,-166,-25,-21,]),'FLOAT':([0,1,2,3,4,5,6,8,9,11,13,14,15,16,17,19,20,22,23,24,26,29,30,31,32,33,34,35,37,38,40,41,43,44,45,46,47,49,51,52,53,54,55,56,57,58,60,61,63,64,65,66,68,69,70,73,74,77,79,80,82,83,84,88,89,90,91,92,93,96,97,98,99,104,106,108,109,110,111,133,139,154,157,158,160,162,164,165,174,191,194,198,199,200,203,206,207,208,209,210,212,215,217,218,219,220,221,224,225,226,228,231,233,235,236,237,238,241,242,243,244,245,248,251,257,277,288,289,291,292,293,294,295,298,303,304,307,325,336,339,340,342,343,344,351,353,355,356,358,361,363,367,368,369,370,371,373,374,376,377,378,404,416,420,422,423,425,426,430,442,443,444,446,448,452,453,454,455,456,458,460,461,462,463,464,465,466,467,468,470,471,481,482,483,485,486,496,497,498,499,502,503,504,505,506,507,508,509,510,511,514,515,524,525,526,527,528,529,534,535,],[40,40,-80,-90,-87,-78,-86,-95,-79,-7,-75,40,-74,-6,-89,-5,-1,-8,-77,40,-9,40,40,-84,-76,-43,-88,-10,-4,-99,-83,-3,-81,40,-85,-91,40,-82,-31,40,-71,-96,-131,-97,-16,-130,-33,-42,-53,40,40,40,-72,-29,-2,40,-15,40,-35,-14,-44,40,40,-127,40,-117,-60,40,-118,-59,40,-132,-98,40,40,-37,-39,-41,-100,40,-102,-105,-171,-215,-134,-17,-12,40,40,-46,40,-13,-45,40,40,40,40,40,-112,40,40,-200,-201,-236,-237,40,-260,-27,-62,-61,-128,-65,40,-122,-66,-121,-64,40,-116,-114,40,-115,-73,40,40,-101,-103,40,-214,-213,-240,-239,-104,40,-11,-92,-48,-47,40,40,-63,40,-113,-126,-28,-261,-155,-238,40,-157,-129,40,-68,-22,-69,-67,40,40,-55,40,40,40,-270,-266,40,-241,-135,-172,-49,-18,40,40,-20,-125,-154,-262,-156,-202,-203,-263,-158,40,-159,40,40,-163,40,40,-57,-56,40,-271,-265,-267,-268,-272,40,40,40,40,-264,-160,40,-161,-164,40,-165,-26,-58,-23,-269,-273,40,-24,-19,40,-162,-166,-25,-21,]),'ADD':([52,53,57,72,74,80,82,83,90,91,92,93,96,97,104,118,119,120,122,123,124,126,127,129,130,131,133,134,135,138,140,141,143,146,147,148,149,150,152,153,162,163,164,170,171,173,174,175,176,177,180,184,186,187,188,190,191,192,193,194,198,199,200,203,212,225,226,230,231,233,235,236,237,238,250,253,254,255,256,257,258,259,260,261,263,264,265,267,268,269,270,271,275,276,278,279,280,281,282,283,284,285,286,287,290,302,303,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,335,336,339,340,349,355,361,368,370,371,374,376,378,389,390,391,393,396,401,402,409,410,413,414,415,421,429,430,431,433,435,437,439,443,444,449,454,460,462,465,467,468,470,471,475,476,477,478,479,480,488,490,491,492,493,494,495,496,497,498,499,503,505,506,508,510,518,520,521,523,524,527,528,529,530,531,533,536,537,],[94,-71,-16,143,-15,-14,-44,143,-117,-60,94,-118,-59,94,232,-258,-282,-279,-253,143,143,-255,-278,260,-216,-277,143,-256,-305,-280,-252,-244,-254,-281,-276,-302,-257,143,-283,143,-17,143,-12,-140,-142,-138,143,143,-258,-139,143,143,-106,-276,-143,143,-46,-176,-141,143,-13,-45,94,94,94,-62,-61,143,-65,232,-122,-66,-121,-64,143,143,-218,143,-220,143,143,143,143,143,-251,143,143,-250,143,143,143,143,143,143,143,143,143,143,143,143,143,143,-219,-217,143,143,-11,143,-48,-188,-227,-225,-231,-222,-229,-232,-228,-230,-223,-224,-226,143,143,-186,-107,-47,143,-177,143,143,143,143,-187,143,94,94,-63,143,-155,-157,-68,-69,-67,232,-55,232,-303,-304,-249,-246,-248,-284,143,260,260,-306,-308,-307,143,-185,-49,-189,143,-175,143,-173,94,94,143,-156,-158,-159,-163,232,-57,-56,232,-221,-245,-247,143,-259,143,143,143,143,-174,143,143,143,94,94,94,94,-160,-161,-164,-165,-58,143,-181,-180,-178,94,94,-162,-166,-183,-184,143,-182,-179,]),'MOD':([118,119,120,127,130,131,135,138,141,146,147,148,152,176,187,254,256,263,267,286,287,389,390,391,393,396,401,413,414,415,475,476,477,479,],[-258,-282,-279,-278,-216,-277,-305,-280,-244,-281,-276,284,-283,-258,-276,-218,-220,-251,-250,-219,-217,284,284,-249,-246,-248,-284,-306,-308,-307,-221,-245,-247,-259,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([83,174,180,190,306,322,328,332,433,437,491,493,495,518,533,],[170,170,170,170,170,433,170,170,490,170,170,170,170,170,170,]),'struct_or_union_specifier':([0,1,14,24,29,30,44,47,52,64,65,66,73,77,83,84,89,92,97,104,106,133,165,174,194,200,203,206,207,208,210,212,220,233,241,244,251,257,289,298,336,339,342,358,367,373,374,377,378,404,422,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'instance_method_definition':([104,233,374,378,467,471,],[235,235,235,235,235,235,]),'init_declarator_list':([36,81,],[76,76,]),'pointer':([0,8,25,29,36,54,71,81,104,114,158,161,211,233,274,289,374,378,404,451,467,471,],[18,56,18,18,18,99,117,18,18,117,294,18,18,18,405,294,18,18,405,18,18,18,]),'declspec_type':([78,],[166,]),'inclusive_or_expression':([72,83,133,163,174,175,180,184,190,194,230,250,255,257,264,265,275,276,278,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,408,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'category_implementation':([0,29,],[22,22,]),'protocol_declaration':([0,29,],[26,26,]),'enumerator':([59,100,229,],[101,101,364,]),'instance_method_declaration':([52,92,97,200,203,212,336,339,443,444,496,497,498,499,524,527,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'class_declaration_list':([0,29,],[35,35,]),'method_definition':([104,233,374,378,467,471,],[236,370,236,236,370,370,]),'protocol_list':([87,],[204,]),'parameter_list':([73,251,289,358,404,422,],[160,160,160,160,160,160,]),'labeled_statement':([83,174,180,190,306,328,332,437,491,493,495,518,533,],[173,173,173,173,173,173,173,173,173,173,173,173,173,]),'declaration_list':([47,77,83,367,373,461,464,],[84,165,174,463,466,504,507,]),'init_declarator':([36,81,161,],[75,75,299,]),'direct_abstract_declarator':([158,274,289,294,404,405,],[293,293,293,423,293,423,]),'type_declarator':([71,114,],[113,249,]),'unary_expression':([72,83,123,124,133,150,153,163,174,175,180,184,190,194,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,321,322,326,328,329,331,332,335,349,402,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[118,176,254,256,176,118,287,176,176,176,176,118,176,176,118,118,118,176,176,118,118,118,118,176,176,118,118,118,118,176,118,118,118,118,118,118,118,118,118,118,176,176,176,176,176,176,176,176,176,176,118,118,118,176,176,118,176,118,176,176,176,176,176,176,176,176,]),'initializer':([163,302,488,],[300,427,516,]),'category_interface':([0,29,],[11,11,]),'abstract_declarator':([158,274,289,404,],[291,403,418,418,]),'class_method_declaration':([52,92,97,200,203,212,336,339,443,444,496,497,498,499,524,527,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'type_specifier':([0,1,14,24,29,30,44,47,52,64,65,66,73,77,83,84,89,92,97,104,106,133,165,174,194,200,203,206,207,208,210,212,220,233,241,244,251,257,289,298,336,339,342,358,367,373,374,377,378,404,422,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[14,14,14,65,14,14,14,14,14,14,14,14,14,14,14,14,208,14,14,14,208,208,14,14,208,14,14,208,208,208,208,14,208,14,208,208,14,208,14,14,14,14,208,14,14,14,14,208,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'compound_statement':([47,77,83,84,165,174,180,190,306,328,332,367,373,437,461,463,464,466,491,493,495,504,507,518,533,],[80,164,177,198,303,177,177,177,177,177,177,462,465,177,503,505,506,508,177,177,177,528,529,177,177,]),'iteration_statement':([83,174,180,190,306,328,332,437,491,493,495,518,533,],[171,171,171,171,171,171,171,171,171,171,171,171,171,]),'visibility_specification':([106,],[244,]),'direct_declarator':([0,18,25,29,36,81,104,158,161,211,233,289,294,374,378,451,467,471,],[33,61,33,33,33,33,33,33,33,33,33,33,61,33,33,33,33,33,]),'translation_unit':([0,],[29,]),'multiplicative_expression':([72,83,133,163,174,175,180,184,190,194,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,389,390,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,]),'declarator':([0,25,29,36,81,104,158,161,211,233,289,374,378,451,467,471,],[47,67,47,77,169,47,292,169,348,47,67,47,47,348,47,47,]),'argument_expression_list':([265,],[395,]),'superclass_name':([107,202,],[247,338,]),'logical_and_expression':([72,83,133,163,174,175,180,184,190,194,230,250,255,257,264,265,275,276,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,407,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'shift_expression':([72,83,133,163,174,175,180,184,190,194,230,250,253,255,257,258,259,264,265,268,269,270,271,275,276,278,281,282,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,397,398,399,400,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,]),'struct_declarator':([211,451,],[347,501,]),'unary_selector':([94,95,214,223,232,234,366,372,],[215,215,215,215,215,215,215,215,]),'method_selector':([94,95,214,223,232,234,366,372,],[216,222,354,362,367,373,461,464,]),'type_qualifier':([0,1,8,14,24,29,30,44,47,52,54,64,65,66,73,77,83,84,89,92,97,104,106,133,165,174,194,200,203,206,207,208,210,212,220,233,241,244,251,257,289,298,336,339,342,358,367,373,374,377,378,404,422,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[44,44,55,44,66,44,44,44,44,44,98,44,44,44,44,44,44,44,210,44,44,44,210,210,44,44,210,44,44,210,210,210,210,44,210,44,210,210,44,210,44,44,44,44,210,44,44,44,44,210,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'method_type':([94,95,213,232,234,359,],[214,223,352,366,372,457,]),'assignment_operator':([176,],[321,]),'statement_list':([83,174,],[180,306,]),'expression':([83,133,174,175,180,190,194,255,257,264,275,306,322,328,329,331,332,335,433,437,490,491,493,494,495,518,533,],[181,272,181,309,181,181,272,272,272,392,406,181,181,181,436,438,181,441,181,181,519,181,181,522,181,181,181,]),'storage_class_specifier':([0,1,14,24,29,30,44,47,52,64,65,66,73,77,83,84,92,97,104,165,174,200,203,212,233,251,289,298,336,339,358,367,373,374,378,404,422,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[1,1,1,64,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'instance_variables':([62,85,86,241,247,338,377,445,],[104,200,203,375,378,444,469,499,]),'enumerator_list':([59,100,],[102,227,]),'class_name':([21,28,48,112,],[62,68,85,248,]),'exclusive_or_expression':([72,83,133,163,174,175,180,184,190,194,230,250,255,257,259,264,265,275,276,278,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,388,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'class_implementation':([0,29,],[16,16,]),'additive_expression':([72,83,133,163,174,175,180,184,190,194,230,250,253,255,257,258,259,264,265,268,269,270,271,275,276,278,279,280,281,282,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,409,410,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'external_declaration':([0,29,],[20,70,]),'protocol_name':([7,87,341,],[52,205,447,]),'type_name':([133,194,220,257,],[273,273,360,386,]),'method_declaration':([52,92,97,200,203,212,336,339,443,444,496,497,498,499,524,527,],[91,91,225,91,91,225,225,225,91,91,91,225,225,91,225,225,]),'declspec':([0,1,14,29,30,44,47,52,64,65,66,73,77,83,84,92,97,104,165,174,200,203,212,233,251,289,298,336,339,358,367,373,374,378,404,422,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'protocol_reference_list':([48,52,338,443,],[86,92,445,496,]),'relational_expression':([72,83,133,163,174,175,180,184,190,194,230,250,253,255,257,258,259,264,265,275,276,278,281,282,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,411,412,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'statement':([83,174,180,190,306,328,332,437,491,493,495,518,533,],[186,186,324,334,324,435,439,492,520,521,523,530,537,]),'cast_expression':([72,83,133,150,163,174,175,180,184,190,194,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,321,322,326,328,329,331,332,335,349,402,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[135,135,135,286,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,413,414,415,135,135,135,135,135,135,135,135,135,135,135,135,479,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'struct_declarator_list':([211,],[350,]),'constant_expression':([72,184,230,250,290,349,421,449,],[137,330,365,380,419,450,484,500,]),'parameter_declaration':([73,251,289,298,358,404,422,],[157,157,157,426,157,157,157,]),'selector':([94,95,214,217,223,232,234,366,372,],[218,218,218,357,218,218,218,218,218,]),'primary_expression':([72,83,123,124,133,150,153,163,174,175,180,184,190,194,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,321,322,326,328,329,331,332,335,349,402,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'declaration':([0,29,47,52,77,83,84,92,97,104,165,174,200,203,212,233,336,339,367,373,374,378,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[37,37,82,96,82,82,199,96,226,231,199,199,96,96,226,368,226,226,82,82,231,231,96,96,82,199,82,199,368,368,96,226,226,96,199,199,226,226,]),'equality_expression':([72,83,133,163,174,175,180,184,190,194,230,250,253,255,257,258,259,264,265,275,276,278,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,387,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,]),'category_name':([105,201,],[240,337,]),'jump_statement':([83,174,180,190,306,328,332,437,491,493,495,518,533,],[188,188,188,188,188,188,188,188,188,188,188,188,188,]),'keyword_declarator':([94,95,214,217,223,232,234,366,372,],[219,219,219,356,219,219,219,219,219,]),'struct_declaration_list':([89,106,206,244,],[207,241,342,377,]),'keyword_selector':([94,95,214,223,232,234,366,372,],[217,217,217,217,217,217,217,217,]),'type_declaration':([0,29,47,52,77,83,84,92,97,104,165,174,200,203,212,233,336,339,367,373,374,378,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'struct_declaration':([89,106,206,207,241,244,342,377,],[209,209,209,343,343,209,343,343,]),'and_expression':([72,83,133,163,174,175,180,184,190,194,230,250,253,255,257,259,264,265,275,276,278,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[125,125,125,125,125,125,125,125,125,125,125,125,385,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'class_interface':([0,29,],[19,19,]),'selection_statement':([83,174,180,190,306,328,332,437,491,493,495,518,533,],[193,193,193,193,193,193,193,193,193,193,193,193,193,]),'postfix_expression':([72,83,123,124,133,150,153,163,174,175,180,184,190,194,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,321,322,326,328,329,331,332,335,349,402,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'class_list':([28,],[69,]),'type_direct_declarator':([71,114,117,],[115,115,252,]),'initializer_list':([302,],[428,]),'logical_or_expression':([72,83,133,163,174,175,180,184,190,194,230,250,255,257,264,265,275,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'unary_operator':([72,83,123,124,133,150,153,163,174,175,180,184,190,194,230,250,253,255,257,258,259,260,261,264,265,268,269,270,271,275,276,278,279,280,281,282,283,284,285,290,302,306,321,322,326,328,329,331,332,335,349,402,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,]),'struct_or_union':([0,1,14,24,29,30,44,47,52,64,65,66,73,77,83,84,89,92,97,104,106,133,165,174,194,200,203,206,207,208,210,212,220,233,241,244,251,257,289,298,336,339,342,358,367,373,374,377,378,404,422,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'assignment_expression':([83,133,163,174,175,180,190,194,255,257,264,265,275,302,306,321,322,326,328,329,331,332,335,433,437,478,488,490,491,493,494,495,518,533,],[195,195,301,195,195,195,195,195,195,195,195,394,195,301,195,432,195,434,195,195,195,195,195,195,195,512,301,195,195,195,195,195,195,195,]),'parameter_type_list':([73,251,289,358,404,422,],[156,383,417,456,417,487,]),'type_qualifier_list':([8,],[54,]),'implementation_definition_list':([104,374,378,],[233,467,471,]),'declaration_specifiers':([0,1,14,29,30,44,47,52,64,65,66,73,77,83,84,92,97,104,165,174,200,203,212,233,251,289,298,336,339,358,367,373,374,378,404,422,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[36,51,60,36,71,79,81,81,108,109,110,158,81,81,81,81,81,36,81,81,81,81,81,36,158,158,158,81,81,158,81,81,36,36,158,158,81,81,81,81,81,81,36,36,81,81,81,81,81,81,81,81,]),'identifier_list':([73,251,],[159,384,]),'class_method_definition':([104,233,374,378,467,471,],[237,237,237,237,237,237,]),'function_definition':([0,29,104,233,374,378,467,471,],[41,41,238,371,238,238,371,371,]),'enum_specifier':([0,1,14,24,29,30,44,47,52,64,65,66,73,77,83,84,89,92,97,104,106,133,165,174,194,200,203,206,207,208,210,212,220,233,241,244,251,257,289,298,336,339,342,358,367,373,374,377,378,404,422,443,444,461,463,464,466,467,471,496,497,498,499,504,507,524,527,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'interface_declaration_list':([52,92,200,203,443,444,496,499,],[97,212,336,339,497,498,524,527,]),'specifier_qualifier_list':([89,106,133,194,206,207,208,210,220,241,244,257,342,377,],[211,211,274,274,211,211,345,346,274,211,211,274,211,211,]),'conditional_expression':([72,83,133,163,174,175,180,184,190,194,230,250,255,257,264,265,275,290,302,306,321,322,326,328,329,331,332,335,349,421,433,437,449,478,480,488,490,491,493,494,495,518,533,],[151,197,197,197,197,197,197,151,197,197,151,151,197,197,197,197,197,151,197,197,197,197,197,197,197,197,197,197,151,151,197,197,151,197,513,197,197,197,197,197,197,197,197,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','semantic.py',10),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','semantic.py',11),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','semantic.py',18),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','semantic.py',19),
  ('external_declaration -> class_interface','external_declaration',1,'p_external_declaration','semantic.py',20),
  ('external_declaration -> class_implementation','external_declaration',1,'p_external_declaration','semantic.py',21),
  ('external_declaration -> category_interface','external_declaration',1,'p_external_declaration','semantic.py',22),
  ('external_declaration -> category_implementation','external_declaration',1,'p_external_declaration','semantic.py',23),
  ('external_declaration -> protocol_declaration','external_declaration',1,'p_external_declaration','semantic.py',24),
  ('external_declaration -> class_declaration_list','external_declaration',1,'p_external_declaration','semantic.py',25),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','semantic.py',32),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','semantic.py',33),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','semantic.py',34),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition','semantic.py',35),
  ('declaration -> declaration_specifiers SEMI','declaration',2,'p_declaration','semantic.py',42),
  ('declaration -> type_declaration SEMI','declaration',2,'p_declaration','semantic.py',43),
  ('declaration -> declaration_specifiers init_declarator_list SEMI','declaration',3,'p_declaration','semantic.py',44),
  ('class_interface -> INTERFACE class_name instance_variables interface_declaration_list END','class_interface',5,'p_class_interface','semantic.py',51),
  ('class_interface -> INTERFACE class_name : superclass_name instance_variables interface_declaration_list END','class_interface',7,'p_class_interface','semantic.py',52),
  ('class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END','class_interface',5,'p_class_interface','semantic.py',53),
  ('class_interface -> INTERFACE class_name : superclass_name protocol_reference_list instance_variables interface_declaration_list END','class_interface',8,'p_class_interface','semantic.py',54),
  ('class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END','class_implementation',5,'p_class_implementation','semantic.py',61),
  ('class_implementation -> IMPLEMENTATION class_name : superclass_name instance_variables implementation_definition_list END','class_implementation',7,'p_class_implementation','semantic.py',62),
  ('category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END','category_interface',7,'p_category_interface','semantic.py',69),
  ('category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END','category_interface',8,'p_category_interface','semantic.py',70),
  ('category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END','category_implementation',7,'p_category_implementation','semantic.py',77),
  ('protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END','protocol_declaration',4,'p_protocol_declaration','semantic.py',84),
  ('protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END','protocol_declaration',5,'p_protocol_declaration','semantic.py',85),
  ('class_declaration_list -> CLASS class_list','class_declaration_list',2,'p_class_declaration_list','semantic.py',92),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','semantic.py',99),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',100),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','semantic.py',101),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',102),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','semantic.py',103),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',104),
  ('declaration_specifiers -> declspec storage_class_specifier','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',105),
  ('declaration_specifiers -> declspec storage_class_specifier declaration_specifiers','declaration_specifiers',3,'p_declaration_specifiers','semantic.py',106),
  ('declaration_specifiers -> declspec type_specifier','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',107),
  ('declaration_specifiers -> declspec type_specifier declaration_specifiers','declaration_specifiers',3,'p_declaration_specifiers','semantic.py',108),
  ('declaration_specifiers -> declspec type_qualifier','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',109),
  ('declaration_specifiers -> declspec type_qualifier declaration_specifiers','declaration_specifiers',3,'p_declaration_specifiers','semantic.py',110),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','semantic.py',117),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','semantic.py',118),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','semantic.py',125),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','semantic.py',126),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement','semantic.py',133),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','semantic.py',134),
  ('compound_statement -> LBRACE declaration_list RBRACE','compound_statement',3,'p_compound_statement','semantic.py',135),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement','semantic.py',136),
  ('type_declaration -> TYPEDEF declaration_specifiers type_declarator','type_declaration',3,'p_type_declaration','semantic.py',143),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','semantic.py',150),
  ('init_declarator_list -> init_declarator_list , init_declarator','init_declarator_list',3,'p_init_declarator_list','semantic.py',151),
  ('class_name -> IDENTIFIER','class_name',1,'p_class_name','semantic.py',158),
  ('superclass_name -> IDENTIFIER','superclass_name',1,'p_superclass_name','semantic.py',165),
  ('instance_variables -> LBRACE struct_declaration_list RBRACE','instance_variables',3,'p_instance_variables','semantic.py',172),
  ('instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE','instance_variables',4,'p_instance_variables','semantic.py',173),
  ('instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE','instance_variables',4,'p_instance_variables','semantic.py',174),
  ('instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE','instance_variables',5,'p_instance_variables','semantic.py',175),
  ('interface_declaration_list -> declaration','interface_declaration_list',1,'p_interface_declaration_list','semantic.py',182),
  ('interface_declaration_list -> method_declaration','interface_declaration_list',1,'p_interface_declaration_list','semantic.py',183),
  ('interface_declaration_list -> interface_declaration_list declaration','interface_declaration_list',2,'p_interface_declaration_list','semantic.py',184),
  ('interface_declaration_list -> interface_declaration_list method_declaration','interface_declaration_list',2,'p_interface_declaration_list','semantic.py',185),
  ('protocol_reference_list -> LT protocol_list GT','protocol_reference_list',3,'p_protocol_reference_list','semantic.py',192),
  ('implementation_definition_list -> function_definition','implementation_definition_list',1,'p_implementation_definition_list','semantic.py',199),
  ('implementation_definition_list -> declaration','implementation_definition_list',1,'p_implementation_definition_list','semantic.py',200),
  ('implementation_definition_list -> method_definition','implementation_definition_list',1,'p_implementation_definition_list','semantic.py',201),
  ('implementation_definition_list -> implementation_definition_list function_definition','implementation_definition_list',2,'p_implementation_definition_list','semantic.py',202),
  ('implementation_definition_list -> implementation_definition_list declaration','implementation_definition_list',2,'p_implementation_definition_list','semantic.py',203),
  ('implementation_definition_list -> implementation_definition_list method_definition','implementation_definition_list',2,'p_implementation_definition_list','semantic.py',204),
  ('category_name -> IDENTIFIER','category_name',1,'p_category_name','semantic.py',211),
  ('protocol_name -> IDENTIFIER','protocol_name',1,'p_protocol_name','semantic.py',218),
  ('class_list -> class_name','class_list',1,'p_class_list','semantic.py',225),
  ('class_list -> class_list , class_name','class_list',3,'p_class_list','semantic.py',226),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','semantic.py',233),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','semantic.py',234),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','semantic.py',235),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','semantic.py',236),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','semantic.py',244),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','semantic.py',245),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','semantic.py',246),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','semantic.py',247),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','semantic.py',248),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','semantic.py',249),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','semantic.py',250),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','semantic.py',251),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','semantic.py',252),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','semantic.py',253),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','semantic.py',254),
  ('type_specifier -> TYPE_NAME','type_specifier',1,'p_type_specifier','semantic.py',255),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','semantic.py',262),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','semantic.py',263),
  ('declspec -> DECLSPEC ( declspec_type )','declspec',4,'p_declspec','semantic.py',270),
  ('declspec_type -> DLLIMPORT','declspec_type',1,'p_declspec_type','semantic.py',277),
  ('declspec_type -> DLLEXPORT','declspec_type',1,'p_declspec_type','semantic.py',278),
  ('pointer -> *','pointer',1,'p_pointer','semantic.py',285),
  ('pointer -> * type_qualifier_list','pointer',2,'p_pointer','semantic.py',286),
  ('pointer -> * pointer','pointer',2,'p_pointer','semantic.py',287),
  ('pointer -> * type_qualifier_list pointer','pointer',3,'p_pointer','semantic.py',288),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','semantic.py',295),
  ('direct_declarator -> LP declarator RP','direct_declarator',3,'p_direct_declarator','semantic.py',296),
  ('direct_declarator -> direct_declarator LBRACK constant_expression RBRACK','direct_declarator',4,'p_direct_declarator','semantic.py',297),
  ('direct_declarator -> direct_declarator LBRACK RBRACK','direct_declarator',3,'p_direct_declarator','semantic.py',298),
  ('direct_declarator -> direct_declarator LP parameter_type_list RP','direct_declarator',4,'p_direct_declarator','semantic.py',299),
  ('direct_declarator -> direct_declarator LP identifier_list RP','direct_declarator',4,'p_direct_declarator','semantic.py',300),
  ('direct_declarator -> direct_declarator LP RP','direct_declarator',3,'p_direct_declarator','semantic.py',301),
  ('statement_list -> statement','statement_list',1,'p_statement_list','semantic.py',308),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','semantic.py',309),
  ('type_declarator -> pointer type_direct_declarator','type_declarator',2,'p_type_declarator','semantic.py',316),
  ('type_declarator -> type_direct_declarator','type_declarator',1,'p_type_declarator','semantic.py',317),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','semantic.py',324),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','semantic.py',325),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','semantic.py',332),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','semantic.py',333),
  ('visibility_specification -> PRIVATE','visibility_specification',1,'p_visibility_specification','semantic.py',340),
  ('visibility_specification -> PUBLIC','visibility_specification',1,'p_visibility_specification','semantic.py',341),
  ('visibility_specification -> PROTECTED','visibility_specification',1,'p_visibility_specification','semantic.py',342),
  ('method_declaration -> class_method_declaration','method_declaration',1,'p_method_declaration','semantic.py',349),
  ('method_declaration -> instance_method_declaration','method_declaration',1,'p_method_declaration','semantic.py',350),
  ('protocol_list -> protocol_name','protocol_list',1,'p_protocol_list','semantic.py',357),
  ('protocol_list -> protocol_list , protocol_name','protocol_list',3,'p_protocol_list','semantic.py',358),
  ('method_definition -> class_method_definition','method_definition',1,'p_method_definition','semantic.py',365),
  ('method_definition -> instance_method_definition','method_definition',1,'p_method_definition','semantic.py',366),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','semantic.py',373),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','semantic.py',374),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE','struct_or_union_specifier',5,'p_struct_or_union_specifier','semantic.py',381),
  ('struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE','struct_or_union_specifier',4,'p_struct_or_union_specifier','semantic.py',382),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','semantic.py',383),
  ('enum_specifier -> ENUM LBRACE enumerator_list RBRACE','enum_specifier',4,'p_enum_specifier','semantic.py',390),
  ('enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE','enum_specifier',5,'p_enum_specifier','semantic.py',391),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','semantic.py',392),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','semantic.py',399),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','semantic.py',400),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','semantic.py',407),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','semantic.py',414),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','semantic.py',415),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','semantic.py',422),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','semantic.py',423),
  ('statement -> labeled_statement','statement',1,'p_statement','semantic.py',430),
  ('statement -> compound_statement','statement',1,'p_statement','semantic.py',431),
  ('statement -> expression_statement','statement',1,'p_statement','semantic.py',432),
  ('statement -> selection_statement','statement',1,'p_statement','semantic.py',433),
  ('statement -> iteration_statement','statement',1,'p_statement','semantic.py',434),
  ('statement -> jump_statement','statement',1,'p_statement','semantic.py',435),
  ('type_direct_declarator -> IDENTIFIER','type_direct_declarator',1,'p_type_direct_declarator','semantic.py',442),
  ('type_direct_declarator -> LP type_declarator RP','type_direct_declarator',3,'p_type_direct_declarator','semantic.py',443),
  ('type_direct_declarator -> type_direct_declarator LBRACK constant_expression RBRACK','type_direct_declarator',4,'p_type_direct_declarator','semantic.py',444),
  ('type_direct_declarator -> type_direct_declarator LBRACK RBRACK','type_direct_declarator',3,'p_type_direct_declarator','semantic.py',445),
  ('type_direct_declarator -> type_direct_declarator LP parameter_type_list RP','type_direct_declarator',4,'p_type_direct_declarator','semantic.py',446),
  ('type_direct_declarator -> type_direct_declarator LP identifier_list RP','type_direct_declarator',4,'p_type_direct_declarator','semantic.py',447),
  ('type_direct_declarator -> type_direct_declarator LP RP','type_direct_declarator',3,'p_type_direct_declarator','semantic.py',448),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','semantic.py',455),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','semantic.py',456),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','semantic.py',457),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI','struct_declaration',3,'p_struct_declaration','semantic.py',464),
  ('class_method_declaration -> ADD method_selector SEMI','class_method_declaration',3,'p_class_method_declaration','semantic.py',471),
  ('class_method_declaration -> ADD method_type method_selector SEMI','class_method_declaration',4,'p_class_method_declaration','semantic.py',472),
  ('instance_method_declaration -> SUB method_selector SEMI','instance_method_declaration',3,'p_instance_method_declaration','semantic.py',479),
  ('instance_method_declaration -> SUB method_type method_selector SEMI','instance_method_declaration',4,'p_instance_method_declaration','semantic.py',480),
  ('class_method_definition -> ADD method_selector compound_statement','class_method_definition',3,'p_class_method_definition','semantic.py',487),
  ('class_method_definition -> ADD method_type method_selector compound_statement','class_method_definition',4,'p_class_method_definition','semantic.py',488),
  ('class_method_definition -> ADD method_selector declaration_list compound_statement','class_method_definition',4,'p_class_method_definition','semantic.py',489),
  ('class_method_definition -> ADD method_type method_selector declaration_list compound_statement','class_method_definition',5,'p_class_method_definition','semantic.py',490),
  ('instance_method_definition -> SUB method_selector compound_statement','instance_method_definition',3,'p_instance_method_definition','semantic.py',497),
  ('instance_method_definition -> SUB method_type method_selector compound_statement','instance_method_definition',4,'p_instance_method_definition','semantic.py',498),
  ('instance_method_definition -> SUB method_selector declaration_list compound_statement','instance_method_definition',4,'p_instance_method_definition','semantic.py',499),
  ('instance_method_definition -> SUB method_type method_selector declaration_list compound_statement','instance_method_definition',5,'p_instance_method_definition','semantic.py',500),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','semantic.py',507),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','semantic.py',508),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','semantic.py',515),
  ('conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','semantic.py',516),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','semantic.py',523),
  ('parameter_list -> parameter_list , parameter_declaration','parameter_list',3,'p_parameter_list','semantic.py',524),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','semantic.py',531),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','semantic.py',532),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','semantic.py',533),
  ('expression_statement -> SEMI','expression_statement',1,'p_expression_statement','semantic.py',540),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','semantic.py',541),
  ('selection_statement -> IF LP expression RP statement','selection_statement',5,'p_selection_statement','semantic.py',548),
  ('selection_statement -> IF LP expression RP statement ELSE statement','selection_statement',7,'p_selection_statement','semantic.py',549),
  ('selection_statement -> SWITCH LP expression RP statement','selection_statement',5,'p_selection_statement','semantic.py',550),
  ('iteration_statement -> WHILE LP expression RP statement','iteration_statement',5,'p_iteration_statement','semantic.py',557),
  ('iteration_statement -> DO statement WHILE LP expression RP SEMI','iteration_statement',7,'p_iteration_statement','semantic.py',558),
  ('iteration_statement -> FOR LP expression_statement expression_statement RP statement','iteration_statement',6,'p_iteration_statement','semantic.py',559),
  ('iteration_statement -> FOR LP expression_statement expression_statement expression RP','iteration_statement',6,'p_iteration_statement','semantic.py',560),
  ('jump_statement -> GOTO IDENTIFIER SEMI','jump_statement',3,'p_jump_statement','semantic.py',567),
  ('jump_statement -> CONTINUE SEMI','jump_statement',2,'p_jump_statement','semantic.py',568),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','semantic.py',569),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement','semantic.py',570),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement','semantic.py',571),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','semantic.py',578),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','semantic.py',579),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','semantic.py',586),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','semantic.py',587),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','semantic.py',595),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','semantic.py',596),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','semantic.py',597),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','semantic.py',598),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','semantic.py',605),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','semantic.py',606),
  ('method_selector -> unary_selector','method_selector',1,'p_method_selector','semantic.py',613),
  ('method_selector -> keyword_selector','method_selector',1,'p_method_selector','semantic.py',614),
  ('method_selector -> keyword_selector COMMA ELLIPSIS','method_selector',3,'p_method_selector','semantic.py',615),
  ('method_selector -> keyword_selector COMMA parameter_type_list','method_selector',3,'p_method_selector','semantic.py',616),
  ('method_type -> LP type_name RP','method_type',3,'p_method_type','semantic.py',623),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','semantic.py',630),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','semantic.py',631),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','semantic.py',638),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','semantic.py',639),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','semantic.py',646),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','semantic.py',647),
  ('expression -> assignment_expression','expression',1,'p_expression','semantic.py',654),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','semantic.py',655),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','semantic.py',662),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','semantic.py',663),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','semantic.py',664),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','semantic.py',671),
  ('unary_expression -> INC unary_expression','unary_expression',2,'p_unary_expression','semantic.py',672),
  ('unary_expression -> DEC unary_expression','unary_expression',2,'p_unary_expression','semantic.py',673),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','semantic.py',674),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','semantic.py',675),
  ('unary_expression -> SIZEOF LP type_name RP','unary_expression',4,'p_unary_expression','semantic.py',676),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','semantic.py',683),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',684),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',685),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',686),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',687),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',688),
  ('assignment_operator -> LSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',689),
  ('assignment_operator -> RSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',690),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',691),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',692),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',693),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','semantic.py',700),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','semantic.py',701),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','semantic.py',702),
  ('unary_selector -> selector','unary_selector',1,'p_unary_selector','semantic.py',709),
  ('keyword_selector -> keyword_declarator','keyword_selector',1,'p_keyword_selector','semantic.py',716),
  ('keyword_selector -> keyword_selector keyword_declarator','keyword_selector',2,'p_keyword_selector','semantic.py',717),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','semantic.py',724),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','semantic.py',725),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','semantic.py',726),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','semantic.py',733),
  ('logical_and_expression -> logical_and_expression AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','semantic.py',734),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','semantic.py',741),
  ('postfix_expression -> postfix_expression LBRACK expression RBRACK','postfix_expression',4,'p_postfix_expression','semantic.py',742),
  ('postfix_expression -> postfix_expression LP RP','postfix_expression',3,'p_postfix_expression','semantic.py',743),
  ('postfix_expression -> postfix_expression LP argument_expression_list RP','postfix_expression',4,'p_postfix_expression','semantic.py',744),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','semantic.py',745),
  ('postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER','postfix_expression',3,'p_postfix_expression','semantic.py',746),
  ('postfix_expression -> postfix_expression INC','postfix_expression',2,'p_postfix_expression','semantic.py',747),
  ('postfix_expression -> postfix_expression DEC','postfix_expression',2,'p_postfix_expression','semantic.py',748),
  ('unary_operator -> BITAND','unary_operator',1,'p_unary_operator','semantic.py',755),
  ('unary_operator -> MUL','unary_operator',1,'p_unary_operator','semantic.py',756),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','semantic.py',757),
  ('unary_operator -> SUB','unary_operator',1,'p_unary_operator','semantic.py',758),
  ('unary_operator -> TILDE','unary_operator',1,'p_unary_operator','semantic.py',759),
  ('unary_operator -> BANG','unary_operator',1,'p_unary_operator','semantic.py',760),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','semantic.py',767),
  ('cast_expression -> LP type_name RP cast_expression','cast_expression',4,'p_cast_expression','semantic.py',768),
  ('selector -> IDENTIFIER','selector',1,'p_selector','semantic.py',775),
  ('keyword_declarator -> COLON IDENTIFIER','keyword_declarator',2,'p_keyword_declarator','semantic.py',782),
  ('keyword_declarator -> COLON method_type IDENTIFIER','keyword_declarator',3,'p_keyword_declarator','semantic.py',783),
  ('keyword_declarator -> selector COLON IDENTIFIER','keyword_declarator',3,'p_keyword_declarator','semantic.py',784),
  ('keyword_declarator -> selector COLON method_type IDENTIFIER','keyword_declarator',4,'p_keyword_declarator','semantic.py',785),
  ('direct_abstract_declarator -> LP abstract_declarator RP','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',792),
  ('direct_abstract_declarator -> LBRACK RBRACK','direct_abstract_declarator',2,'p_direct_abstract_declarator','semantic.py',793),
  ('direct_abstract_declarator -> LBRACK constant_expression RBRACK','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',794),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',795),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK','direct_abstract_declarator',4,'p_direct_abstract_declarator','semantic.py',796),
  ('direct_abstract_declarator -> LP RP','direct_abstract_declarator',2,'p_direct_abstract_declarator','semantic.py',797),
  ('direct_abstract_declarator -> LP parameter_type_list RP','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',798),
  ('direct_abstract_declarator -> direct_abstract_declarator LP RP','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',799),
  ('direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP','direct_abstract_declarator',4,'p_direct_abstract_declarator','semantic.py',800),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','semantic.py',807),
  ('inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','semantic.py',808),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','semantic.py',816),
  ('primary_expression -> HEX_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',817),
  ('primary_expression -> OCTAL_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',818),
  ('primary_expression -> BINARY_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',819),
  ('primary_expression -> DECIMAL_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',820),
  ('primary_expression -> FLOATING_POINT_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',821),
  ('primary_expression -> C_STRING_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',822),
  ('primary_expression -> OBJC_STRING_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',823),
  ('primary_expression -> LP expression RP','primary_expression',3,'p_primary_expression','semantic.py',824),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','semantic.py',831),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','semantic.py',832),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','semantic.py',839),
  ('exclusive_or_expression -> exclusive_or_expression BITXOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','semantic.py',840),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','semantic.py',847),
  ('and_expression -> and_expression BITAND equality_expression','and_expression',3,'p_and_expression','semantic.py',848),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','semantic.py',855),
  ('equality_expression -> equality_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','semantic.py',856),
  ('equality_expression -> equality_expression NOTEQUAL relational_expression','equality_expression',3,'p_equality_expression','semantic.py',857),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','semantic.py',864),
  ('relational_expression -> relational_expression LT shift_expression','relational_expression',3,'p_relational_expression','semantic.py',865),
  ('relational_expression -> relational_expression GT shift_expression','relational_expression',3,'p_relational_expression','semantic.py',866),
  ('relational_expression -> relational_expression LE shift_expression','relational_expression',3,'p_relational_expression','semantic.py',867),
  ('relational_expression -> relational_expression GE shift_expression','relational_expression',3,'p_relational_expression','semantic.py',868),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','semantic.py',875),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','semantic.py',876),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','semantic.py',877),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','semantic.py',883),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','semantic.py',884),
  ('additive_expression -> additive_expression SUB multiplicative_expression','additive_expression',3,'p_additive_expression','semantic.py',885),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','semantic.py',892),
  ('multiplicative_expression -> multiplicative_expression MUL cast_expression','multiplicative_expression',3,'p_multiplicative_expression','semantic.py',893),
  ('multiplicative_expression -> multiplicative_expression DIV cast_expression','multiplicative_expression',3,'p_multiplicative_expression','semantic.py',894),
  ('multiplicative_expression -> multiplicative_expression MOD cast_expression','multiplicative_expression',3,'p_multiplicative_expression','semantic.py',895),
]
