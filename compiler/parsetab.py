
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitADD ADD_ASSIGN AND AND_ASSIGN ASSIGN ASSIGNMENT AT ATOMIC AUTO AUTORELEASEPOOL BANG BINARY_LITERAL BITAND BITOR BITXOR BOOL BOOL_ BREAK BYCOPY BYREF CASE CATCH CHAR CLASS COLON COMMA COMPLEX CONST CONTINUE COPY C_STRING_LITERAL Class DEC DECIMAL_LITERAL DECLSPEC DEFAULT DIV DIV_ASSIGN DLLEXPORT DLLIMPORT DO DOT DOUBLE DYNAMIC ELLIPSIS ELSE ENCODE END ENUM EQUAL EXTERN EXTERN_SUFFIX FALSE FINALLY FLOAT FLOATING_POINT_LITERAL FOR GE GETTER GOTO GT HEX_LITERAL IB_DESIGNABLE IB_INSPECTABLE IB_OUTLET IB_OUTLET_COLLECTION ID IDENTIFIER IF IMAGINERY IMP IMPLEMENTATION IMPORT IN INC INLINE INOUT INT INTERFACE IOS_SUFFIX LBRACE LBRACK LE LONG LP LSHIFT LSHIFT_ASSIGN LT MAC_SUFFIX MOD MOD_ASSIGN MUL MUL_ASSIGN NIL NO NONATOMIC NONULL NOTEQUAL NS_ASSUME_NONULL_BEGINE NS_ASSUME_NONULL_END NS_ENUM NS_INLINE NS_OPTIONS NULL NULLABLE NULL_RESETTABLE NULL_UNSPECIFIED OBJC_STRING_LITERAL OCTAL_LITERAL ONEWAY OPTIONAL OR OR_ASSIGN OUT PACKAGE PRIVATE PROPERTY PROTECTED PROTOCOL PROTOCOL_ PUBLIC QUESTION RBRACE RBRACK READONLY READWRITE REGISTER REQUIRED RESTRICT RETAIN RETURN RP RSHIFT RSHIFT_ASSIGN SEL SELECTOR SELF SEMI SETTER SHORT SIGNED SIZEOF STATIC STRONG STRUCT STRUCTACCESS SUB SUB_ASSIGN SUPER SWITCH SYNCHRONIZED SYNTHESIZE THROW TILDE TRUE TRY TVOS_PROHIBITED TYPEDEF TYPE_NAME UNION UNSAFE_UNRETAINED UNSIGNED VOID VOLATILE WEAK WHILE WS XOR_ASSIGN YEStranslation_unit : external_declaration\n                        | translation_unit external_declaration\n    external_declaration : function_definition\n                            | declaration\n                            | class_interface\n                            | class_implementation\n                            | category_interface\n                            | category_implementation\n                            | protocol_declaration\n                            | class_declaration_list\n    function_definition : declaration_specifiers declarator declaration_list compound_statement\n                           | declaration_specifiers declarator compound_statement\n                           | declarator declaration_list compound_statement\n                           | declarator compound_statement\n    declaration : declaration_specifiers SEMI\n                   | type_declaration SEMI\n                   | declaration_specifiers init_declarator_list SEMI\n    class_interface : INTERFACE class_name instance_variables interface_declaration_list END\n                       | INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END\n                       | INTERFACE protocol_reference_list instance_variables interface_declaration_list END\n                       | INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END\n    class_implementation : IMPLEMENTATION class_name instance_variables implementation_definition_list END\n                            | IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END\n    category_interface : INTERFACE class_name '(' category_name ')' interface_declaration_list END\n                          | INTERFACE class_name '(' category_name ')' protocol_reference_list interface_declaration_list END\n    category_implementation : IMPLEMENTATION class_name '(' category_name ')' implementation_definition_list END\n    protocol_declaration : PROTOCOL protocol_name interface_declaration_list END\n                            | PROTOCOL protocol_name protocol_reference_list interface_declaration_list END\n    class_declaration_list : CLASS class_list\n    declaration_specifiers : storage_class_specifier\n                              | storage_class_specifier declaration_specifiers\n                              | type_specifier\n                              | type_specifier declaration_specifiers\n                              | type_qualifier\n                              | type_qualifier declaration_specifiers\n    declarator : pointer direct_declarator\n                  | direct_declarator\n    declaration_list : declaration\n                        | declaration_list declaration\n    compound_statement : LBRACE RBRACE\n                          | LBRACE statement_list RBRACE\n                          | LBRACE declaration_list RBRACE\n                          | LBRACE declaration_list statement_list RBRACE\n    type_declaration : TYPEDEF declaration_specifiers type_declarator\n    init_declarator_list : init_declarator\n                            | init_declarator_list COMMA init_declarator\n    class_name : IDENTIFIER\n    superclass_name : IDENTIFIER\n    instance_variables : LBRACE struct_declaration_list RBRACE\n                          | LBRACE visibility_specification struct_declaration_list RBRACE\n                          | LBRACE struct_declaration_list instance_variables RBRACE\n                          | LBRACE visibility_specification struct_declaration_list instance_variables RBRACE\n    interface_declaration_list : declaration\n                                  | method_declaration\n                                  | interface_declaration_list declaration\n                                  | interface_declaration_list method_declaration\n    protocol_reference_list : LT protocol_list GT\n    implementation_definition_list : function_definition\n                                      | declaration\n                                      | method_definition\n                                      | implementation_definition_list function_definition\n                                      | implementation_definition_list declaration\n                                      | implementation_definition_list method_definition\n    category_name : IDENTIFIER\n    protocol_name : IDENTIFIER\n    class_list : class_name\n                  | class_list COMMA class_name\n    storage_class_specifier : EXTERN\n                               | STATIC\n                               | AUTO\n                               | REGISTER\n    type_specifier : VOID\n                      | CHAR\n                      | SHORT\n                      | INT\n                      | LONG\n                      | FLOAT\n                      | DOUBLE\n                      | SIGNED\n                      | UNSIGNED\n                      | struct_or_union_specifier\n                      | enum_specifier\n                      | TYPE_NAME\n    type_qualifier : CONST\n                      | VOLATILE\n    pointer : MUL\n               | MUL type_qualifier_list\n               | MUL pointer\n               | MUL type_qualifier_list pointer\n    direct_declarator : IDENTIFIER\n                         | LP declarator RP\n                         | direct_declarator LBRACK constant_expression RBRACK\n                         | direct_declarator LBRACK RBRACK\n                         | direct_declarator LP parameter_type_list RP\n                         | direct_declarator LP identifier_list RP\n                         | direct_declarator LP RP\n    statement_list : statement\n                      | statement_list statement\n    type_declarator : pointer type_direct_declarator\n                       | type_direct_declarator\n    init_declarator : declarator\n                       | declarator ASSIGNMENT initializer\n    struct_declaration_list : struct_declaration\n                               | struct_declaration_list struct_declaration\n    visibility_specification : PRIVATE\n                                | PUBLIC\n                                | PROTECTED\n    method_declaration : class_method_declaration\n                          | instance_method_declaration\n    protocol_list : protocol_name\n                     | protocol_list COMMA protocol_name\n    method_definition : class_method_definition\n                         | instance_method_definition\n    struct_or_union : STRUCT\n                       | UNION\n    struct_or_union_specifier : struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE\n                                 | struct_or_union LBRACE struct_declaration_list RBRACE\n                                 | struct_or_union IDENTIFIER\n    enum_specifier : ENUM LBRACE enumerator_list RBRACE\n                      | ENUM IDENTIFIER LBRACE enumerator_list RBRACE\n                      | ENUM IDENTIFIER\n    type_qualifier_list : type_qualifier\n                           | type_qualifier_list type_qualifier\n    constant_expression : conditional_expression\n    parameter_type_list : parameter_list\n                           | parameter_list COMMA ELLIPSIS\n    identifier_list : IDENTIFIER\n                       | identifier_list COMMA IDENTIFIER\n    statement : labeled_statement\n                 | compound_statement\n                 | expression_statement\n                 | selection_statement\n                 | iteration_statement\n                 | jump_statement\n    type_direct_declarator : IDENTIFIER\n                              | LP type_declarator RP\n                              | type_direct_declarator LBRACK constant_expression RBRACK\n                              | type_direct_declarator LBRACK RBRACK\n                              | type_direct_declarator LP parameter_type_list RP\n                              | type_direct_declarator LP identifier_list RP\n                              | type_direct_declarator LP RP\n    initializer : assignment_expression\n                   | LBRACE initializer_list RBRACE\n                   | LBRACE initializer_list COMMA RBRACE\n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI\n    class_method_declaration : ADD method_selector SEMI\n                                | ADD method_type method_selector SEMI\n    instance_method_declaration : SUB method_selector SEMI\n                                   | SUB method_type method_selector SEMI\n    class_method_definition : ADD method_selector compound_statement\n                               | ADD method_type method_selector compound_statement\n                               | ADD method_selector declaration_list compound_statement\n                               | ADD method_type method_selector declaration_list compound_statement\n    instance_method_definition : SUB method_selector compound_statement\n                                  | SUB method_type method_selector compound_statement\n                                  | SUB method_selector declaration_list compound_statement\n                                  | SUB method_type method_selector declaration_list compound_statement\n    enumerator_list : enumerator\n                       | enumerator_list COMMA enumerator\n    conditional_expression : logical_or_expression\n                              | logical_or_expression QUESTION expression COLON conditional_expression\n    parameter_list : parameter_declaration\n                      | parameter_list COMMA parameter_declaration\n    labeled_statement : IDENTIFIER COLON statement\n                         | CASE constant_expression COLON statement\n                         | DEFAULT COLON statement\n    expression_statement : SEMI\n                            | expression SEMI\n    selection_statement : IF LP expression RP statement\n                           | IF LP expression RP statement ELSE statement\n                           | SWITCH LP expression RP statement\n    iteration_statement : WHILE LP expression RP statement\n                           | DO statement WHILE LP expression RP SEMI\n                           | FOR LP expression_statement expression_statement RP statement\n                           | FOR LP expression_statement expression_statement expression RP\n    jump_statement : GOTO IDENTIFIER SEMI\n                      | CONTINUE SEMI\n                      | BREAK SEMI\n                      | RETURN SEMI\n                      | RETURN expression SEMI\n    assignment_expression : conditional_expression\n                             | unary_expression assignment_operator assignment_expression\n    initializer_list : initializer\n                        | initializer_list COMMA initializer\n    specifier_qualifier_list : type_specifier\n                                | type_specifier specifier_qualifier_list\n    struct_declarator_list : struct_declarator\n                              | struct_declarator_list COMMA struct_declarator\n    method_selector : unary_selector\n                       | keyword_selector\n                       | keyword_selector COMMA ELLIPSIS\n                       | keyword_selector COMMA parameter_type_list\n    method_type : LP type_name RP\n    type_name : specifier_qualifier_list\n                 | specifier_qualifier_list abstract_declarator\n    enumerator : IDENTIFIER\n                  | IDENTIFIER ASSIGNMENT constant_expression\n    logical_or_expression : logical_and_expression\n                             | logical_or_expression OR logical_and_expression\n    expression : assignment_expression\n                  | expression COMMA assignment_expression\n    parameter_declaration : declaration_specifiers declarator\n                             | declaration_specifiers abstract_declarator\n                             | declaration_specifiers\n    unary_expression : postfix_expression\n                        | INC unary_expression\n                        | DEC unary_expression\n                        | unary_operator cast_expression\n                        | SIZEOF unary_expression\n                        | SIZEOF LP type_name RP\n    assignment_operator : ASSIGNMENT\n                           | MUL_ASSIGN\n                           | DIV_ASSIGN\n                           | MOD_ASSIGN\n                           | ADD_ASSIGN\n                           | SUB_ASSIGN\n                           | LSHIFT_ASSIGN\n                           | RSHIFT_ASSIGN\n                           | AND_ASSIGN\n                           | XOR_ASSIGN\n                           | OR_ASSIGN\n    struct_declarator : declarator\n                         | COLON constant_expression\n                         | declarator COLON constant_expression\n    unary_selector : selector\n    keyword_selector : keyword_declarator\n                        | keyword_selector keyword_declarator\n    abstract_declarator : pointer\n                           | direct_abstract_declarator\n                           | pointer direct_abstract_declarator\n    logical_and_expression : inclusive_or_expression\n                              | logical_and_expression AND inclusive_or_expression\n    postfix_expression : primary_expression\n                          | postfix_expression LBRACK expression RBRACK\n                          | postfix_expression LP RP\n                          | postfix_expression LP argument_expression_list RP\n                          | postfix_expression DOT IDENTIFIER\n                          | postfix_expression STRUCTACCESS IDENTIFIER\n                          | postfix_expression INC\n                          | postfix_expression DEC\n    unary_operator : BITAND\n                      | MUL\n                      | ADD\n                      | SUB\n                      | TILDE\n                      | BANG\n    cast_expression : unary_expression\n                       | LP type_name RP cast_expression\n    selector : IDENTIFIER\n    keyword_declarator : COLON IDENTIFIER\n                          | COLON method_type IDENTIFIER\n                          | selector COLON IDENTIFIER\n                          | selector COLON method_type IDENTIFIER\n    direct_abstract_declarator : LP abstract_declarator RP\n                                  | LBRACK RBRACK\n                                  | LBRACK constant_expression RBRACK\n                                  | direct_abstract_declarator LBRACK RBRACK\n                                  | direct_abstract_declarator LBRACK constant_expression RBRACK\n                                  | LP RP\n                                  | LP parameter_type_list RP\n                                  | direct_abstract_declarator LP RP\n                                  | direct_abstract_declarator LP parameter_type_list RP\n    inclusive_or_expression : exclusive_or_expression\n                               | inclusive_or_expression BITOR exclusive_or_expression\n    primary_expression : IDENTIFIER\n                          | HEX_LITERAL\n                          | OCTAL_LITERAL\n                          | BINARY_LITERAL\n                          | DECIMAL_LITERAL\n                          | FLOATING_POINT_LITERAL\n                          | C_STRING_LITERAL\n                          | OBJC_STRING_LITERAL\n                          | LP expression RP\n    argument_expression_list : assignment_expression\n                                | argument_expression_list COMMA assignment_expression\n    exclusive_or_expression : and_expression\n                               | exclusive_or_expression BITXOR and_expression\n    and_expression : equality_expression\n                      | and_expression BITAND equality_expression\n    equality_expression : relational_expression\n                           | equality_expression EQUAL relational_expression\n                           | equality_expression NOTEQUAL relational_expression\n    relational_expression : shift_expression\n                             | relational_expression LT shift_expression\n                             | relational_expression GT shift_expression\n                             | relational_expression LE shift_expression\n                             | relational_expression GE shift_expression\n    shift_expression : additive_expression\n                        | shift_expression LSHIFT additive_expression\n                        | shift_expression RSHIFT additive_expressionadditive_expression : multiplicative_expression\n                           | additive_expression ADD multiplicative_expression\n                           | additive_expression SUB multiplicative_expression\n    multiplicative_expression : cast_expression\n                                 | multiplicative_expression MUL cast_expression\n                                 | multiplicative_expression DIV cast_expression\n                                 | multiplicative_expression MOD cast_expression\n    "
    
_lr_action_items = {'C_STRING_LITERAL':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,115,-15,-38,115,-242,115,115,-244,115,-245,-241,-243,-246,115,115,-17,115,-131,-133,-129,115,115,-130,115,115,-97,-134,115,-40,-167,-132,115,-39,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,115,115,-177,-98,-41,115,-168,115,115,115,115,-178,115,115,115,115,-176,-43,-180,115,-166,115,-164,115,115,115,115,115,-165,115,115,115,115,-172,-171,-169,-174,-175,115,-173,-170,]),'HEX_LITERAL':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,127,-15,-38,127,-242,127,127,-244,127,-245,-241,-243,-246,127,127,-17,127,-131,-133,-129,127,127,-130,127,127,-97,-134,127,-40,-167,-132,127,-39,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,127,127,-177,-98,-41,127,-168,127,127,127,127,-178,127,127,127,127,-176,-43,-180,127,-166,127,-164,127,127,127,127,127,-165,127,127,127,127,-172,-171,-169,-174,-175,127,-173,-170,]),'NOTEQUAL':([114,115,116,123,125,126,127,128,131,134,137,140,141,142,143,144,148,169,180,249,251,258,262,281,282,376,378,379,380,382,385,386,387,388,389,394,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,-267,-288,-205,-266,-280,-294,-269,-233,-283,276,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,276,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-290,-289,-282,-281,-295,-297,-296,-210,-234,-236,-248,]),'BINARY_LITERAL':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,116,-15,-38,116,-242,116,116,-244,116,-245,-241,-243,-246,116,116,-17,116,-131,-133,-129,116,116,-130,116,116,-97,-134,116,-40,-167,-132,116,-39,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,116,116,-177,-98,-41,116,-168,116,116,116,116,-178,116,116,116,116,-176,-43,-180,116,-166,116,-164,116,116,116,116,116,-165,116,116,116,116,-172,-171,-169,-174,-175,116,-173,-170,]),'VOID':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[5,5,-74,-84,-81,-72,-73,-7,-69,5,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,5,5,-78,-70,-37,-82,-10,-4,-77,-3,-75,5,-79,-85,5,-76,-31,5,-65,-118,5,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,5,-15,5,-35,-14,-38,5,5,-108,-54,5,-109,-53,5,5,5,5,-103,-123,-89,5,5,-91,5,-93,-96,-162,-204,-125,-17,-12,5,5,-40,5,-13,-39,5,5,5,-189,-190,-225,-226,5,-249,-27,-56,-55,5,-104,-117,-119,-59,5,-113,-60,-112,-58,5,-107,-105,5,-106,-67,5,5,-92,-94,5,-203,-202,-229,-228,-95,5,-11,-42,-41,5,5,-57,-28,-250,-146,-227,5,-148,-116,-145,-120,5,-62,-22,-63,-61,5,5,5,-49,5,5,-259,-255,5,-230,-126,-163,-43,-18,5,5,-20,-251,-147,-191,-192,-252,-149,5,-150,5,5,-154,5,5,5,-51,-50,-260,-254,-256,-257,-261,5,5,5,5,-253,-151,5,-152,-155,5,-156,-26,-23,-52,-258,-262,-19,5,5,-24,-153,-157,-21,-25,]),'PROTECTED':([106,],[239,]),'DIV_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,312,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'RP':([1,2,3,4,5,8,12,13,14,15,17,24,25,28,33,34,35,36,40,42,43,44,45,48,49,52,55,57,58,59,60,61,64,70,75,94,101,102,107,111,112,114,115,116,117,121,123,124,125,126,127,128,131,132,134,135,137,138,140,141,142,143,144,148,150,151,152,153,154,155,156,169,185,188,190,216,217,223,244,246,247,249,251,258,260,262,267,268,269,272,281,282,283,284,286,287,288,289,290,320,344,347,352,368,370,371,372,373,374,375,376,377,378,379,380,382,383,384,385,386,387,388,389,391,392,393,394,396,397,398,399,400,401,402,403,404,405,406,407,409,411,412,413,414,415,421,423,425,427,430,458,459,460,461,462,463,465,467,468,469,471,472,473,476,496,497,498,499,503,506,],[-30,-74,-84,-81,-72,-73,-69,-32,-86,-68,-83,-71,-80,-90,-78,-70,-37,-82,-77,-75,-34,-79,-85,-76,-31,-118,-121,-33,-122,-87,-88,-36,107,150,-35,-185,-123,-89,-91,-100,-135,-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,-160,-269,-93,-233,-198,-283,-278,-270,-265,-291,-272,-96,-127,283,-162,-204,290,-125,-247,-167,-200,-181,-117,-186,-119,368,371,-99,-207,-209,-240,382,-239,390,-194,394,-92,-208,-206,-94,405,-203,-202,-229,-228,-95,-168,443,-116,-120,-136,-138,-141,459,460,-277,461,-279,-264,-292,-293,-238,-235,-274,463,-237,-286,-287,-284,-285,-195,405,-228,-273,-199,-232,-290,-289,-282,-281,-295,-297,-296,-259,467,468,-255,472,-230,-128,-126,-163,-182,-201,477,479,481,-137,-139,-140,-210,-234,-236,-248,-260,-254,-256,-257,-261,499,502,-275,-161,-258,-262,515,516,]),'IMPLEMENTATION':([0,10,16,19,20,23,27,31,37,39,41,54,63,65,66,67,71,76,158,160,184,191,211,243,297,300,318,335,358,419,431,435,493,494,508,511,518,519,],[22,-7,-6,-5,-1,-8,-9,22,-10,-4,-3,-16,-47,-66,-29,-2,-15,-14,-17,-12,-40,-13,-27,-67,-11,-42,-41,-28,-22,-43,-18,-20,-26,-23,-19,-24,-21,-25,]),'(':([62,63,81,],[104,-47,195,]),'LONG':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[48,48,-74,-84,-81,-72,-73,-7,-69,48,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,48,48,-78,-70,-37,-82,-10,-4,-77,-3,-75,48,-79,-85,48,-76,-31,48,-65,-118,48,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,48,-15,48,-35,-14,-38,48,48,-108,-54,48,-109,-53,48,48,48,48,-103,-123,-89,48,48,-91,48,-93,-96,-162,-204,-125,-17,-12,48,48,-40,48,-13,-39,48,48,48,-189,-190,-225,-226,48,-249,-27,-56,-55,48,-104,-117,-119,-59,48,-113,-60,-112,-58,48,-107,-105,48,-106,-67,48,48,-92,-94,48,-203,-202,-229,-228,-95,48,-11,-42,-41,48,48,-57,-28,-250,-146,-227,48,-148,-116,-145,-120,48,-62,-22,-63,-61,48,48,48,-49,48,48,-259,-255,48,-230,-126,-163,-43,-18,48,48,-20,-251,-147,-191,-192,-252,-149,48,-150,48,48,-154,48,48,48,-51,-50,-260,-254,-256,-257,-261,48,48,48,48,-253,-151,48,-152,-155,48,-156,-26,-23,-52,-258,-262,-19,48,48,-24,-153,-157,-21,-25,]),'ELLIPSIS':([292,342,],[414,439,]),'BITOR':([114,115,116,117,121,123,124,125,126,127,128,131,134,137,140,141,142,143,144,148,169,180,249,251,258,262,281,282,374,376,377,378,379,380,382,385,386,387,388,389,394,397,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,-263,-276,-267,254,-288,-205,-266,-280,-294,-269,-233,-283,-278,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-277,-279,-264,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,254,-290,-289,-282,-281,-295,-297,-296,-210,-234,-236,-248,]),'GT':([51,114,115,116,123,125,126,127,128,131,134,137,140,142,143,144,148,169,180,197,198,249,251,258,262,281,282,378,379,380,382,385,386,387,388,389,394,398,399,400,401,402,403,404,436,461,462,463,465,],[-65,-247,-271,-268,-267,-288,-205,-266,266,-294,-269,-233,-283,-270,-265,-291,-272,-247,-265,333,-110,-207,-209,-240,-239,-208,-206,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-290,-289,266,266,-295,-297,-296,-111,-210,-234,-236,-248,]),'RBRACE':([54,71,78,79,93,95,98,99,100,114,115,116,117,121,123,124,125,126,127,128,131,132,134,137,138,140,141,142,143,144,147,148,158,163,164,166,167,169,170,173,179,181,184,185,186,190,192,214,215,222,238,249,251,258,262,281,282,295,299,300,301,316,317,318,320,326,351,353,354,365,366,367,374,376,377,378,379,380,382,385,386,387,388,389,394,396,397,398,399,400,401,402,403,404,416,417,418,419,420,421,424,428,455,456,457,461,462,463,465,474,475,478,495,497,500,501,504,505,507,514,515,520,521,],[-16,-15,-38,184,216,-103,-158,223,-196,-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,-160,-269,-233,-198,-283,-278,-270,-265,-291,-124,-272,-17,-131,-133,-129,300,-247,-130,318,-97,-134,-40,-167,-132,-181,-39,347,-104,352,366,-207,-209,-240,-239,-208,-206,-142,419,-42,-179,-177,-98,-41,-168,-178,-145,-159,-197,455,-49,457,-277,-279,-264,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-199,-232,-290,-289,-282,-281,-295,-297,-296,-183,475,-176,-43,-180,-182,-166,-164,-51,495,-50,-210,-234,-236,-248,501,-143,-165,-52,-161,-184,-144,-172,-171,-169,-174,-175,-173,-170,]),'RBRACK':([69,114,115,116,117,121,123,124,125,126,127,128,131,132,133,134,137,138,140,141,142,143,144,147,148,169,188,190,245,249,251,258,262,281,282,285,369,374,376,377,378,379,380,381,382,385,386,387,388,389,394,396,397,398,399,400,401,402,403,404,408,410,421,423,461,462,463,465,470,497,],[135,-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,-160,272,-269,-233,-198,-283,-278,-270,-265,-291,-124,-272,-247,-200,-181,370,-207,-209,-240,-239,-208,-206,409,458,-277,-279,-264,-292,-293,-238,462,-235,-237,-286,-287,-284,-285,-273,-199,-232,-290,-289,-282,-281,-295,-297,-296,469,471,-182,-201,-210,-234,-236,-248,498,-161,]),'GE':([114,115,116,123,125,126,127,128,131,134,137,140,142,143,144,148,169,180,249,251,258,262,281,282,378,379,380,382,385,386,387,388,389,394,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,-267,-288,-205,-266,264,-294,-269,-233,-283,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-290,-289,264,264,-295,-297,-296,-210,-234,-236,-248,]),'FLOATING_POINT_LITERAL':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,142,-15,-38,142,-242,142,142,-244,142,-245,-241,-243,-246,142,142,-17,142,-131,-133,-129,142,142,-130,142,142,-97,-134,142,-40,-167,-132,142,-39,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,142,142,-177,-98,-41,142,-168,142,142,142,142,-178,142,142,142,142,-176,-43,-180,142,-166,142,-164,142,142,142,142,142,-165,142,142,142,142,-172,-171,-169,-174,-175,142,-173,-170,]),'STRUCTACCESS':([115,116,123,126,127,134,137,142,143,148,180,258,262,380,382,385,394,462,463,],[-271,-268,-267,257,-266,-269,-233,-270,-265,-272,-265,-240,-239,-238,-235,-237,-273,-234,-236,]),'DOUBLE':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[33,33,-74,-84,-81,-72,-73,-7,-69,33,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,33,33,-78,-70,-37,-82,-10,-4,-77,-3,-75,33,-79,-85,33,-76,-31,33,-65,-118,33,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,33,-15,33,-35,-14,-38,33,33,-108,-54,33,-109,-53,33,33,33,33,-103,-123,-89,33,33,-91,33,-93,-96,-162,-204,-125,-17,-12,33,33,-40,33,-13,-39,33,33,33,-189,-190,-225,-226,33,-249,-27,-56,-55,33,-104,-117,-119,-59,33,-113,-60,-112,-58,33,-107,-105,33,-106,-67,33,33,-92,-94,33,-203,-202,-229,-228,-95,33,-11,-42,-41,33,33,-57,-28,-250,-146,-227,33,-148,-116,-145,-120,33,-62,-22,-63,-61,33,33,33,-49,33,33,-259,-255,33,-230,-126,-163,-43,-18,33,33,-20,-251,-147,-191,-192,-252,-149,33,-150,33,33,-154,33,33,33,-51,-50,-260,-254,-256,-257,-261,33,33,33,33,-253,-151,33,-152,-155,33,-156,-26,-23,-52,-258,-262,-19,33,33,-24,-153,-157,-21,-25,]),'INTERFACE':([0,10,16,19,20,23,27,31,37,39,41,54,63,65,66,67,71,76,158,160,184,191,211,243,297,300,318,335,358,419,431,435,493,494,508,511,518,519,],[47,-7,-6,-5,-1,-8,-9,47,-10,-4,-3,-16,-47,-66,-29,-2,-15,-14,-17,-12,-40,-13,-27,-67,-11,-42,-41,-28,-22,-43,-18,-20,-26,-23,-19,-24,-21,-25,]),'OBJC_STRING_LITERAL':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,148,-15,-38,148,-242,148,148,-244,148,-245,-241,-243,-246,148,148,-17,148,-131,-133,-129,148,148,-130,148,148,-97,-134,148,-40,-167,-132,148,-39,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,148,148,-177,-98,-41,148,-168,148,148,148,148,-178,148,148,148,148,-176,-43,-180,148,-166,148,-164,148,148,148,148,148,-165,148,148,148,148,-172,-171,-169,-174,-175,148,-173,-170,]),'OR':([114,115,116,117,121,123,124,125,126,127,128,131,132,134,137,138,140,141,142,143,144,148,169,180,249,251,258,262,281,282,374,376,377,378,379,380,382,385,386,387,388,389,394,396,397,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,271,-269,-233,-198,-283,-278,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-277,-279,-264,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-199,-232,-290,-289,-282,-281,-295,-297,-296,-210,-234,-236,-248,]),'SHORT':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[2,2,-74,-84,-81,-72,-73,-7,-69,2,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,2,2,-78,-70,-37,-82,-10,-4,-77,-3,-75,2,-79,-85,2,-76,-31,2,-65,-118,2,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,2,-15,2,-35,-14,-38,2,2,-108,-54,2,-109,-53,2,2,2,2,-103,-123,-89,2,2,-91,2,-93,-96,-162,-204,-125,-17,-12,2,2,-40,2,-13,-39,2,2,2,-189,-190,-225,-226,2,-249,-27,-56,-55,2,-104,-117,-119,-59,2,-113,-60,-112,-58,2,-107,-105,2,-106,-67,2,2,-92,-94,2,-203,-202,-229,-228,-95,2,-11,-42,-41,2,2,-57,-28,-250,-146,-227,2,-148,-116,-145,-120,2,-62,-22,-63,-61,2,2,2,-49,2,2,-259,-255,2,-230,-126,-163,-43,-18,2,2,-20,-251,-147,-191,-192,-252,-149,2,-150,2,2,-154,2,2,2,-51,-50,-260,-254,-256,-257,-261,2,2,2,2,-253,-151,2,-152,-155,2,-156,-26,-23,-52,-258,-262,-19,2,2,-24,-153,-157,-21,-25,]),'RETURN':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,168,-17,-131,-133,-129,168,-130,168,-97,-134,168,-40,-167,-132,-39,168,-42,-179,-177,-98,-41,-168,168,168,-178,-176,-43,-180,-166,168,-164,168,-165,168,168,168,-172,-171,-169,-174,-175,168,-173,-170,]),'ASSIGNMENT':([28,35,61,74,100,107,114,115,116,123,126,127,134,135,137,142,143,148,150,162,169,180,249,251,258,262,272,281,282,283,290,380,382,385,394,461,462,463,465,],[-90,-37,-36,159,225,-91,-247,-271,-268,-267,-205,-266,-269,-93,-233,-270,-265,-272,-96,159,306,-265,-207,-209,-240,-239,-92,-208,-206,-94,-95,-238,-235,-237,-273,-210,-234,-236,-248,]),'STATIC':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,101,102,103,107,135,150,153,154,156,158,160,161,167,184,191,192,193,196,199,202,204,205,206,208,211,212,213,216,223,226,228,230,231,232,233,243,246,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,352,356,357,358,359,360,362,363,364,366,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[12,12,-74,-84,-81,-72,-73,-7,-69,12,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,12,12,-78,-70,-37,-82,-10,-4,-77,-3,-75,12,-79,-85,12,-76,-31,12,-65,-118,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,12,-15,12,-35,-14,-38,12,12,-108,-54,12,-109,-53,12,-123,-89,12,-91,-93,-96,-162,-204,-125,-17,-12,12,12,-40,-13,-39,12,12,12,-189,-190,-225,-226,-249,-27,-56,-55,-117,-119,-59,12,-113,-60,-112,-58,-67,12,-92,-94,12,-203,-202,-229,-228,-95,12,-11,-42,-41,12,12,-57,-28,-250,-146,-227,12,-148,-116,-120,12,-62,-22,-63,-61,12,12,12,-49,12,-259,-255,12,-230,-126,-163,-43,-18,12,12,-20,-251,-147,-191,-192,-252,-149,12,-150,12,12,-154,12,12,12,-51,-50,-260,-254,-256,-257,-261,12,12,12,12,-253,-151,12,-152,-155,12,-156,-26,-23,-52,-258,-262,-19,12,12,-24,-153,-157,-21,-25,]),'SIZEOF':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,120,-15,-38,120,-242,120,120,-244,120,-245,-241,-243,-246,120,120,-17,120,-131,-133,-129,120,120,-130,120,120,-97,-134,120,-40,-167,-132,120,-39,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,120,120,-177,-98,-41,120,-168,120,120,120,120,-178,120,120,120,120,-176,-43,-180,120,-166,120,-164,120,120,120,120,120,-165,120,120,120,120,-172,-171,-169,-174,-175,120,-173,-170,]),'DEC':([54,69,71,78,79,115,116,118,119,120,122,123,126,127,129,130,134,136,137,139,142,143,145,146,148,149,158,159,163,164,166,167,168,170,173,177,179,180,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,258,259,260,262,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,380,382,385,390,394,410,418,419,420,422,424,426,428,462,463,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,119,-15,-38,119,-271,-268,-242,119,119,-244,-267,258,-266,119,-245,-269,-241,-233,-243,-270,-265,-246,119,-272,119,-17,119,-131,-133,-129,119,119,-130,119,119,-97,-265,-134,119,-40,-167,-132,119,-39,119,119,119,119,119,119,119,119,119,119,-240,119,119,-239,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,119,119,-177,-98,-41,119,-168,119,119,119,119,-178,119,119,-238,-235,-237,119,-273,119,-176,-43,-180,119,-166,119,-164,-234,-236,119,119,119,119,119,-165,119,119,119,119,-172,-171,-169,-174,-175,119,-173,-170,]),'UNSIGNED':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[25,25,-74,-84,-81,-72,-73,-7,-69,25,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,25,25,-78,-70,-37,-82,-10,-4,-77,-3,-75,25,-79,-85,25,-76,-31,25,-65,-118,25,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,25,-15,25,-35,-14,-38,25,25,-108,-54,25,-109,-53,25,25,25,25,-103,-123,-89,25,25,-91,25,-93,-96,-162,-204,-125,-17,-12,25,25,-40,25,-13,-39,25,25,25,-189,-190,-225,-226,25,-249,-27,-56,-55,25,-104,-117,-119,-59,25,-113,-60,-112,-58,25,-107,-105,25,-106,-67,25,25,-92,-94,25,-203,-202,-229,-228,-95,25,-11,-42,-41,25,25,-57,-28,-250,-146,-227,25,-148,-116,-145,-120,25,-62,-22,-63,-61,25,25,25,-49,25,25,-259,-255,25,-230,-126,-163,-43,-18,25,25,-20,-251,-147,-191,-192,-252,-149,25,-150,25,25,-154,25,25,25,-51,-50,-260,-254,-256,-257,-261,25,25,25,25,-253,-151,25,-152,-155,25,-156,-26,-23,-52,-258,-262,-19,25,25,-24,-153,-157,-21,-25,]),'COLON':([2,4,5,8,17,25,28,33,35,36,40,42,44,48,52,55,61,62,63,81,88,89,94,96,107,114,115,116,117,121,123,124,125,126,127,128,131,132,134,135,137,138,140,141,142,143,144,147,148,150,169,175,180,188,190,201,204,205,206,208,210,216,217,219,223,227,229,249,251,258,262,272,281,282,283,290,323,337,340,341,347,350,352,355,361,374,376,377,378,379,380,382,385,386,387,388,389,394,395,396,397,398,399,400,401,402,403,404,421,423,437,442,443,461,462,463,465,486,497,],[-74,-81,-72,-73,-83,-80,-90,-78,-37,-82,-77,-75,-79,-76,-118,-121,-36,105,-47,194,200,200,-185,220,-91,-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,-160,-269,-93,-233,-198,-283,-278,-270,-265,-291,-124,-272,-96,-247,321,325,-200,-181,200,200,343,-226,-249,200,-117,-186,348,-119,200,200,-207,-209,-240,-239,-92,-208,-206,-94,-95,426,-250,-227,343,-116,220,-120,200,200,-277,-279,-264,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,466,-199,-232,-290,-289,-282,-281,-295,-297,-296,-182,-201,-251,-252,-193,-210,-234,-236,-248,-253,-161,]),'$end':([10,16,19,20,23,27,31,37,39,41,54,63,65,66,67,71,76,158,160,184,191,211,243,297,300,318,335,358,419,431,435,493,494,508,511,518,519,],[-7,-6,-5,-1,-8,-9,0,-10,-4,-3,-16,-47,-66,-29,-2,-15,-14,-17,-12,-40,-13,-27,-67,-11,-42,-41,-28,-22,-43,-18,-20,-26,-23,-19,-24,-21,-25,]),'END':([54,71,76,84,85,87,90,91,158,160,184,191,199,212,213,226,228,230,231,232,233,297,300,318,329,332,339,345,357,359,360,419,438,444,448,451,453,454,482,485,487,489,490,492,509,510,512,513,],[-16,-15,-14,-108,-54,-109,-53,211,-17,-12,-40,-13,335,-56,-55,-59,358,-113,-60,-112,-58,-11,-42,-41,431,435,-146,-148,-62,-63,-61,-43,-147,-149,-150,-154,493,494,508,511,-151,-152,-155,-156,518,519,-153,-157,]),'FOR':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,171,-17,-131,-133,-129,171,-130,171,-97,-134,171,-40,-167,-132,-39,171,-42,-179,-177,-98,-41,-168,171,171,-178,-176,-43,-180,-166,171,-164,171,-165,171,171,171,-172,-171,-169,-174,-175,171,-173,-170,]),'UNION':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[29,29,-74,-84,-81,-72,-73,-7,-69,29,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,29,29,-78,-70,-37,-82,-10,-4,-77,-3,-75,29,-79,-85,29,-76,-31,29,-65,-118,29,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,29,-15,29,-35,-14,-38,29,29,-108,-54,29,-109,-53,29,29,29,29,-103,-123,-89,29,29,-91,29,-93,-96,-162,-204,-125,-17,-12,29,29,-40,29,-13,-39,29,29,29,-189,-190,-225,-226,29,-249,-27,-56,-55,29,-104,-117,-119,-59,29,-113,-60,-112,-58,29,-107,-105,29,-106,-67,29,29,-92,-94,29,-203,-202,-229,-228,-95,29,-11,-42,-41,29,29,-57,-28,-250,-146,-227,29,-148,-116,-145,-120,29,-62,-22,-63,-61,29,29,29,-49,29,29,-259,-255,29,-230,-126,-163,-43,-18,29,29,-20,-251,-147,-191,-192,-252,-149,29,-150,29,29,-154,29,29,29,-51,-50,-260,-254,-256,-257,-261,29,29,29,29,-253,-151,29,-152,-155,29,-156,-26,-23,-52,-258,-262,-19,29,29,-24,-153,-157,-21,-25,]),'ELSE':([163,164,166,170,181,184,185,186,300,301,316,318,320,326,418,419,420,424,428,478,504,505,507,514,515,520,521,],[-131,-133,-129,-130,-134,-40,-167,-132,-42,-179,-177,-41,-168,-178,-176,-43,-180,-166,-164,-165,-172,-171,517,-174,-175,-173,-170,]),'SUB_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,303,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'LBRACE':([1,2,3,4,5,7,8,11,12,13,14,15,17,21,24,25,28,29,33,34,35,36,40,42,43,44,45,46,48,49,52,54,55,57,58,59,60,61,62,63,71,74,75,78,79,80,81,82,95,101,102,107,135,150,153,154,156,158,159,161,163,164,166,167,170,173,179,181,183,184,185,186,192,202,204,205,206,208,215,216,223,236,237,238,272,283,286,287,288,289,290,296,299,300,301,316,317,318,320,321,325,326,330,333,337,340,347,351,352,356,362,367,405,409,412,414,415,418,419,420,424,426,428,433,437,439,440,442,447,449,450,452,467,468,469,471,472,474,477,478,479,481,486,488,491,498,499,502,504,505,507,514,515,517,520,521,],[-30,-74,-84,-81,-72,53,-73,56,-69,-32,-86,-68,-83,-114,-71,-80,-90,-115,-78,-70,-37,-82,-77,-75,-34,-79,-85,79,-76,-31,92,-16,97,-33,-122,-87,-88,-36,106,-47,-15,79,-35,-38,79,79,106,106,-103,-123,-89,-91,-93,-96,-162,-204,-125,-17,296,79,-131,-133,-129,79,-130,79,-97,-134,79,-40,-167,-132,-39,-189,-190,-225,-226,-249,-104,-117,-119,106,-48,106,-92,-94,-203,-202,-229,-228,-95,296,79,-42,-179,-177,-98,-41,-168,79,79,-178,106,-57,-250,-227,-116,-145,-120,79,79,106,-259,-255,-230,-126,-163,-176,-43,-180,-166,79,-164,106,-251,-191,-192,-252,79,79,79,79,-260,-254,-256,-257,-261,296,79,-165,79,79,-253,79,79,-258,-262,79,-172,-171,-169,-174,-175,79,-173,-170,]),'XOR_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,305,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'INT':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[42,42,-74,-84,-81,-72,-73,-7,-69,42,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,42,42,-78,-70,-37,-82,-10,-4,-77,-3,-75,42,-79,-85,42,-76,-31,42,-65,-118,42,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,42,-15,42,-35,-14,-38,42,42,-108,-54,42,-109,-53,42,42,42,42,-103,-123,-89,42,42,-91,42,-93,-96,-162,-204,-125,-17,-12,42,42,-40,42,-13,-39,42,42,42,-189,-190,-225,-226,42,-249,-27,-56,-55,42,-104,-117,-119,-59,42,-113,-60,-112,-58,42,-107,-105,42,-106,-67,42,42,-92,-94,42,-203,-202,-229,-228,-95,42,-11,-42,-41,42,42,-57,-28,-250,-146,-227,42,-148,-116,-145,-120,42,-62,-22,-63,-61,42,42,42,-49,42,42,-259,-255,42,-230,-126,-163,-43,-18,42,42,-20,-251,-147,-191,-192,-252,-149,42,-150,42,42,-154,42,42,42,-51,-50,-260,-254,-256,-257,-261,42,42,42,42,-253,-151,42,-152,-155,42,-156,-26,-23,-52,-258,-262,-19,42,42,-24,-153,-157,-21,-25,]),'RSHIFT_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,307,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'LBRACK':([1,2,3,4,5,8,12,13,14,15,17,24,25,28,33,34,35,36,40,42,43,44,45,48,49,52,55,57,58,59,60,61,75,94,101,102,107,111,112,115,116,123,126,127,134,135,137,142,143,148,150,154,180,216,217,223,247,258,262,268,272,283,284,288,289,290,347,352,368,370,371,380,382,385,392,393,394,405,409,412,458,459,460,462,463,467,468,469,471,472,498,499,],[-30,-74,-84,-81,-72,-73,-69,-32,-86,-68,-83,-71,-80,-90,-78,-70,69,-82,-77,-75,-34,-79,-85,-76,-31,-118,-121,-33,-122,-87,-88,69,-35,-185,-123,-89,-91,245,-135,-271,-268,-267,259,-266,-269,-93,-233,-270,-265,-272,-96,285,-265,-117,-186,-119,245,-240,-239,285,-92,-94,285,410,285,-95,-116,-120,-136,-138,-141,-238,-235,-237,285,285,-273,-259,-255,410,-137,-139,-140,-234,-236,-260,-254,-256,-257,-261,-258,-262,]),'SIGNED':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[44,44,-74,-84,-81,-72,-73,-7,-69,44,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,44,44,-78,-70,-37,-82,-10,-4,-77,-3,-75,44,-79,-85,44,-76,-31,44,-65,-118,44,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,44,-15,44,-35,-14,-38,44,44,-108,-54,44,-109,-53,44,44,44,44,-103,-123,-89,44,44,-91,44,-93,-96,-162,-204,-125,-17,-12,44,44,-40,44,-13,-39,44,44,44,-189,-190,-225,-226,44,-249,-27,-56,-55,44,-104,-117,-119,-59,44,-113,-60,-112,-58,44,-107,-105,44,-106,-67,44,44,-92,-94,44,-203,-202,-229,-228,-95,44,-11,-42,-41,44,44,-57,-28,-250,-146,-227,44,-148,-116,-145,-120,44,-62,-22,-63,-61,44,44,44,-49,44,44,-259,-255,44,-230,-126,-163,-43,-18,44,44,-20,-251,-147,-191,-192,-252,-149,44,-150,44,44,-154,44,44,44,-51,-50,-260,-254,-256,-257,-261,44,44,44,44,-253,-151,44,-152,-155,44,-156,-26,-23,-52,-258,-262,-19,44,44,-24,-153,-157,-21,-25,]),'OCTAL_LITERAL':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,123,-15,-38,123,-242,123,123,-244,123,-245,-241,-243,-246,123,123,-17,123,-131,-133,-129,123,123,-130,123,123,-97,-134,123,-40,-167,-132,123,-39,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,123,123,-177,-98,-41,123,-168,123,123,123,123,-178,123,123,123,123,-176,-43,-180,123,-166,123,-164,123,123,123,123,123,-165,123,123,123,123,-172,-171,-169,-174,-175,123,-173,-170,]),'CONTINUE':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,172,-17,-131,-133,-129,172,-130,172,-97,-134,172,-40,-167,-132,-39,172,-42,-179,-177,-98,-41,-168,172,172,-178,-176,-43,-180,-166,172,-164,172,-165,172,172,172,-172,-171,-169,-174,-175,172,-173,-170,]),'MUL_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,311,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'INC':([54,69,71,78,79,115,116,118,119,120,122,123,126,127,129,130,134,136,137,139,142,143,145,146,148,149,158,159,163,164,166,167,168,170,173,177,179,180,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,258,259,260,262,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,380,382,385,390,394,410,418,419,420,422,424,426,428,462,463,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,149,-15,-38,149,-271,-268,-242,149,149,-244,-267,262,-266,149,-245,-269,-241,-233,-243,-270,-265,-246,149,-272,149,-17,149,-131,-133,-129,149,149,-130,149,149,-97,-265,-134,149,-40,-167,-132,149,-39,149,149,149,149,149,149,149,149,149,149,-240,149,149,-239,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,149,149,-177,-98,-41,149,-168,149,149,149,149,-178,149,149,-238,-235,-237,149,-273,149,-176,-43,-180,149,-166,149,-164,-234,-236,149,149,149,149,149,-165,149,149,149,149,-172,-171,-169,-174,-175,149,-173,-170,]),'RSHIFT':([114,115,116,123,125,126,127,131,134,137,140,142,143,144,148,169,180,249,251,258,262,281,282,378,379,380,382,385,386,387,388,389,394,398,399,402,403,404,461,462,463,465,],[-247,-271,-268,-267,-288,-205,-266,-294,-269,-233,274,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-292,-293,-238,-235,-237,274,274,274,274,-273,-290,-289,-295,-297,-296,-210,-234,-236,-248,]),'SUB':([50,51,54,69,71,76,78,79,84,85,86,87,90,91,103,114,115,116,118,119,120,122,123,125,126,127,129,130,131,134,136,137,139,142,143,144,145,146,148,149,158,159,160,163,164,166,167,168,169,170,173,177,179,180,181,183,184,185,186,187,191,192,193,196,199,212,213,220,225,226,228,230,231,232,233,245,248,249,250,251,252,253,254,255,256,258,259,260,262,263,264,265,266,270,271,273,274,275,276,277,278,279,280,281,282,285,296,297,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,329,332,333,339,345,348,357,359,360,363,364,366,378,379,380,382,385,390,394,398,399,402,403,404,410,418,419,420,422,424,426,428,432,434,438,444,448,451,453,454,455,457,461,462,463,464,465,466,474,476,477,478,479,480,481,482,483,484,485,487,489,490,492,495,502,504,505,507,509,510,512,513,514,515,517,520,521,],[89,-65,-16,122,-15,-14,-38,122,-108,-54,89,-109,-53,89,229,-247,-271,-268,-242,122,122,-244,-267,256,-205,-266,122,-245,-294,-269,-241,-233,-243,-270,-265,-291,-246,122,-272,122,-17,122,-12,-131,-133,-129,122,122,-247,-130,122,122,-97,-265,-134,122,-40,-167,-132,122,-13,-39,89,89,89,-56,-55,122,122,-59,229,-113,-60,-112,-58,122,122,-207,122,-209,122,122,122,122,122,-240,122,122,-239,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-208,-206,122,122,-11,122,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,122,122,-177,-98,-41,122,-168,122,122,122,122,-178,122,89,89,-57,-146,-148,122,-62,-63,-61,229,229,-49,-292,-293,-238,-235,-237,122,-273,256,256,-295,-297,-296,122,-176,-43,-180,122,-166,122,-164,89,89,-147,-149,-150,-154,229,229,-51,-50,-210,-234,-236,122,-248,122,122,122,122,-165,122,122,122,89,89,89,89,-151,-152,-155,-156,-52,122,-172,-171,-169,89,89,-153,-157,-174,-175,122,-173,-170,]),'DEFAULT':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,175,-17,-131,-133,-129,175,-130,175,-97,-134,175,-40,-167,-132,-39,175,-42,-179,-177,-98,-41,-168,175,175,-178,-176,-43,-180,-166,175,-164,175,-165,175,175,175,-172,-171,-169,-174,-175,175,-173,-170,]),'CHAR':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[8,8,-74,-84,-81,-72,-73,-7,-69,8,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,8,8,-78,-70,-37,-82,-10,-4,-77,-3,-75,8,-79,-85,8,-76,-31,8,-65,-118,8,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,8,-15,8,-35,-14,-38,8,8,-108,-54,8,-109,-53,8,8,8,8,-103,-123,-89,8,8,-91,8,-93,-96,-162,-204,-125,-17,-12,8,8,-40,8,-13,-39,8,8,8,-189,-190,-225,-226,8,-249,-27,-56,-55,8,-104,-117,-119,-59,8,-113,-60,-112,-58,8,-107,-105,8,-106,-67,8,8,-92,-94,8,-203,-202,-229,-228,-95,8,-11,-42,-41,8,8,-57,-28,-250,-146,-227,8,-148,-116,-145,-120,8,-62,-22,-63,-61,8,8,8,-49,8,8,-259,-255,8,-230,-126,-163,-43,-18,8,8,-20,-251,-147,-191,-192,-252,-149,8,-150,8,8,-154,8,8,8,-51,-50,-260,-254,-256,-257,-261,8,8,8,8,-253,-151,8,-152,-155,8,-156,-26,-23,-52,-258,-262,-19,8,8,-24,-153,-157,-21,-25,]),'LSHIFT_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,309,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'WHILE':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,327,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,176,-17,-131,-133,-129,176,-130,176,-97,-134,176,-40,-167,-132,-39,176,-42,-179,-177,-98,-41,-168,176,176,-178,429,-176,-43,-180,-166,176,-164,176,-165,176,176,176,-172,-171,-169,-174,-175,176,-173,-170,]),'EXTERN':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,101,102,103,107,135,150,153,154,156,158,160,161,167,184,191,192,193,196,199,202,204,205,206,208,211,212,213,216,223,226,228,230,231,232,233,243,246,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,352,356,357,358,359,360,362,363,364,366,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[15,15,-74,-84,-81,-72,-73,-7,-69,15,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,15,15,-78,-70,-37,-82,-10,-4,-77,-3,-75,15,-79,-85,15,-76,-31,15,-65,-118,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,15,-15,15,-35,-14,-38,15,15,-108,-54,15,-109,-53,15,-123,-89,15,-91,-93,-96,-162,-204,-125,-17,-12,15,15,-40,-13,-39,15,15,15,-189,-190,-225,-226,-249,-27,-56,-55,-117,-119,-59,15,-113,-60,-112,-58,-67,15,-92,-94,15,-203,-202,-229,-228,-95,15,-11,-42,-41,15,15,-57,-28,-250,-146,-227,15,-148,-116,-120,15,-62,-22,-63,-61,15,15,15,-49,15,-259,-255,15,-230,-126,-163,-43,-18,15,15,-20,-251,-147,-191,-192,-252,-149,15,-150,15,15,-154,15,15,15,-51,-50,-260,-254,-256,-257,-261,15,15,15,15,-253,-151,15,-152,-155,15,-156,-26,-23,-52,-258,-262,-19,15,15,-24,-153,-157,-21,-25,]),'MUL':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,26,27,31,33,34,36,37,38,39,40,41,42,43,44,45,48,49,52,54,55,57,58,59,63,65,66,67,68,69,71,75,76,77,78,79,94,96,101,103,110,114,115,116,118,119,120,122,123,126,127,129,130,131,134,136,137,139,142,143,144,145,146,148,149,154,157,158,159,160,163,164,166,167,168,169,170,173,177,179,180,181,183,184,185,186,187,191,192,211,216,217,220,223,225,226,228,230,231,232,233,243,245,248,249,250,251,252,253,254,255,256,258,259,260,262,263,264,265,266,268,270,271,273,274,275,276,277,278,279,280,281,282,284,285,296,297,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,335,347,348,350,352,357,358,359,360,363,364,366,378,379,380,382,385,390,392,394,402,403,404,410,418,419,420,422,424,426,428,431,435,448,451,453,454,455,457,461,462,463,464,465,466,474,476,477,478,479,480,481,487,489,490,492,493,494,495,502,504,505,507,508,511,512,513,514,515,517,518,519,520,521,],[14,-30,-74,-84,-81,-72,-73,-7,-69,-32,14,-68,-6,-83,-5,-1,-8,-71,-80,14,-9,14,-78,-70,-82,-10,14,-4,-77,-3,-75,-34,-79,-85,-76,-31,-118,-16,-121,-33,-122,14,-47,-66,-29,-2,14,118,-15,-35,-14,14,-38,118,-185,14,-123,14,14,-247,-271,-268,-242,118,118,-244,-267,-205,-266,118,-245,-294,-269,-241,-233,-243,-270,-265,278,-246,118,-272,118,14,14,-17,118,-12,-131,-133,-129,118,118,-247,-130,118,118,-97,-265,-134,118,-40,-167,-132,118,-13,-39,-27,-117,-186,118,-119,118,-59,14,-113,-60,-112,-58,-67,118,118,-207,118,-209,118,118,118,118,118,-240,118,118,-239,118,118,118,118,14,118,118,118,118,118,118,118,118,118,118,-208,-206,14,118,118,-11,118,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,118,118,-177,-98,-41,118,-168,118,118,118,118,-178,118,-28,-116,118,14,-120,-62,-22,-63,-61,14,14,-49,278,278,-238,-235,-237,118,14,-273,-295,-297,-296,118,-176,-43,-180,118,-166,118,-164,-18,-20,-150,-154,14,14,-51,-50,-210,-234,-236,118,-248,118,118,118,118,-165,118,118,118,-151,-152,-155,-156,-26,-23,-52,118,-172,-171,-169,-19,-24,-153,-157,-174,-175,118,-21,-25,-173,-170,]),'DOT':([115,116,123,126,127,134,137,142,143,148,180,258,262,380,382,385,394,462,463,],[-271,-268,-267,261,-266,-269,-233,-270,-265,-272,-265,-240,-239,-238,-235,-237,-273,-234,-236,]),'CASE':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,177,-17,-131,-133,-129,177,-130,177,-97,-134,177,-40,-167,-132,-39,177,-42,-179,-177,-98,-41,-168,177,177,-178,-176,-43,-180,-166,177,-164,177,-165,177,177,177,-172,-171,-169,-174,-175,177,-173,-170,]),'REGISTER':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,101,102,103,107,135,150,153,154,156,158,160,161,167,184,191,192,193,196,199,202,204,205,206,208,211,212,213,216,223,226,228,230,231,232,233,243,246,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,352,356,357,358,359,360,362,363,364,366,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[24,24,-74,-84,-81,-72,-73,-7,-69,24,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,24,24,-78,-70,-37,-82,-10,-4,-77,-3,-75,24,-79,-85,24,-76,-31,24,-65,-118,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,24,-15,24,-35,-14,-38,24,24,-108,-54,24,-109,-53,24,-123,-89,24,-91,-93,-96,-162,-204,-125,-17,-12,24,24,-40,-13,-39,24,24,24,-189,-190,-225,-226,-249,-27,-56,-55,-117,-119,-59,24,-113,-60,-112,-58,-67,24,-92,-94,24,-203,-202,-229,-228,-95,24,-11,-42,-41,24,24,-57,-28,-250,-146,-227,24,-148,-116,-120,24,-62,-22,-63,-61,24,24,24,-49,24,-259,-255,24,-230,-126,-163,-43,-18,24,24,-20,-251,-147,-191,-192,-252,-149,24,-150,24,24,-154,24,24,24,-51,-50,-260,-254,-256,-257,-261,24,24,24,24,-253,-151,24,-152,-155,24,-156,-26,-23,-52,-258,-262,-19,24,24,-24,-153,-157,-21,-25,]),'SWITCH':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,178,-17,-131,-133,-129,178,-130,178,-97,-134,178,-40,-167,-132,-39,178,-42,-179,-177,-98,-41,-168,178,178,-178,-176,-43,-180,-166,178,-164,178,-165,178,178,178,-172,-171,-169,-174,-175,178,-173,-170,]),'AND_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,310,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'TILDE':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,130,-15,-38,130,-242,130,130,-244,130,-245,-241,-243,-246,130,130,-17,130,-131,-133,-129,130,130,-130,130,130,-97,-134,130,-40,-167,-132,130,-39,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,130,130,-177,-98,-41,130,-168,130,130,130,130,-178,130,130,130,130,-176,-43,-180,130,-166,130,-164,130,130,130,130,130,-165,130,130,130,130,-172,-171,-169,-174,-175,130,-173,-170,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,33,34,36,37,38,39,40,41,42,43,44,45,47,48,49,52,54,55,56,57,58,59,60,63,65,66,67,68,69,70,71,75,76,77,78,79,83,88,89,94,96,97,101,102,103,104,105,108,110,113,118,119,120,122,129,130,136,139,145,146,149,154,157,158,159,160,163,164,165,166,167,168,170,173,177,179,181,183,184,185,186,187,191,192,194,195,200,201,204,206,210,211,216,217,220,223,224,225,226,227,228,229,230,231,232,233,243,245,246,248,250,252,253,254,255,256,257,259,260,261,263,264,265,266,270,271,273,274,275,276,277,278,279,280,284,285,289,291,296,297,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,334,335,336,337,340,343,347,348,350,352,355,357,358,359,360,361,363,364,366,390,410,418,419,420,422,424,426,428,431,435,437,441,442,443,448,451,453,454,455,457,464,466,474,476,477,478,479,480,481,486,487,489,490,492,493,494,495,502,504,505,507,508,511,512,513,514,515,517,518,519,520,521,],[28,-30,-74,-84,-81,-72,51,52,-73,-7,55,-69,-32,-86,-68,-6,-83,28,-5,-1,-114,63,-8,-71,-80,28,-9,-115,63,28,-78,-70,-82,-10,28,-4,-77,-3,-75,-34,-79,-85,63,-76,-31,-118,-16,-121,100,-33,-122,-87,-88,-47,-66,-29,-2,112,143,151,-15,-35,-14,28,-38,180,51,208,208,-185,28,100,-123,-89,28,234,237,63,112,112,-242,143,143,-244,143,-245,-241,-243,-246,143,143,28,28,-17,143,-12,-131,-133,298,-129,180,143,-130,180,143,-97,-134,180,-40,-167,-132,143,-13,-39,237,234,337,208,208,-226,208,-27,-117,-186,143,-119,100,143,-59,208,28,208,-113,-60,-112,-58,-67,143,151,143,143,143,143,143,143,143,380,143,143,385,143,143,143,143,143,143,143,143,143,143,143,143,143,143,28,143,28,413,143,-11,180,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,143,143,-177,-98,-41,143,-168,180,143,143,180,-178,143,51,-28,437,-250,-227,442,-116,143,28,-120,208,-62,-22,-63,-61,208,28,28,-49,143,143,-176,-43,-180,143,-166,180,-164,-18,-20,-251,486,-252,-193,-150,-154,28,28,-51,-50,143,143,143,143,180,-165,180,143,180,-253,-151,-152,-155,-156,-26,-23,-52,180,-172,-171,-169,-19,-24,-153,-157,-174,-175,180,-21,-25,-173,-170,]),'ADD_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,313,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'AND':([114,115,116,117,121,123,124,125,126,127,128,131,134,137,138,140,141,142,143,144,148,169,180,249,251,258,262,281,282,374,376,377,378,379,380,382,385,386,387,388,389,394,396,397,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,-269,-233,273,-283,-278,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-277,-279,-264,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,273,-232,-290,-289,-282,-281,-295,-297,-296,-210,-234,-236,-248,]),'DECIMAL_LITERAL':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,134,-15,-38,134,-242,134,134,-244,134,-245,-241,-243,-246,134,134,-17,134,-131,-133,-129,134,134,-130,134,134,-97,-134,134,-40,-167,-132,134,-39,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,134,134,-177,-98,-41,134,-168,134,134,134,134,-178,134,134,134,134,-176,-43,-180,134,-166,134,-164,134,134,134,134,134,-165,134,134,134,134,-172,-171,-169,-174,-175,134,-173,-170,]),'BITAND':([54,69,71,78,79,114,115,116,118,119,120,121,122,123,125,126,127,128,129,130,131,134,136,137,139,140,141,142,143,144,145,146,148,149,158,159,163,164,166,167,168,169,170,173,177,179,180,181,183,184,185,186,187,192,220,225,245,248,249,250,251,252,253,254,255,256,258,259,260,262,263,264,265,266,270,271,273,274,275,276,277,278,279,280,281,282,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,374,376,378,379,380,382,385,386,387,388,389,390,394,398,399,400,401,402,403,404,410,418,419,420,422,424,426,428,461,462,463,464,465,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,136,-15,-38,136,-247,-271,-268,-242,136,136,253,-244,-267,-288,-205,-266,-280,136,-245,-294,-269,-241,-233,-243,-283,-278,-270,-265,-291,-246,136,-272,136,-17,136,-131,-133,-129,136,136,-247,-130,136,136,-97,-265,-134,136,-40,-167,-132,136,-39,136,136,136,136,-207,136,-209,136,136,136,136,136,-240,136,136,-239,136,136,136,136,136,136,136,136,136,136,136,136,136,136,-208,-206,136,136,136,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,136,136,-177,-98,-41,136,-168,136,136,136,136,-178,136,136,253,-279,-292,-293,-238,-235,-237,-286,-287,-284,-285,136,-273,-290,-289,-282,-281,-295,-297,-296,136,-176,-43,-180,136,-166,136,-164,-210,-234,-236,136,-248,136,136,136,136,-165,136,136,136,136,-172,-171,-169,-174,-175,136,-173,-170,]),'MOD_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,304,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'TYPE_NAME':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[17,17,-74,-84,-81,-72,-73,-7,-69,17,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,17,17,-78,-70,-37,-82,-10,-4,-77,-3,-75,17,-79,-85,17,-76,-31,17,-65,-118,17,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,17,-15,17,-35,-14,-38,17,17,-108,-54,17,-109,-53,17,17,17,17,-103,-123,-89,17,17,-91,17,-93,-96,-162,-204,-125,-17,-12,17,17,-40,17,-13,-39,17,17,17,-189,-190,-225,-226,17,-249,-27,-56,-55,17,-104,-117,-119,-59,17,-113,-60,-112,-58,17,-107,-105,17,-106,-67,17,17,-92,-94,17,-203,-202,-229,-228,-95,17,-11,-42,-41,17,17,-57,-28,-250,-146,-227,17,-148,-116,-145,-120,17,-62,-22,-63,-61,17,17,17,-49,17,17,-259,-255,17,-230,-126,-163,-43,-18,17,17,-20,-251,-147,-191,-192,-252,-149,17,-150,17,17,-154,17,17,17,-51,-50,-260,-254,-256,-257,-261,17,17,17,17,-253,-151,17,-152,-155,17,-156,-26,-23,-52,-258,-262,-19,17,17,-24,-153,-157,-21,-25,]),'OR_ASSIGN':([114,115,116,123,126,127,134,137,142,143,148,169,180,249,251,258,262,281,282,380,382,385,394,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-269,-233,-270,-265,-272,308,-265,-207,-209,-240,-239,-208,-206,-238,-235,-237,-273,-210,-234,-236,-248,]),'BREAK':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,182,-17,-131,-133,-129,182,-130,182,-97,-134,182,-40,-167,-132,-39,182,-42,-179,-177,-98,-41,-168,182,182,-178,-176,-43,-180,-166,182,-164,182,-165,182,182,182,-172,-171,-169,-174,-175,182,-173,-170,]),'VOLATILE':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,101,102,103,107,135,150,153,154,156,158,160,161,167,184,191,192,193,196,199,202,204,205,206,208,211,212,213,216,223,226,228,230,231,232,233,243,246,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,352,356,357,358,359,360,362,363,364,366,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[45,45,-74,-84,-81,-72,-73,-7,-69,45,45,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,45,45,-78,-70,-37,-82,-10,-4,-77,-3,-75,45,-79,-85,45,-76,-31,45,-65,-118,-16,-121,-33,-122,45,-88,-36,-47,-66,-29,-2,45,-15,45,-35,-14,-38,45,45,-108,-54,45,-109,-53,45,-123,-89,45,-91,-93,-96,-162,-204,-125,-17,-12,45,45,-40,-13,-39,45,45,45,-189,-190,-225,-226,-249,-27,-56,-55,-117,-119,-59,45,-113,-60,-112,-58,-67,45,-92,-94,45,-203,-202,-229,-228,-95,45,-11,-42,-41,45,45,-57,-28,-250,-146,-227,45,-148,-116,-120,45,-62,-22,-63,-61,45,45,45,-49,45,-259,-255,45,-230,-126,-163,-43,-18,45,45,-20,-251,-147,-191,-192,-252,-149,45,-150,45,45,-154,45,45,45,-51,-50,-260,-254,-256,-257,-261,45,45,45,45,-253,-151,45,-152,-155,45,-156,-26,-23,-52,-258,-262,-19,45,45,-24,-153,-157,-21,-25,]),'PUBLIC':([106,],[242,]),'DO':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,183,-17,-131,-133,-129,183,-130,183,-97,-134,183,-40,-167,-132,-39,183,-42,-179,-177,-98,-41,-168,183,183,-178,-176,-43,-180,-166,183,-164,183,-165,183,183,183,-172,-171,-169,-174,-175,183,-173,-170,]),'CONST':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,101,102,103,107,135,150,153,154,156,158,160,161,167,184,191,192,193,196,199,202,204,205,206,208,211,212,213,216,223,226,228,230,231,232,233,243,246,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,352,356,357,358,359,360,362,363,364,366,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[3,3,-74,-84,-81,-72,-73,-7,-69,3,3,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,3,3,-78,-70,-37,-82,-10,-4,-77,-3,-75,3,-79,-85,3,-76,-31,3,-65,-118,-16,-121,-33,-122,3,-88,-36,-47,-66,-29,-2,3,-15,3,-35,-14,-38,3,3,-108,-54,3,-109,-53,3,-123,-89,3,-91,-93,-96,-162,-204,-125,-17,-12,3,3,-40,-13,-39,3,3,3,-189,-190,-225,-226,-249,-27,-56,-55,-117,-119,-59,3,-113,-60,-112,-58,-67,3,-92,-94,3,-203,-202,-229,-228,-95,3,-11,-42,-41,3,3,-57,-28,-250,-146,-227,3,-148,-116,-120,3,-62,-22,-63,-61,3,3,3,-49,3,-259,-255,3,-230,-126,-163,-43,-18,3,3,-20,-251,-147,-191,-192,-252,-149,3,-150,3,3,-154,3,3,3,-51,-50,-260,-254,-256,-257,-261,3,3,3,3,-253,-151,3,-152,-155,3,-156,-26,-23,-52,-258,-262,-19,3,3,-24,-153,-157,-21,-25,]),'BITXOR':([114,115,116,117,121,123,125,126,127,128,131,134,137,140,141,142,143,144,148,169,180,249,251,258,262,281,282,374,376,377,378,379,380,382,385,386,387,388,389,394,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,248,-276,-267,-288,-205,-266,-280,-294,-269,-233,-283,-278,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-277,-279,248,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-290,-289,-282,-281,-295,-297,-296,-210,-234,-236,-248,]),'EQUAL':([114,115,116,123,125,126,127,128,131,134,137,140,141,142,143,144,148,169,180,249,251,258,262,281,282,376,378,379,380,382,385,386,387,388,389,394,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,-267,-288,-205,-266,-280,-294,-269,-233,-283,277,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,277,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-290,-289,-282,-281,-295,-297,-296,-210,-234,-236,-248,]),'LSHIFT':([114,115,116,123,125,126,127,131,134,137,140,142,143,144,148,169,180,249,251,258,262,281,282,378,379,380,382,385,386,387,388,389,394,398,399,402,403,404,461,462,463,465,],[-247,-271,-268,-267,-288,-205,-266,-294,-269,-233,275,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-292,-293,-238,-235,-237,275,275,275,275,-273,-290,-289,-295,-297,-296,-210,-234,-236,-248,]),'DIV':([114,115,116,123,126,127,131,134,137,142,143,144,148,169,180,249,251,258,262,281,282,378,379,380,382,385,394,402,403,404,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-294,-269,-233,-270,-265,280,-272,-247,-265,-207,-209,-240,-239,-208,-206,280,280,-238,-235,-237,-273,-295,-297,-296,-210,-234,-236,-248,]),'GOTO':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,165,-17,-131,-133,-129,165,-130,165,-97,-134,165,-40,-167,-132,-39,165,-42,-179,-177,-98,-41,-168,165,165,-178,-176,-43,-180,-166,165,-164,165,-165,165,165,165,-172,-171,-169,-174,-175,165,-173,-170,]),'LE':([114,115,116,123,125,126,127,128,131,134,137,140,142,143,144,148,169,180,249,251,258,262,281,282,378,379,380,382,385,386,387,388,389,394,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,-267,-288,-205,-266,263,-294,-269,-233,-283,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-290,-289,263,263,-295,-297,-296,-210,-234,-236,-248,]),'SEMI':([1,2,3,4,5,8,9,12,13,14,15,17,24,25,28,33,34,35,36,38,40,42,43,44,45,48,49,52,54,55,57,58,59,60,61,71,72,73,74,75,77,78,79,101,102,107,109,111,112,114,115,116,117,121,123,124,125,126,127,128,131,132,134,135,137,138,140,141,142,143,144,147,148,150,153,154,156,158,162,163,164,166,167,168,169,170,172,173,174,179,180,181,182,183,184,185,186,188,190,192,202,203,204,205,206,208,209,216,218,219,221,223,247,249,251,258,262,272,281,282,283,286,287,288,289,290,293,294,295,298,299,300,301,302,315,316,317,318,320,321,325,326,337,338,340,346,347,349,352,368,370,371,374,376,377,378,379,380,382,385,386,387,388,389,394,396,397,398,399,400,401,402,403,404,405,409,412,414,415,418,419,420,421,422,423,424,426,428,437,439,440,442,445,446,458,459,460,461,462,463,465,467,468,469,471,472,475,477,478,479,481,486,497,498,499,501,502,504,505,507,514,515,516,517,520,521,],[-30,-74,-84,-81,-72,-73,54,-69,-32,-86,-68,-83,-71,-80,-90,-78,-70,-37,-82,71,-77,-75,-34,-79,-85,-76,-31,-118,-16,-121,-33,-122,-87,-88,-36,-15,-45,158,-101,-35,71,-38,185,-123,-89,-91,-44,-100,-135,-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,-160,-269,-93,-233,-198,-283,-278,-270,-265,-291,-124,-272,-96,-162,-204,-125,-17,-101,-131,-133,-129,185,301,-247,-130,316,185,320,-97,-265,-134,326,185,-40,-167,-132,-200,-181,-39,-189,339,-190,-225,-226,-249,345,-117,-187,-222,351,-119,-99,-207,-209,-240,-239,-92,-208,-206,-94,-203,-202,-229,-228,-95,-46,-102,-142,418,185,-42,-179,420,185,-177,-98,-41,-168,185,185,-178,-250,438,-227,444,-116,-223,-120,-136,-138,-141,-277,-279,-264,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-199,-232,-290,-289,-282,-281,-295,-297,-296,-259,-255,-230,-126,-163,-176,-43,-180,-182,185,-201,-166,185,-164,-251,-191,-192,-252,-224,-188,-137,-139,-140,-210,-234,-236,-248,-260,-254,-256,-257,-261,-143,185,-165,185,185,-253,-161,-258,-262,-144,185,-172,-171,-169,-174,-175,520,185,-173,-170,]),')':([234,235,331,],[-64,363,434,]),'QUESTION':([114,115,116,117,121,123,124,125,126,127,128,131,132,134,137,138,140,141,142,143,144,148,169,180,249,251,258,262,281,282,374,376,377,378,379,380,382,385,386,387,388,389,394,396,397,398,399,400,401,402,403,404,461,462,463,465,],[-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,270,-269,-233,-198,-283,-278,-270,-265,-291,-272,-247,-265,-207,-209,-240,-239,-208,-206,-277,-279,-264,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-199,-232,-290,-289,-282,-281,-295,-297,-296,-210,-234,-236,-248,]),'PRIVATE':([106,],[240,]),'LT':([47,50,51,114,115,116,123,125,126,127,128,131,134,137,140,142,143,144,148,169,180,237,249,251,258,262,281,282,330,378,379,380,382,385,386,387,388,389,394,398,399,400,401,402,403,404,434,461,462,463,465,],[83,83,-65,-247,-271,-268,-267,-288,-205,-266,265,-294,-269,-233,-283,-270,-265,-291,-272,-247,-265,-48,-207,-209,-240,-239,-208,-206,83,-292,-293,-238,-235,-237,-286,-287,-284,-285,-273,-290,-289,265,265,-295,-297,-296,83,-210,-234,-236,-248,]),'COMMA':([1,2,3,4,5,8,12,13,14,15,17,24,25,28,33,34,35,36,40,42,43,44,45,48,49,51,52,55,57,58,59,60,61,63,65,66,72,73,74,75,98,99,100,101,102,107,114,115,116,117,121,123,124,125,126,127,128,131,132,134,135,137,138,140,141,142,143,144,147,148,150,151,153,154,155,156,162,169,174,180,188,190,197,198,204,206,216,218,219,221,222,223,243,249,251,258,262,269,272,281,282,283,286,287,288,289,290,293,294,295,302,337,340,347,349,352,353,354,373,374,376,377,378,379,380,381,382,383,384,385,386,387,388,389,394,395,396,397,398,399,400,401,402,403,404,405,409,412,413,415,416,417,421,423,425,427,430,436,437,442,445,446,461,462,463,465,467,468,469,471,472,475,486,496,497,498,499,500,501,503,506,],[-30,-74,-84,-81,-72,-73,-69,-32,-86,-68,-83,-71,-80,-90,-78,-70,-37,-82,-77,-75,-34,-79,-85,-76,-31,-65,-118,-121,-33,-122,-87,-88,-36,-47,-66,108,-45,157,-101,-35,-158,224,-196,-123,-89,-91,-247,-271,-268,-263,-276,-267,-231,-288,-205,-266,-280,-294,-160,-269,-93,-233,-198,-283,-278,-270,-265,-291,-124,-272,-96,-127,-162,-204,291,292,-101,-247,319,-265,-200,-181,334,-110,342,-226,-117,-187,-222,350,224,-119,-67,-207,-209,-240,-239,319,-92,-208,-206,-94,-203,-202,-229,-228,-95,-46,-102,-142,319,-250,-227,-116,-223,-120,-159,-197,291,-277,-279,-264,-292,-293,-238,319,-235,-274,464,-237,-286,-287,-284,-285,-273,319,-199,-232,-290,-289,-282,-281,-295,-297,-296,-259,-255,-230,-128,-163,-183,474,-182,-201,319,319,319,-111,-251,-252,-224,-188,-210,-234,-236,-248,-260,-254,-256,-257,-261,-143,-253,-275,-161,-258,-262,-184,-144,319,319,]),'LP':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,52,54,55,57,58,59,60,61,63,65,66,67,68,69,71,75,76,77,78,79,88,89,94,96,101,102,103,107,110,111,112,113,115,116,118,119,120,122,123,126,127,129,130,134,135,136,137,139,142,143,145,146,148,149,150,154,157,158,159,160,163,164,166,167,168,170,171,173,176,177,178,179,180,181,183,184,185,186,187,189,191,192,200,211,216,217,220,223,225,226,227,228,229,230,231,232,233,243,245,247,248,250,252,253,254,255,256,258,259,260,262,263,264,265,266,268,270,271,272,273,274,275,276,277,278,279,280,283,284,285,288,289,290,296,297,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,335,343,347,348,350,352,357,358,359,360,363,364,366,368,370,371,380,382,385,390,392,393,394,405,409,410,412,418,419,420,422,424,426,428,429,431,435,448,451,453,454,455,457,458,459,460,462,463,464,466,467,468,469,471,472,474,476,477,478,479,480,481,487,489,490,492,493,494,495,498,499,502,504,505,507,508,511,512,513,514,515,517,518,519,520,521,],[26,-30,-74,-84,-81,-72,-73,-7,-69,-32,-86,-68,-6,-83,26,-5,-1,-8,-71,-80,26,-9,-90,26,-78,-70,70,-82,-10,26,-4,-77,-3,-75,-34,-79,-85,-76,-31,-118,-16,-121,-33,-122,-87,-88,70,-47,-66,-29,-2,110,129,-15,-35,-14,26,-38,187,207,207,-185,26,-123,-89,26,-91,110,246,-135,110,-271,-268,-242,250,252,-244,-267,260,-266,187,-245,-269,-93,-241,-233,-243,-270,-265,-246,129,-272,250,-96,284,26,-17,187,-12,-131,-133,-129,187,187,-130,315,187,322,129,324,-97,-265,-134,187,-40,-167,-132,187,328,-13,-39,207,-27,-117,-186,129,-119,129,-59,207,26,207,-113,-60,-112,-58,-67,129,246,129,187,187,129,129,129,129,-240,187,187,-239,129,129,129,129,392,187,129,-92,129,129,129,129,129,129,129,129,-94,284,129,411,284,-95,187,-11,187,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,187,187,-177,-98,-41,187,-168,187,187,187,187,-178,187,-28,207,-116,129,26,-120,-62,-22,-63,-61,26,26,-49,-136,-138,-141,-238,-235,-237,129,392,392,-273,-259,-255,129,411,-176,-43,-180,187,-166,187,-164,480,-18,-20,-150,-154,26,26,-51,-50,-137,-139,-140,-234,-236,187,129,-260,-254,-256,-257,-261,187,187,187,-165,187,187,187,-151,-152,-155,-156,-26,-23,-52,-258,-262,187,-172,-171,-169,-19,-24,-153,-157,-174,-175,187,-21,-25,-173,-170,]),'CLASS':([0,10,16,19,20,23,27,31,37,39,41,54,63,65,66,67,71,76,158,160,184,191,211,243,297,300,318,335,358,419,431,435,493,494,508,511,518,519,],[30,-7,-6,-5,-1,-8,-9,30,-10,-4,-3,-16,-47,-66,-29,-2,-15,-14,-17,-12,-40,-13,-27,-67,-11,-42,-41,-28,-22,-43,-18,-20,-26,-23,-19,-24,-21,-25,]),'TYPEDEF':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,54,55,57,58,59,60,61,63,65,66,67,71,74,75,76,78,79,80,84,85,86,87,90,91,101,102,103,107,135,150,153,154,156,158,160,161,167,184,191,192,193,196,199,202,204,205,206,208,211,212,213,216,223,226,228,230,231,232,233,243,272,283,286,287,288,289,290,297,300,318,329,332,333,335,337,339,340,345,347,352,356,357,358,359,360,362,363,364,366,405,409,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[32,-30,-74,-84,-81,-72,-73,-7,-69,-32,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,32,-78,-70,-37,-82,-10,-4,-77,-3,-75,-34,-79,-85,32,-76,-31,32,-65,-118,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,-15,32,-35,-14,-38,32,32,-108,-54,32,-109,-53,32,-123,-89,32,-91,-93,-96,-162,-204,-125,-17,-12,32,32,-40,-13,-39,32,32,32,-189,-190,-225,-226,-249,-27,-56,-55,-117,-119,-59,32,-113,-60,-112,-58,-67,-92,-94,-203,-202,-229,-228,-95,-11,-42,-41,32,32,-57,-28,-250,-146,-227,-148,-116,-120,32,-62,-22,-63,-61,32,32,32,-49,-259,-255,-230,-126,-163,-43,-18,32,32,-20,-251,-147,-191,-192,-252,-149,32,-150,32,32,-154,32,32,32,-51,-50,-260,-254,-256,-257,-261,32,32,32,32,-253,-151,32,-152,-155,32,-156,-26,-23,-52,-258,-262,-19,32,32,-24,-153,-157,-21,-25,]),'ENUM':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[11,11,-74,-84,-81,-72,-73,-7,-69,11,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,11,11,-78,-70,-37,-82,-10,-4,-77,-3,-75,11,-79,-85,11,-76,-31,11,-65,-118,11,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,11,-15,11,-35,-14,-38,11,11,-108,-54,11,-109,-53,11,11,11,11,-103,-123,-89,11,11,-91,11,-93,-96,-162,-204,-125,-17,-12,11,11,-40,11,-13,-39,11,11,11,-189,-190,-225,-226,11,-249,-27,-56,-55,11,-104,-117,-119,-59,11,-113,-60,-112,-58,11,-107,-105,11,-106,-67,11,11,-92,-94,11,-203,-202,-229,-228,-95,11,-11,-42,-41,11,11,-57,-28,-250,-146,-227,11,-148,-116,-145,-120,11,-62,-22,-63,-61,11,11,11,-49,11,11,-259,-255,11,-230,-126,-163,-43,-18,11,11,-20,-251,-147,-191,-192,-252,-149,11,-150,11,11,-154,11,11,11,-51,-50,-260,-254,-256,-257,-261,11,11,11,11,-253,-151,11,-152,-155,11,-156,-26,-23,-52,-258,-262,-19,11,11,-24,-153,-157,-21,-25,]),'PROTOCOL':([0,10,16,19,20,23,27,31,37,39,41,54,63,65,66,67,71,76,158,160,184,191,211,243,297,300,318,335,358,419,431,435,493,494,508,511,518,519,],[6,-7,-6,-5,-1,-8,-9,6,-10,-4,-3,-16,-47,-66,-29,-2,-15,-14,-17,-12,-40,-13,-27,-67,-11,-42,-41,-28,-22,-43,-18,-20,-26,-23,-19,-24,-21,-25,]),'AUTO':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,101,102,103,107,135,150,153,154,156,158,160,161,167,184,191,192,193,196,199,202,204,205,206,208,211,212,213,216,223,226,228,230,231,232,233,243,246,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,352,356,357,358,359,360,362,363,364,366,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[34,34,-74,-84,-81,-72,-73,-7,-69,34,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,34,34,-78,-70,-37,-82,-10,-4,-77,-3,-75,34,-79,-85,34,-76,-31,34,-65,-118,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,34,-15,34,-35,-14,-38,34,34,-108,-54,34,-109,-53,34,-123,-89,34,-91,-93,-96,-162,-204,-125,-17,-12,34,34,-40,-13,-39,34,34,34,-189,-190,-225,-226,-249,-27,-56,-55,-117,-119,-59,34,-113,-60,-112,-58,-67,34,-92,-94,34,-203,-202,-229,-228,-95,34,-11,-42,-41,34,34,-57,-28,-250,-146,-227,34,-148,-116,-120,34,-62,-22,-63,-61,34,34,34,-49,34,-259,-255,34,-230,-126,-163,-43,-18,34,34,-20,-251,-147,-191,-192,-252,-149,34,-150,34,34,-154,34,34,34,-51,-50,-260,-254,-256,-257,-261,34,34,34,34,-253,-151,34,-152,-155,34,-156,-26,-23,-52,-258,-262,-19,34,34,-24,-153,-157,-21,-25,]),'BANG':([54,69,71,78,79,118,119,120,122,129,130,136,139,145,146,149,158,159,163,164,166,167,168,170,173,177,179,181,183,184,185,186,187,192,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,348,390,410,418,419,420,422,424,426,428,464,466,474,476,477,478,479,480,481,502,504,505,507,514,515,517,520,521,],[-16,145,-15,-38,145,-242,145,145,-244,145,-245,-241,-243,-246,145,145,-17,145,-131,-133,-129,145,145,-130,145,145,-97,-134,145,-40,-167,-132,145,-39,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,145,145,-177,-98,-41,145,-168,145,145,145,145,-178,145,145,145,145,-176,-43,-180,145,-166,145,-164,145,145,145,145,145,-165,145,145,145,145,-172,-171,-169,-174,-175,145,-173,-170,]),'IF':([54,71,78,79,158,163,164,166,167,170,173,179,181,183,184,185,186,192,299,300,301,316,317,318,320,321,325,326,418,419,420,424,426,428,477,478,479,481,502,504,505,507,514,515,517,520,521,],[-16,-15,-38,189,-17,-131,-133,-129,189,-130,189,-97,-134,189,-40,-167,-132,-39,189,-42,-179,-177,-98,-41,-168,189,189,-178,-176,-43,-180,-166,189,-164,189,-165,189,189,189,-172,-171,-169,-174,-175,189,-173,-170,]),'STRUCT':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[21,21,-74,-84,-81,-72,-73,-7,-69,21,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,21,21,-78,-70,-37,-82,-10,-4,-77,-3,-75,21,-79,-85,21,-76,-31,21,-65,-118,21,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,21,-15,21,-35,-14,-38,21,21,-108,-54,21,-109,-53,21,21,21,21,-103,-123,-89,21,21,-91,21,-93,-96,-162,-204,-125,-17,-12,21,21,-40,21,-13,-39,21,21,21,-189,-190,-225,-226,21,-249,-27,-56,-55,21,-104,-117,-119,-59,21,-113,-60,-112,-58,21,-107,-105,21,-106,-67,21,21,-92,-94,21,-203,-202,-229,-228,-95,21,-11,-42,-41,21,21,-57,-28,-250,-146,-227,21,-148,-116,-145,-120,21,-62,-22,-63,-61,21,21,21,-49,21,21,-259,-255,21,-230,-126,-163,-43,-18,21,21,-20,-251,-147,-191,-192,-252,-149,21,-150,21,21,-154,21,21,21,-51,-50,-260,-254,-256,-257,-261,21,21,21,21,-253,-151,21,-152,-155,21,-156,-26,-23,-52,-258,-262,-19,21,21,-24,-153,-157,-21,-25,]),'FLOAT':([0,1,2,3,4,5,8,10,12,13,14,15,16,17,19,20,23,24,25,27,28,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,57,58,59,60,61,63,65,66,67,70,71,74,75,76,78,79,80,84,85,86,87,90,91,92,93,94,95,101,102,103,106,107,129,135,150,153,154,156,158,160,161,167,184,187,191,192,193,196,199,202,204,205,206,207,208,211,212,213,214,215,216,223,226,228,230,231,232,233,238,239,240,241,242,243,246,252,272,283,284,286,287,288,289,290,292,297,300,318,329,332,333,335,337,339,340,342,345,347,351,352,356,357,358,359,360,362,363,364,366,367,392,405,409,411,412,414,415,419,431,432,434,435,437,438,439,440,442,444,447,448,449,450,451,452,453,454,455,457,467,468,469,471,472,482,483,484,485,486,487,488,489,490,491,492,493,494,495,498,499,508,509,510,511,512,513,518,519,],[40,40,-74,-84,-81,-72,-73,-7,-69,40,-86,-68,-6,-83,-5,-1,-8,-71,-80,-9,-90,40,40,-78,-70,-37,-82,-10,-4,-77,-3,-75,40,-79,-85,40,-76,-31,40,-65,-118,40,-16,-121,-33,-122,-87,-88,-36,-47,-66,-29,-2,40,-15,40,-35,-14,-38,40,40,-108,-54,40,-109,-53,40,40,40,40,-103,-123,-89,40,40,-91,40,-93,-96,-162,-204,-125,-17,-12,40,40,-40,40,-13,-39,40,40,40,-189,-190,-225,-226,40,-249,-27,-56,-55,40,-104,-117,-119,-59,40,-113,-60,-112,-58,40,-107,-105,40,-106,-67,40,40,-92,-94,40,-203,-202,-229,-228,-95,40,-11,-42,-41,40,40,-57,-28,-250,-146,-227,40,-148,-116,-145,-120,40,-62,-22,-63,-61,40,40,40,-49,40,40,-259,-255,40,-230,-126,-163,-43,-18,40,40,-20,-251,-147,-191,-192,-252,-149,40,-150,40,40,-154,40,40,40,-51,-50,-260,-254,-256,-257,-261,40,40,40,40,-253,-151,40,-152,-155,40,-156,-26,-23,-52,-258,-262,-19,40,40,-24,-153,-157,-21,-25,]),'ADD':([50,51,54,69,71,76,78,79,84,85,86,87,90,91,103,114,115,116,118,119,120,122,123,125,126,127,129,130,131,134,136,137,139,142,143,144,145,146,148,149,158,159,160,163,164,166,167,168,169,170,173,177,179,180,181,183,184,185,186,187,191,192,193,196,199,212,213,220,225,226,228,230,231,232,233,245,248,249,250,251,252,253,254,255,256,258,259,260,262,263,264,265,266,270,271,273,274,275,276,277,278,279,280,281,282,285,296,297,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,328,329,332,333,339,345,348,357,359,360,363,364,366,378,379,380,382,385,390,394,398,399,402,403,404,410,418,419,420,422,424,426,428,432,434,438,444,448,451,453,454,455,457,461,462,463,464,465,466,474,476,477,478,479,480,481,482,483,484,485,487,489,490,492,495,502,504,505,507,509,510,512,513,514,515,517,520,521,],[88,-65,-16,139,-15,-14,-38,139,-108,-54,88,-109,-53,88,227,-247,-271,-268,-242,139,139,-244,-267,255,-205,-266,139,-245,-294,-269,-241,-233,-243,-270,-265,-291,-246,139,-272,139,-17,139,-12,-131,-133,-129,139,139,-247,-130,139,139,-97,-265,-134,139,-40,-167,-132,139,-13,-39,88,88,88,-56,-55,139,139,-59,227,-113,-60,-112,-58,139,139,-207,139,-209,139,139,139,139,139,-240,139,139,-239,139,139,139,139,139,139,139,139,139,139,139,139,139,139,-208,-206,139,139,-11,139,-42,-179,-216,-214,-220,-211,-218,-221,-217,-219,-212,-213,-215,139,139,-177,-98,-41,139,-168,139,139,139,139,-178,139,88,88,-57,-146,-148,139,-62,-63,-61,227,227,-49,-292,-293,-238,-235,-237,139,-273,255,255,-295,-297,-296,139,-176,-43,-180,139,-166,139,-164,88,88,-147,-149,-150,-154,227,227,-51,-50,-210,-234,-236,139,-248,139,139,139,139,-165,139,139,139,88,88,88,88,-151,-152,-155,-156,-52,139,-172,-171,-169,88,88,-153,-157,-174,-175,139,-173,-170,]),'MOD':([114,115,116,123,126,127,131,134,137,142,143,144,148,169,180,249,251,258,262,281,282,378,379,380,382,385,394,402,403,404,461,462,463,465,],[-247,-271,-268,-267,-205,-266,-294,-269,-233,-270,-265,279,-272,-247,-265,-207,-209,-240,-239,-208,-206,279,279,-238,-235,-237,-273,-295,-297,-296,-210,-234,-236,-248,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([79,167,173,183,299,315,321,325,422,426,477,479,481,502,517,],[163,163,163,163,163,422,163,163,476,163,163,163,163,163,163,]),'struct_or_union_specifier':([0,1,13,31,32,43,46,50,53,70,74,79,80,86,91,92,93,94,103,106,129,161,167,187,193,196,199,207,214,228,238,241,246,252,284,292,329,332,342,356,362,363,364,367,392,411,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'instance_method_definition':([103,228,363,364,453,454,],[230,230,230,230,230,230,]),'init_declarator_list':([38,77,],[73,73,]),'pointer':([0,14,26,31,38,59,68,77,96,103,110,154,157,228,268,284,350,363,364,392,453,454,],[18,60,18,18,18,102,113,18,18,18,113,289,18,18,393,289,18,18,18,393,18,18,]),'method_type':([88,89,200,227,229,343,],[201,210,336,355,361,441,]),'inclusive_or_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,250,252,259,260,270,271,273,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,397,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'category_implementation':([0,31,],[23,23,]),'protocol_declaration':([0,31,],[27,27,]),'enumerator':([56,97,224,],[98,98,353,]),'instance_method_declaration':([50,86,91,193,196,199,329,332,432,434,482,483,484,485,509,510,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'class_declaration_list':([0,31,],[37,37,]),'method_definition':([103,228,363,364,453,454,],[231,359,231,231,359,359,]),'protocol_list':([83,],[197,]),'parameter_list':([70,246,284,342,392,411,],[156,156,156,156,156,156,]),'labeled_statement':([79,167,173,183,299,321,325,426,477,479,481,502,517,],[166,166,166,166,166,166,166,166,166,166,166,166,166,]),'declaration_list':([46,74,79,356,362,447,450,],[80,161,167,449,452,488,491,]),'init_declarator':([38,77,157,],[72,72,293,]),'direct_abstract_declarator':([154,268,284,289,392,393,],[288,288,288,412,288,412,]),'type_declarator':([68,110,],[109,244,]),'unary_expression':([69,79,119,120,129,146,149,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,314,315,319,321,322,324,325,328,348,390,410,422,426,464,466,474,476,477,479,480,481,502,517,],[114,169,249,251,169,114,282,169,169,169,169,114,169,169,114,114,114,114,169,169,114,114,114,114,169,169,114,114,114,114,169,114,114,114,114,114,114,114,114,114,114,169,169,169,169,169,169,169,169,169,169,114,114,114,169,169,169,114,169,169,169,169,169,169,169,169,]),'initializer':([159,296,474,],[294,416,500,]),'enumerator_list':([56,97,],[99,222,]),'abstract_declarator':([154,268,284,392,],[286,391,407,407,]),'class_method_declaration':([50,86,91,193,196,199,329,332,432,434,482,483,484,485,509,510,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'type_specifier':([0,1,13,31,32,43,46,50,53,70,74,79,80,86,91,92,93,94,103,106,129,161,167,187,193,196,199,207,214,228,238,241,246,252,284,292,329,332,342,356,362,363,364,367,392,411,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[13,13,13,13,13,13,13,13,94,13,13,13,13,13,13,94,94,94,13,94,94,13,13,94,13,13,13,94,94,13,94,94,13,94,13,13,13,13,13,13,13,13,13,94,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'compound_statement':([46,74,79,80,161,167,173,183,299,321,325,356,362,426,447,449,450,452,477,479,481,488,491,502,517,],[76,160,170,191,297,170,170,170,170,170,170,448,451,170,487,489,490,492,170,170,170,512,513,170,170,]),'iteration_statement':([79,167,173,183,299,321,325,426,477,479,481,502,517,],[164,164,164,164,164,164,164,164,164,164,164,164,164,]),'visibility_specification':([106,],[241,]),'direct_declarator':([0,18,26,31,38,77,96,103,154,157,228,284,289,350,363,364,453,454,],[35,61,35,35,35,35,35,35,35,35,35,35,61,35,35,35,35,35,]),'translation_unit':([0,],[31,]),'multiplicative_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,378,379,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,]),'declarator':([0,26,31,38,77,96,103,154,157,228,284,350,363,364,453,454,],[46,64,46,74,162,219,46,287,162,46,64,219,46,46,46,46,]),'argument_expression_list':([260,],[384,]),'superclass_name':([105,194,],[236,330,]),'logical_and_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,250,252,259,260,270,271,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,396,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'shift_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,259,260,263,264,265,266,270,271,273,276,277,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,386,387,388,389,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'struct_declarator':([96,350,],[218,446,]),'unary_selector':([88,89,201,210,227,229,355,361,],[202,202,202,202,202,202,202,202,]),'method_selector':([88,89,201,210,227,229,355,361,],[203,209,338,346,356,362,447,450,]),'type_qualifier':([0,1,13,14,31,32,43,46,50,59,70,74,79,80,86,91,103,161,167,193,196,199,228,246,284,292,329,332,342,356,362,363,364,392,411,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[43,43,43,58,43,43,43,43,43,101,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'assignment_operator':([169,],[314,]),'statement_list':([79,167,],[173,299,]),'expression':([79,129,167,168,173,183,187,250,252,259,270,299,315,321,322,324,325,328,422,426,476,477,479,480,481,502,517,],[174,269,174,302,174,174,269,269,269,381,395,174,174,174,425,427,174,430,174,174,503,174,174,506,174,174,174,]),'storage_class_specifier':([0,1,13,31,32,43,46,50,70,74,79,80,86,91,103,161,167,193,196,199,228,246,284,292,329,332,342,356,362,363,364,392,411,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'instance_variables':([62,81,82,236,238,330,367,433,],[103,193,196,364,365,432,456,483,]),'class_name':([22,30,47,108,],[62,65,81,243,]),'exclusive_or_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,250,252,254,259,260,270,271,273,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,377,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'class_implementation':([0,31,],[16,16,]),'additive_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,259,260,263,264,265,266,270,271,273,274,275,276,277,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,398,399,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'external_declaration':([0,31,],[20,67,]),'protocol_name':([6,83,334,],[50,198,436,]),'type_name':([129,187,207,252,],[267,267,344,375,]),'method_declaration':([50,86,91,193,196,199,329,332,432,434,482,483,484,485,509,510,],[85,85,212,85,85,212,212,212,85,85,212,85,85,212,212,212,]),'protocol_reference_list':([47,50,330,434,],[82,86,433,484,]),'relational_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,259,260,270,271,273,276,277,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,400,401,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'statement':([79,167,173,183,299,321,325,426,477,479,481,502,517,],[179,179,317,327,317,424,428,478,504,505,507,514,521,]),'cast_expression':([69,79,129,146,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,314,315,319,321,322,324,325,328,348,390,410,422,426,464,466,474,476,477,479,480,481,502,517,],[131,131,131,281,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,402,403,404,131,131,131,131,131,131,131,131,131,131,131,131,465,131,131,131,131,131,131,131,131,131,131,131,131,131,]),'struct_declarator_list':([96,],[221,]),'constant_expression':([69,177,220,225,245,285,348,410,],[133,323,349,354,369,408,445,470,]),'parameter_declaration':([70,246,284,292,342,392,411,],[153,153,153,415,153,153,153,]),'selector':([88,89,201,204,210,227,229,355,361,],[205,205,205,341,205,205,205,205,205,]),'primary_expression':([69,79,119,120,129,146,149,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,314,315,319,321,322,324,325,328,348,390,410,422,426,464,466,474,476,477,479,480,481,502,517,],[137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'declaration':([0,31,46,50,74,79,80,86,91,103,161,167,193,196,199,228,329,332,356,362,363,364,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[39,39,78,90,78,78,192,90,213,226,192,192,90,90,213,357,213,213,78,78,226,226,90,90,78,192,78,192,357,357,213,90,90,213,192,192,213,213,]),'equality_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,259,260,270,271,273,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,376,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'category_name':([104,195,],[235,331,]),'jump_statement':([79,167,173,183,299,321,325,426,477,479,481,502,517,],[181,181,181,181,181,181,181,181,181,181,181,181,181,]),'keyword_declarator':([88,89,201,204,210,227,229,355,361,],[206,206,206,340,206,206,206,206,206,]),'category_interface':([0,31,],[10,10,]),'keyword_selector':([88,89,201,210,227,229,355,361,],[204,204,204,204,204,204,204,204,]),'type_declaration':([0,31,46,50,74,79,80,86,91,103,161,167,193,196,199,228,329,332,356,362,363,364,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'struct_declaration_list':([53,92,106,241,],[93,214,238,367,]),'struct_declaration':([53,92,93,106,214,238,241,367,],[95,95,215,95,215,215,95,215,]),'and_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,248,250,252,254,259,260,270,271,273,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[121,121,121,121,121,121,121,121,121,121,121,121,121,374,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'class_interface':([0,31,],[19,19,]),'selection_statement':([79,167,173,183,299,321,325,426,477,479,481,502,517,],[186,186,186,186,186,186,186,186,186,186,186,186,186,]),'postfix_expression':([69,79,119,120,129,146,149,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,314,315,319,321,322,324,325,328,348,390,410,422,426,464,466,474,476,477,479,480,481,502,517,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'class_list':([30,],[66,]),'type_direct_declarator':([68,110,113,],[111,111,247,]),'initializer_list':([296,],[417,]),'logical_or_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,250,252,259,260,270,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'unary_operator':([69,79,119,120,129,146,149,159,167,168,173,177,183,187,220,225,245,248,250,252,253,254,255,256,259,260,263,264,265,266,270,271,273,274,275,276,277,278,279,280,285,296,299,314,315,319,321,322,324,325,328,348,390,410,422,426,464,466,474,476,477,479,480,481,502,517,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,]),'struct_or_union':([0,1,13,31,32,43,46,50,53,70,74,79,80,86,91,92,93,94,103,106,129,161,167,187,193,196,199,207,214,228,238,241,246,252,284,292,329,332,342,356,362,363,364,367,392,411,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assignment_expression':([79,129,159,167,168,173,183,187,250,252,259,260,270,296,299,314,315,319,321,322,324,325,328,422,426,464,474,476,477,479,480,481,502,517,],[188,188,295,188,188,188,188,188,188,188,188,383,188,295,188,421,188,423,188,188,188,188,188,188,188,496,295,188,188,188,188,188,188,188,]),'parameter_type_list':([70,246,284,342,392,411,],[152,372,406,440,406,473,]),'type_qualifier_list':([14,],[59,]),'implementation_definition_list':([103,363,364,],[228,453,454,]),'declaration_specifiers':([0,1,13,31,32,43,46,50,70,74,79,80,86,91,103,161,167,193,196,199,228,246,284,292,329,332,342,356,362,363,364,392,411,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[38,49,57,38,68,75,77,77,154,77,77,77,77,77,38,77,77,77,77,77,38,154,154,154,77,77,154,77,77,38,38,154,154,77,77,77,77,77,77,38,38,77,77,77,77,77,77,77,77,]),'identifier_list':([70,246,],[155,373,]),'class_method_definition':([103,228,363,364,453,454,],[232,232,232,232,232,232,]),'function_definition':([0,31,103,228,363,364,453,454,],[41,41,233,360,233,233,360,360,]),'enum_specifier':([0,1,13,31,32,43,46,50,53,70,74,79,80,86,91,92,93,94,103,106,129,161,167,187,193,196,199,207,214,228,238,241,246,252,284,292,329,332,342,356,362,363,364,367,392,411,432,434,447,449,450,452,453,454,482,483,484,485,488,491,509,510,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'interface_declaration_list':([50,86,193,196,432,434,483,484,],[91,199,329,332,482,485,509,510,]),'specifier_qualifier_list':([53,92,93,94,106,129,187,207,214,238,241,252,367,],[96,96,96,217,96,268,268,268,96,96,96,268,96,]),'conditional_expression':([69,79,129,159,167,168,173,177,183,187,220,225,245,250,252,259,260,270,285,296,299,314,315,319,321,322,324,325,328,348,410,422,426,464,466,474,476,477,479,480,481,502,517,],[147,190,190,190,190,190,190,147,190,190,147,147,147,190,190,190,190,190,147,190,190,190,190,190,190,190,190,190,190,147,147,190,190,190,497,190,190,190,190,190,190,190,190,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','semantic.py',10),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','semantic.py',11),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','semantic.py',18),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','semantic.py',19),
  ('external_declaration -> class_interface','external_declaration',1,'p_external_declaration','semantic.py',20),
  ('external_declaration -> class_implementation','external_declaration',1,'p_external_declaration','semantic.py',21),
  ('external_declaration -> category_interface','external_declaration',1,'p_external_declaration','semantic.py',22),
  ('external_declaration -> category_implementation','external_declaration',1,'p_external_declaration','semantic.py',23),
  ('external_declaration -> protocol_declaration','external_declaration',1,'p_external_declaration','semantic.py',24),
  ('external_declaration -> class_declaration_list','external_declaration',1,'p_external_declaration','semantic.py',25),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','semantic.py',32),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','semantic.py',33),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','semantic.py',34),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition','semantic.py',35),
  ('declaration -> declaration_specifiers SEMI','declaration',2,'p_declaration','semantic.py',42),
  ('declaration -> type_declaration SEMI','declaration',2,'p_declaration','semantic.py',43),
  ('declaration -> declaration_specifiers init_declarator_list SEMI','declaration',3,'p_declaration','semantic.py',44),
  ('class_interface -> INTERFACE class_name instance_variables interface_declaration_list END','class_interface',5,'p_class_interface','semantic.py',51),
  ('class_interface -> INTERFACE class_name COLON superclass_name instance_variables interface_declaration_list END','class_interface',7,'p_class_interface','semantic.py',52),
  ('class_interface -> INTERFACE protocol_reference_list instance_variables interface_declaration_list END','class_interface',5,'p_class_interface','semantic.py',53),
  ('class_interface -> INTERFACE class_name COLON superclass_name protocol_reference_list instance_variables interface_declaration_list END','class_interface',8,'p_class_interface','semantic.py',54),
  ('class_implementation -> IMPLEMENTATION class_name instance_variables implementation_definition_list END','class_implementation',5,'p_class_implementation','semantic.py',62),
  ('class_implementation -> IMPLEMENTATION class_name COLON superclass_name instance_variables implementation_definition_list END','class_implementation',7,'p_class_implementation','semantic.py',63),
  ('category_interface -> INTERFACE class_name ( category_name ) interface_declaration_list END','category_interface',7,'p_category_interface','semantic.py',70),
  ('category_interface -> INTERFACE class_name ( category_name ) protocol_reference_list interface_declaration_list END','category_interface',8,'p_category_interface','semantic.py',71),
  ('category_implementation -> IMPLEMENTATION class_name ( category_name ) implementation_definition_list END','category_implementation',7,'p_category_implementation','semantic.py',78),
  ('protocol_declaration -> PROTOCOL protocol_name interface_declaration_list END','protocol_declaration',4,'p_protocol_declaration','semantic.py',85),
  ('protocol_declaration -> PROTOCOL protocol_name protocol_reference_list interface_declaration_list END','protocol_declaration',5,'p_protocol_declaration','semantic.py',86),
  ('class_declaration_list -> CLASS class_list','class_declaration_list',2,'p_class_declaration_list','semantic.py',93),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','semantic.py',100),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',101),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','semantic.py',102),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',103),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','semantic.py',104),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','semantic.py',105),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','semantic.py',112),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','semantic.py',113),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','semantic.py',120),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','semantic.py',121),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement','semantic.py',128),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','semantic.py',129),
  ('compound_statement -> LBRACE declaration_list RBRACE','compound_statement',3,'p_compound_statement','semantic.py',130),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement','semantic.py',131),
  ('type_declaration -> TYPEDEF declaration_specifiers type_declarator','type_declaration',3,'p_type_declaration','semantic.py',138),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','semantic.py',145),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','semantic.py',146),
  ('class_name -> IDENTIFIER','class_name',1,'p_class_name','semantic.py',153),
  ('superclass_name -> IDENTIFIER','superclass_name',1,'p_superclass_name','semantic.py',160),
  ('instance_variables -> LBRACE struct_declaration_list RBRACE','instance_variables',3,'p_instance_variables','semantic.py',167),
  ('instance_variables -> LBRACE visibility_specification struct_declaration_list RBRACE','instance_variables',4,'p_instance_variables','semantic.py',168),
  ('instance_variables -> LBRACE struct_declaration_list instance_variables RBRACE','instance_variables',4,'p_instance_variables','semantic.py',169),
  ('instance_variables -> LBRACE visibility_specification struct_declaration_list instance_variables RBRACE','instance_variables',5,'p_instance_variables','semantic.py',170),
  ('interface_declaration_list -> declaration','interface_declaration_list',1,'p_interface_declaration_list','semantic.py',177),
  ('interface_declaration_list -> method_declaration','interface_declaration_list',1,'p_interface_declaration_list','semantic.py',178),
  ('interface_declaration_list -> interface_declaration_list declaration','interface_declaration_list',2,'p_interface_declaration_list','semantic.py',179),
  ('interface_declaration_list -> interface_declaration_list method_declaration','interface_declaration_list',2,'p_interface_declaration_list','semantic.py',180),
  ('protocol_reference_list -> LT protocol_list GT','protocol_reference_list',3,'p_protocol_reference_list','semantic.py',187),
  ('implementation_definition_list -> function_definition','implementation_definition_list',1,'p_implementation_definition_list','semantic.py',194),
  ('implementation_definition_list -> declaration','implementation_definition_list',1,'p_implementation_definition_list','semantic.py',195),
  ('implementation_definition_list -> method_definition','implementation_definition_list',1,'p_implementation_definition_list','semantic.py',196),
  ('implementation_definition_list -> implementation_definition_list function_definition','implementation_definition_list',2,'p_implementation_definition_list','semantic.py',197),
  ('implementation_definition_list -> implementation_definition_list declaration','implementation_definition_list',2,'p_implementation_definition_list','semantic.py',198),
  ('implementation_definition_list -> implementation_definition_list method_definition','implementation_definition_list',2,'p_implementation_definition_list','semantic.py',199),
  ('category_name -> IDENTIFIER','category_name',1,'p_category_name','semantic.py',206),
  ('protocol_name -> IDENTIFIER','protocol_name',1,'p_protocol_name','semantic.py',213),
  ('class_list -> class_name','class_list',1,'p_class_list','semantic.py',220),
  ('class_list -> class_list COMMA class_name','class_list',3,'p_class_list','semantic.py',221),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','semantic.py',228),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','semantic.py',229),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','semantic.py',230),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','semantic.py',231),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','semantic.py',239),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','semantic.py',240),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','semantic.py',241),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','semantic.py',242),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','semantic.py',243),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','semantic.py',244),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','semantic.py',245),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','semantic.py',246),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','semantic.py',247),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','semantic.py',248),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','semantic.py',249),
  ('type_specifier -> TYPE_NAME','type_specifier',1,'p_type_specifier','semantic.py',250),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','semantic.py',257),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','semantic.py',258),
  ('pointer -> MUL','pointer',1,'p_pointer','semantic.py',265),
  ('pointer -> MUL type_qualifier_list','pointer',2,'p_pointer','semantic.py',266),
  ('pointer -> MUL pointer','pointer',2,'p_pointer','semantic.py',267),
  ('pointer -> MUL type_qualifier_list pointer','pointer',3,'p_pointer','semantic.py',268),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','semantic.py',275),
  ('direct_declarator -> LP declarator RP','direct_declarator',3,'p_direct_declarator','semantic.py',276),
  ('direct_declarator -> direct_declarator LBRACK constant_expression RBRACK','direct_declarator',4,'p_direct_declarator','semantic.py',277),
  ('direct_declarator -> direct_declarator LBRACK RBRACK','direct_declarator',3,'p_direct_declarator','semantic.py',278),
  ('direct_declarator -> direct_declarator LP parameter_type_list RP','direct_declarator',4,'p_direct_declarator','semantic.py',279),
  ('direct_declarator -> direct_declarator LP identifier_list RP','direct_declarator',4,'p_direct_declarator','semantic.py',280),
  ('direct_declarator -> direct_declarator LP RP','direct_declarator',3,'p_direct_declarator','semantic.py',281),
  ('statement_list -> statement','statement_list',1,'p_statement_list','semantic.py',288),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','semantic.py',289),
  ('type_declarator -> pointer type_direct_declarator','type_declarator',2,'p_type_declarator','semantic.py',296),
  ('type_declarator -> type_direct_declarator','type_declarator',1,'p_type_declarator','semantic.py',297),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','semantic.py',304),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','semantic.py',305),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','semantic.py',312),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','semantic.py',313),
  ('visibility_specification -> PRIVATE','visibility_specification',1,'p_visibility_specification','semantic.py',320),
  ('visibility_specification -> PUBLIC','visibility_specification',1,'p_visibility_specification','semantic.py',321),
  ('visibility_specification -> PROTECTED','visibility_specification',1,'p_visibility_specification','semantic.py',322),
  ('method_declaration -> class_method_declaration','method_declaration',1,'p_method_declaration','semantic.py',329),
  ('method_declaration -> instance_method_declaration','method_declaration',1,'p_method_declaration','semantic.py',330),
  ('protocol_list -> protocol_name','protocol_list',1,'p_protocol_list','semantic.py',337),
  ('protocol_list -> protocol_list COMMA protocol_name','protocol_list',3,'p_protocol_list','semantic.py',338),
  ('method_definition -> class_method_definition','method_definition',1,'p_method_definition','semantic.py',345),
  ('method_definition -> instance_method_definition','method_definition',1,'p_method_definition','semantic.py',346),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','semantic.py',353),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','semantic.py',354),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE','struct_or_union_specifier',5,'p_struct_or_union_specifier','semantic.py',361),
  ('struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE','struct_or_union_specifier',4,'p_struct_or_union_specifier','semantic.py',362),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','semantic.py',363),
  ('enum_specifier -> ENUM LBRACE enumerator_list RBRACE','enum_specifier',4,'p_enum_specifier','semantic.py',370),
  ('enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE','enum_specifier',5,'p_enum_specifier','semantic.py',371),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','semantic.py',372),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','semantic.py',379),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','semantic.py',380),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','semantic.py',387),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','semantic.py',394),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','semantic.py',395),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','semantic.py',402),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','semantic.py',403),
  ('statement -> labeled_statement','statement',1,'p_statement','semantic.py',410),
  ('statement -> compound_statement','statement',1,'p_statement','semantic.py',411),
  ('statement -> expression_statement','statement',1,'p_statement','semantic.py',412),
  ('statement -> selection_statement','statement',1,'p_statement','semantic.py',413),
  ('statement -> iteration_statement','statement',1,'p_statement','semantic.py',414),
  ('statement -> jump_statement','statement',1,'p_statement','semantic.py',415),
  ('type_direct_declarator -> IDENTIFIER','type_direct_declarator',1,'p_type_direct_declarator','semantic.py',422),
  ('type_direct_declarator -> LP type_declarator RP','type_direct_declarator',3,'p_type_direct_declarator','semantic.py',423),
  ('type_direct_declarator -> type_direct_declarator LBRACK constant_expression RBRACK','type_direct_declarator',4,'p_type_direct_declarator','semantic.py',424),
  ('type_direct_declarator -> type_direct_declarator LBRACK RBRACK','type_direct_declarator',3,'p_type_direct_declarator','semantic.py',425),
  ('type_direct_declarator -> type_direct_declarator LP parameter_type_list RP','type_direct_declarator',4,'p_type_direct_declarator','semantic.py',426),
  ('type_direct_declarator -> type_direct_declarator LP identifier_list RP','type_direct_declarator',4,'p_type_direct_declarator','semantic.py',427),
  ('type_direct_declarator -> type_direct_declarator LP RP','type_direct_declarator',3,'p_type_direct_declarator','semantic.py',428),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','semantic.py',435),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','semantic.py',436),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','semantic.py',437),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI','struct_declaration',3,'p_struct_declaration','semantic.py',444),
  ('class_method_declaration -> ADD method_selector SEMI','class_method_declaration',3,'p_class_method_declaration','semantic.py',451),
  ('class_method_declaration -> ADD method_type method_selector SEMI','class_method_declaration',4,'p_class_method_declaration','semantic.py',452),
  ('instance_method_declaration -> SUB method_selector SEMI','instance_method_declaration',3,'p_instance_method_declaration','semantic.py',459),
  ('instance_method_declaration -> SUB method_type method_selector SEMI','instance_method_declaration',4,'p_instance_method_declaration','semantic.py',460),
  ('class_method_definition -> ADD method_selector compound_statement','class_method_definition',3,'p_class_method_definition','semantic.py',467),
  ('class_method_definition -> ADD method_type method_selector compound_statement','class_method_definition',4,'p_class_method_definition','semantic.py',468),
  ('class_method_definition -> ADD method_selector declaration_list compound_statement','class_method_definition',4,'p_class_method_definition','semantic.py',469),
  ('class_method_definition -> ADD method_type method_selector declaration_list compound_statement','class_method_definition',5,'p_class_method_definition','semantic.py',470),
  ('instance_method_definition -> SUB method_selector compound_statement','instance_method_definition',3,'p_instance_method_definition','semantic.py',477),
  ('instance_method_definition -> SUB method_type method_selector compound_statement','instance_method_definition',4,'p_instance_method_definition','semantic.py',478),
  ('instance_method_definition -> SUB method_selector declaration_list compound_statement','instance_method_definition',4,'p_instance_method_definition','semantic.py',479),
  ('instance_method_definition -> SUB method_type method_selector declaration_list compound_statement','instance_method_definition',5,'p_instance_method_definition','semantic.py',480),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','semantic.py',487),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','semantic.py',488),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','semantic.py',495),
  ('conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','semantic.py',496),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','semantic.py',503),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','semantic.py',504),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','semantic.py',511),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','semantic.py',512),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','semantic.py',513),
  ('expression_statement -> SEMI','expression_statement',1,'p_expression_statement','semantic.py',520),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','semantic.py',521),
  ('selection_statement -> IF LP expression RP statement','selection_statement',5,'p_selection_statement','semantic.py',528),
  ('selection_statement -> IF LP expression RP statement ELSE statement','selection_statement',7,'p_selection_statement','semantic.py',529),
  ('selection_statement -> SWITCH LP expression RP statement','selection_statement',5,'p_selection_statement','semantic.py',530),
  ('iteration_statement -> WHILE LP expression RP statement','iteration_statement',5,'p_iteration_statement','semantic.py',537),
  ('iteration_statement -> DO statement WHILE LP expression RP SEMI','iteration_statement',7,'p_iteration_statement','semantic.py',538),
  ('iteration_statement -> FOR LP expression_statement expression_statement RP statement','iteration_statement',6,'p_iteration_statement','semantic.py',539),
  ('iteration_statement -> FOR LP expression_statement expression_statement expression RP','iteration_statement',6,'p_iteration_statement','semantic.py',540),
  ('jump_statement -> GOTO IDENTIFIER SEMI','jump_statement',3,'p_jump_statement','semantic.py',547),
  ('jump_statement -> CONTINUE SEMI','jump_statement',2,'p_jump_statement','semantic.py',548),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','semantic.py',549),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement','semantic.py',550),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement','semantic.py',551),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','semantic.py',558),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','semantic.py',559),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','semantic.py',566),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','semantic.py',567),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','semantic.py',575),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','semantic.py',576),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','semantic.py',583),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','semantic.py',584),
  ('method_selector -> unary_selector','method_selector',1,'p_method_selector','semantic.py',591),
  ('method_selector -> keyword_selector','method_selector',1,'p_method_selector','semantic.py',592),
  ('method_selector -> keyword_selector COMMA ELLIPSIS','method_selector',3,'p_method_selector','semantic.py',593),
  ('method_selector -> keyword_selector COMMA parameter_type_list','method_selector',3,'p_method_selector','semantic.py',594),
  ('method_type -> LP type_name RP','method_type',3,'p_method_type','semantic.py',601),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','semantic.py',608),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','semantic.py',609),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','semantic.py',616),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','semantic.py',617),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','semantic.py',624),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','semantic.py',625),
  ('expression -> assignment_expression','expression',1,'p_expression','semantic.py',632),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','semantic.py',633),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','semantic.py',640),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','semantic.py',641),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','semantic.py',642),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','semantic.py',649),
  ('unary_expression -> INC unary_expression','unary_expression',2,'p_unary_expression','semantic.py',650),
  ('unary_expression -> DEC unary_expression','unary_expression',2,'p_unary_expression','semantic.py',651),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','semantic.py',652),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','semantic.py',653),
  ('unary_expression -> SIZEOF LP type_name RP','unary_expression',4,'p_unary_expression','semantic.py',654),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','semantic.py',661),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',662),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',663),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',664),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',665),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',666),
  ('assignment_operator -> LSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',667),
  ('assignment_operator -> RSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',668),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',669),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',670),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','semantic.py',671),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','semantic.py',678),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','semantic.py',679),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','semantic.py',680),
  ('unary_selector -> selector','unary_selector',1,'p_unary_selector','semantic.py',687),
  ('keyword_selector -> keyword_declarator','keyword_selector',1,'p_keyword_selector','semantic.py',694),
  ('keyword_selector -> keyword_selector keyword_declarator','keyword_selector',2,'p_keyword_selector','semantic.py',695),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','semantic.py',702),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','semantic.py',703),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','semantic.py',704),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','semantic.py',711),
  ('logical_and_expression -> logical_and_expression AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','semantic.py',712),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','semantic.py',719),
  ('postfix_expression -> postfix_expression LBRACK expression RBRACK','postfix_expression',4,'p_postfix_expression','semantic.py',720),
  ('postfix_expression -> postfix_expression LP RP','postfix_expression',3,'p_postfix_expression','semantic.py',721),
  ('postfix_expression -> postfix_expression LP argument_expression_list RP','postfix_expression',4,'p_postfix_expression','semantic.py',722),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','semantic.py',723),
  ('postfix_expression -> postfix_expression STRUCTACCESS IDENTIFIER','postfix_expression',3,'p_postfix_expression','semantic.py',724),
  ('postfix_expression -> postfix_expression INC','postfix_expression',2,'p_postfix_expression','semantic.py',725),
  ('postfix_expression -> postfix_expression DEC','postfix_expression',2,'p_postfix_expression','semantic.py',726),
  ('unary_operator -> BITAND','unary_operator',1,'p_unary_operator','semantic.py',733),
  ('unary_operator -> MUL','unary_operator',1,'p_unary_operator','semantic.py',734),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','semantic.py',735),
  ('unary_operator -> SUB','unary_operator',1,'p_unary_operator','semantic.py',736),
  ('unary_operator -> TILDE','unary_operator',1,'p_unary_operator','semantic.py',737),
  ('unary_operator -> BANG','unary_operator',1,'p_unary_operator','semantic.py',738),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','semantic.py',745),
  ('cast_expression -> LP type_name RP cast_expression','cast_expression',4,'p_cast_expression','semantic.py',746),
  ('selector -> IDENTIFIER','selector',1,'p_selector','semantic.py',753),
  ('keyword_declarator -> COLON IDENTIFIER','keyword_declarator',2,'p_keyword_declarator','semantic.py',760),
  ('keyword_declarator -> COLON method_type IDENTIFIER','keyword_declarator',3,'p_keyword_declarator','semantic.py',761),
  ('keyword_declarator -> selector COLON IDENTIFIER','keyword_declarator',3,'p_keyword_declarator','semantic.py',762),
  ('keyword_declarator -> selector COLON method_type IDENTIFIER','keyword_declarator',4,'p_keyword_declarator','semantic.py',763),
  ('direct_abstract_declarator -> LP abstract_declarator RP','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',770),
  ('direct_abstract_declarator -> LBRACK RBRACK','direct_abstract_declarator',2,'p_direct_abstract_declarator','semantic.py',771),
  ('direct_abstract_declarator -> LBRACK constant_expression RBRACK','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',772),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',773),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK','direct_abstract_declarator',4,'p_direct_abstract_declarator','semantic.py',774),
  ('direct_abstract_declarator -> LP RP','direct_abstract_declarator',2,'p_direct_abstract_declarator','semantic.py',775),
  ('direct_abstract_declarator -> LP parameter_type_list RP','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',776),
  ('direct_abstract_declarator -> direct_abstract_declarator LP RP','direct_abstract_declarator',3,'p_direct_abstract_declarator','semantic.py',777),
  ('direct_abstract_declarator -> direct_abstract_declarator LP parameter_type_list RP','direct_abstract_declarator',4,'p_direct_abstract_declarator','semantic.py',778),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','semantic.py',785),
  ('inclusive_or_expression -> inclusive_or_expression BITOR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','semantic.py',786),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','semantic.py',794),
  ('primary_expression -> HEX_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',795),
  ('primary_expression -> OCTAL_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',796),
  ('primary_expression -> BINARY_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',797),
  ('primary_expression -> DECIMAL_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',798),
  ('primary_expression -> FLOATING_POINT_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',799),
  ('primary_expression -> C_STRING_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',800),
  ('primary_expression -> OBJC_STRING_LITERAL','primary_expression',1,'p_primary_expression','semantic.py',801),
  ('primary_expression -> LP expression RP','primary_expression',3,'p_primary_expression','semantic.py',802),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','semantic.py',809),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','semantic.py',810),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','semantic.py',817),
  ('exclusive_or_expression -> exclusive_or_expression BITXOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','semantic.py',818),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','semantic.py',825),
  ('and_expression -> and_expression BITAND equality_expression','and_expression',3,'p_and_expression','semantic.py',826),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','semantic.py',833),
  ('equality_expression -> equality_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','semantic.py',834),
  ('equality_expression -> equality_expression NOTEQUAL relational_expression','equality_expression',3,'p_equality_expression','semantic.py',835),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','semantic.py',842),
  ('relational_expression -> relational_expression LT shift_expression','relational_expression',3,'p_relational_expression','semantic.py',843),
  ('relational_expression -> relational_expression GT shift_expression','relational_expression',3,'p_relational_expression','semantic.py',844),
  ('relational_expression -> relational_expression LE shift_expression','relational_expression',3,'p_relational_expression','semantic.py',845),
  ('relational_expression -> relational_expression GE shift_expression','relational_expression',3,'p_relational_expression','semantic.py',846),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','semantic.py',853),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','semantic.py',854),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','semantic.py',855),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','semantic.py',861),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','semantic.py',862),
  ('additive_expression -> additive_expression SUB multiplicative_expression','additive_expression',3,'p_additive_expression','semantic.py',863),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','semantic.py',870),
  ('multiplicative_expression -> multiplicative_expression MUL cast_expression','multiplicative_expression',3,'p_multiplicative_expression','semantic.py',871),
  ('multiplicative_expression -> multiplicative_expression DIV cast_expression','multiplicative_expression',3,'p_multiplicative_expression','semantic.py',872),
  ('multiplicative_expression -> multiplicative_expression MOD cast_expression','multiplicative_expression',3,'p_multiplicative_expression','semantic.py',873),
]
